// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`e2e parses e2e Action 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  SubButton: get('Action.SubButton'),
  Text: get('Action.Text'),
  Vertical: get('Action.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Action 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  SubButton: get('Action.SubButton'),
  Text: get('Action.Text'),
  Vertical: get('Action.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Action 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  SubButton: get('Action.SubButton'),
  Text: get('Action.Text'),
  Vertical: get('Action.Vertical'),
};
",
}
`;

exports[`e2e parses e2e AnimatedButton 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('AnimatedButton.Text'),
  Vertical: get('AnimatedButton.Vertical'),
};
",
}
`;

exports[`e2e parses e2e AnimatedButton 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('AnimatedButton.Text'),
  Vertical: get('AnimatedButton.Vertical'),
};
",
}
`;

exports[`e2e parses e2e AnimatedButton 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('AnimatedButton.Text'),
  Vertical: get('AnimatedButton.Vertical'),
};
",
}
`;

exports[`e2e parses e2e AppRegionDrag 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('AppRegionDrag.Vertical'),
};
",
}
`;

exports[`e2e parses e2e AppRegionDrag 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('AppRegionDrag.Vertical'),
};
",
}
`;

exports[`e2e parses e2e AppRegionDrag 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('AppRegionDrag.Vertical'),
};
",
}
`;

exports[`e2e parses e2e BackgroundImage 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('BackgroundImage.Horizontal'),
  Vertical: get('BackgroundImage.Vertical'),
};
",
}
`;

exports[`e2e parses e2e BackgroundImage 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('BackgroundImage.Horizontal'),
  Vertical: get('BackgroundImage.Vertical'),
};
",
}
`;

exports[`e2e parses e2e BackgroundImage 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('BackgroundImage.Horizontal'),
  Vertical: get('BackgroundImage.Vertical'),
};
",
}
`;

exports[`e2e parses e2e BlockThatUsesViewAndBothHaveScopes 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  BlockThatUsesViewAndBothHaveScopes: get(
    'BlockThatUsesViewAndBothHaveScopes.BlockThatUsesViewAndBothHaveScopes',
    'isBlack'
  ),
};
",
}
`;

exports[`e2e parses e2e BoxShadow 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical1: get('BoxShadow.Vertical:1'),
  Vertical2: get('BoxShadow.Vertical:2'),
  Vertical: get('BoxShadow.Vertical'),
};
",
}
`;

exports[`e2e parses e2e BoxShadow 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical1: get('BoxShadow.Vertical:1'),
  Vertical2: get('BoxShadow.Vertical:2'),
  Vertical: get('BoxShadow.Vertical'),
};
",
}
`;

exports[`e2e parses e2e BoxShadow 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical1: get('BoxShadow.Vertical:1'),
  Vertical2: get('BoxShadow.Vertical:2'),
  Vertical: get('BoxShadow.Vertical'),
};
",
}
`;

exports[`e2e parses e2e ClassName 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('ClassName.Vertical'),
};
",
}
`;

exports[`e2e parses e2e ClassName 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('ClassName.Vertical'),
};
",
}
`;

exports[`e2e parses e2e ClassName 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('ClassName.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Code 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('Code.Text'),
  Vertical: get('Code.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Code 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('Code.Text'),
  Vertical: get('Code.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Code 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('Code.Text'),
  Vertical: get('Code.Vertical'),
};
",
}
`;

exports[`e2e parses e2e ComplexScope 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  ComplexScope: get('ComplexScope.ComplexScope', 'isBlack'),
};
",
}
`;

exports[`e2e parses e2e ComplexScope 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  ComplexScope: get('ComplexScope.ComplexScope', 'isBlack'),
};
",
}
`;

exports[`e2e parses e2e ComplexScope 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  ComplexScope: get('ComplexScope.ComplexScope', 'isBlack'),
};
",
}
`;

exports[`e2e parses e2e DynamicStylesApplyToBasicBlocksOnly 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  OnTop: get('DynamicStylesApplyToBasicBlocksOnly.OnTop'),
  Vertical: get('DynamicStylesApplyToBasicBlocksOnly.Vertical'),
};
",
}
`;

exports[`e2e parses e2e DynamicStylesApplyToBasicBlocksOnly 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  OnTop: get('DynamicStylesApplyToBasicBlocksOnly.OnTop'),
  Vertical: get('DynamicStylesApplyToBasicBlocksOnly.Vertical'),
};
",
}
`;

exports[`e2e parses e2e DynamicStylesApplyToBasicBlocksOnly 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  OnTop: get('DynamicStylesApplyToBasicBlocksOnly.OnTop'),
  Vertical: get('DynamicStylesApplyToBasicBlocksOnly.Vertical'),
};
",
}
`;

exports[`e2e parses e2e EmptyText 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  EmptyText: get('EmptyText.EmptyText'),
};
",
}
`;

exports[`e2e parses e2e EmptyText 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  EmptyText: get('EmptyText.EmptyText'),
};
",
}
`;

exports[`e2e parses e2e EmptyText 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  EmptyText: get('EmptyText.EmptyText'),
};
",
}
`;

exports[`e2e parses e2e Form 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('Form.Button'),
  Email: get('Form.Email'),
  Form: get('Form.Form'),
  Name: get('Form.Name'),
  Password: get('Form.Password'),
  Surname: get('Form.Surname'),
  Text: get('Form.Text'),
};
",
}
`;

exports[`e2e parses e2e Form 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('Form.Button'),
  Email: get('Form.Email'),
  Form: get('Form.Form'),
  Name: get('Form.Name'),
  Password: get('Form.Password'),
  Surname: get('Form.Surname'),
  Text: get('Form.Text'),
};
",
}
`;

exports[`e2e parses e2e Form 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('Form.Button'),
  Email: get('Form.Email'),
  Form: get('Form.Form'),
  Name: get('Form.Name'),
  Password: get('Form.Password'),
  Surname: get('Form.Surname'),
  Text: get('Form.Text'),
};
",
}
`;

exports[`e2e parses e2e GoTo 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('GoTo.Text'),
  Vertical: get('GoTo.Vertical'),
};
",
}
`;

exports[`e2e parses e2e GoTo 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('GoTo.Text'),
  Vertical: get('GoTo.Vertical'),
};
",
}
`;

exports[`e2e parses e2e GoTo 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('GoTo.Text'),
  Vertical: get('GoTo.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Hover 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('Hover.Button'),
  Text: get('Hover.Text'),
};
",
}
`;

exports[`e2e parses e2e Hover 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('Hover.Button'),
  Text: get('Hover.Text'),
};
",
}
`;

exports[`e2e parses e2e Hover 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('Hover.Button'),
  Text: get('Hover.Text'),
};
",
}
`;

exports[`e2e parses e2e JustText 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('JustText.Text'),
};
",
}
`;

exports[`e2e parses e2e JustText 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('JustText.Text'),
};
",
}
`;

exports[`e2e parses e2e JustText 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('JustText.Text'),
};
",
}
`;

exports[`e2e parses e2e ListOfSomething 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  ListOfSomething: get('ListOfSomething.ListOfSomething'),
  Something: get('ListOfSomething.Something'),
};
",
}
`;

exports[`e2e parses e2e ListOfSomething 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  ListOfSomething: get('ListOfSomething.ListOfSomething'),
  Something: get('ListOfSomething.Something'),
};
",
}
`;

exports[`e2e parses e2e ListOfSomething 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  ListOfSomething: get('ListOfSomething.ListOfSomething'),
  Something: get('ListOfSomething.Something'),
};
",
}
`;

exports[`e2e parses e2e ListWhen 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Card: get('ListWhen.Card'),
  List: get('ListWhen.List'),
};
",
}
`;

exports[`e2e parses e2e ListWhen 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Card: get('ListWhen.Card'),
  List: get('ListWhen.List'),
};
",
}
`;

exports[`e2e parses e2e ListWhen 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Card: get('ListWhen.Card'),
  List: get('ListWhen.List'),
};
",
}
`;

exports[`e2e parses e2e LocalImage 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  LocalImage: get('LocalImage.LocalImage', 'isCat'),
};
",
}
`;

exports[`e2e parses e2e LocalImage 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  LocalImage: get('LocalImage.LocalImage', 'isCat'),
};
",
}
`;

exports[`e2e parses e2e LocalImage 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  LocalImage: get('LocalImage.LocalImage', 'isCat'),
};
",
}
`;

exports[`e2e parses e2e LocalImageSvg 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  LocalImageSvg: get('LocalImageSvg.LocalImageSvg'),
};
",
}
`;

exports[`e2e parses e2e LocalImageSvg 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  LocalImageSvg: get('LocalImageSvg.LocalImageSvg'),
};
",
}
`;

exports[`e2e parses e2e LocalImageSvg 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  LocalImageSvg: get('LocalImageSvg.LocalImageSvg'),
};
",
}
`;

exports[`e2e parses e2e LocalOrRemoteImageWhenCode 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  LocalOrRemoteImageWhenCode: get(
    'LocalOrRemoteImageWhenCode.LocalOrRemoteImageWhenCode'
  ),
};
",
}
`;

exports[`e2e parses e2e LocalOrRemoteImageWhenCode 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  LocalOrRemoteImageWhenCode: get(
    'LocalOrRemoteImageWhenCode.LocalOrRemoteImageWhenCode'
  ),
};
",
}
`;

exports[`e2e parses e2e LocalOrRemoteImageWhenCode 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  LocalOrRemoteImageWhenCode: get(
    'LocalOrRemoteImageWhenCode.LocalOrRemoteImageWhenCode'
  ),
};
",
}
`;

exports[`e2e parses e2e NameIsType 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Texto: get('NameIsType.Texto'),
};
",
}
`;

exports[`e2e parses e2e NameIsType 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Texto: get('NameIsType.Texto'),
};
",
}
`;

exports[`e2e parses e2e NameIsType 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Texto: get('NameIsType.Texto'),
};
",
}
`;

exports[`e2e parses e2e NestedRoutes 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Link: get('NestedRoutes.Link'),
  Text1: get('NestedRoutes.Text:1'),
  Text: get('NestedRoutes.Text'),
  Topic: get('NestedRoutes.Topic'),
  Topics: get('NestedRoutes.Topics'),
};
",
}
`;

exports[`e2e parses e2e NestedRoutes 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Link: get('NestedRoutes.Link'),
  Text1: get('NestedRoutes.Text:1'),
  Text: get('NestedRoutes.Text'),
  Topic: get('NestedRoutes.Topic'),
  Topics: get('NestedRoutes.Topics'),
};
",
}
`;

exports[`e2e parses e2e NestedRoutes 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Link: get('NestedRoutes.Link'),
  Text1: get('NestedRoutes.Text:1'),
  Text: get('NestedRoutes.Text'),
  Topic: get('NestedRoutes.Topic'),
  Topics: get('NestedRoutes.Topics'),
};
",
}
`;

exports[`e2e parses e2e Print 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text1: get('Print.Text:1'),
  Text: get('Print.Text'),
  Vertical: get('Print.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Print 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text1: get('Print.Text:1'),
  Text: get('Print.Text'),
  Vertical: get('Print.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Print 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text1: get('Print.Text:1'),
  Text: get('Print.Text'),
  Vertical: get('Print.Vertical'),
};
",
}
`;

exports[`e2e parses e2e ProxyTest 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('ProxyTest.Horizontal'),
  Vertical: get('ProxyTest.Vertical'),
};
",
}
`;

exports[`e2e parses e2e ProxyTest 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('ProxyTest.Horizontal'),
  Vertical: get('ProxyTest.Vertical'),
};
",
}
`;

exports[`e2e parses e2e ProxyTest 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('ProxyTest.Horizontal'),
  Vertical: get('ProxyTest.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Scope 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Scope: get(
    'Scope.Scope',
    'notWhatMakesBlueAndSomethingGreen',
    'whatMakesBlue',
    'somethingGreen'
  ),
};
",
}
`;

exports[`e2e parses e2e Scope 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Scope: get(
    'Scope.Scope',
    'notWhatMakesBlueAndSomethingGreen',
    'whatMakesBlue',
    'somethingGreen'
  ),
};
",
}
`;

exports[`e2e parses e2e Scope 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Scope: get(
    'Scope.Scope',
    'notWhatMakesBlueAndSomethingGreen',
    'whatMakesBlue',
    'somethingGreen'
  ),
};
",
}
`;

exports[`e2e parses e2e ScopeOnCustomView 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('ScopeOnCustomView.Button', 'b', 'a'),
};
",
}
`;

exports[`e2e parses e2e ScopeOnCustomView 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('ScopeOnCustomView.Button', 'b', 'a'),
};
",
}
`;

exports[`e2e parses e2e ScopeOnCustomView 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('ScopeOnCustomView.Button', 'b', 'a'),
};
",
}
`;

exports[`e2e parses e2e ScopePopup 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Popup: get('ScopePopup.Popup'),
  Text: get('ScopePopup.Text'),
  Toggle: get('ScopePopup.Toggle', 'whatMakesBlue', 'somethingGreen'),
};
",
}
`;

exports[`e2e parses e2e ScopePopup 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Popup: get('ScopePopup.Popup'),
  Text: get('ScopePopup.Text'),
  Toggle: get('ScopePopup.Toggle', 'whatMakesBlue', 'somethingGreen'),
};
",
}
`;

exports[`e2e parses e2e ScopePopup 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Popup: get('ScopePopup.Popup'),
  Text: get('ScopePopup.Text'),
  Toggle: get('ScopePopup.Toggle', 'whatMakesBlue', 'somethingGreen'),
};
",
}
`;

exports[`e2e parses e2e ScopePopup2 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Content: get('ScopePopup2.Content', 'isSuperVisible', 'isShown'),
  Popup: get('ScopePopup2.Popup'),
  Text: get('ScopePopup2.Text'),
  Toggle: get('ScopePopup2.Toggle'),
};
",
}
`;

exports[`e2e parses e2e ScopePopup2 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Content: get('ScopePopup2.Content', 'isSuperVisible', 'isShown'),
  Popup: get('ScopePopup2.Popup'),
  Text: get('ScopePopup2.Text'),
  Toggle: get('ScopePopup2.Toggle'),
};
",
}
`;

exports[`e2e parses e2e ScopePopup2 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Content: get('ScopePopup2.Content', 'isSuperVisible', 'isShown'),
  Popup: get('ScopePopup2.Popup'),
  Text: get('ScopePopup2.Text'),
  Toggle: get('ScopePopup2.Toggle'),
};
",
}
`;

exports[`e2e parses e2e SomeMissingStyle 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  WindowControl: get('SomeMissingStyle.WindowControl'),
};
",
}
`;

exports[`e2e parses e2e SomeMissingStyle 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  WindowControl: get('SomeMissingStyle.WindowControl'),
};
",
}
`;

exports[`e2e parses e2e SomeMissingStyle 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  WindowControl: get('SomeMissingStyle.WindowControl'),
};
",
}
`;

exports[`e2e parses e2e Teleport 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('Teleport.Horizontal'),
  Text: get('Teleport.Text'),
};
",
}
`;

exports[`e2e parses e2e Teleport 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('Teleport.Horizontal'),
  Text: get('Teleport.Text'),
};
",
}
`;

exports[`e2e parses e2e Teleport 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('Teleport.Horizontal'),
  Text: get('Teleport.Text'),
};
",
}
`;

exports[`e2e parses e2e Test 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Another: get('Test.Another'),
  Custom: get('Test.Custom'),
  Something: get('Test.Something'),
};
",
}
`;

exports[`e2e parses e2e Test 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Another: get('Test.Another'),
  Custom: get('Test.Custom'),
  Something: get('Test.Something'),
};
",
}
`;

exports[`e2e parses e2e Test 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Another: get('Test.Another'),
  Custom: get('Test.Custom'),
  Something: get('Test.Something'),
};
",
}
`;

exports[`e2e parses e2e TestIds 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('TestIds.App'),
  External: get('TestIds.External'),
  Name: get('TestIds.Name'),
  Text1: get('TestIds.Text:1'),
  Text: get('TestIds.Text'),
};
",
}
`;

exports[`e2e parses e2e TestIds 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('TestIds.App'),
  External: get('TestIds.External'),
  Name: get('TestIds.Name'),
  Text1: get('TestIds.Text:1'),
  Text: get('TestIds.Text'),
};
",
}
`;

exports[`e2e parses e2e TestIds 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('TestIds.App'),
  External: get('TestIds.External'),
  Name: get('TestIds.Name'),
  Text1: get('TestIds.Text:1'),
  Text: get('TestIds.Text'),
};
",
}
`;

exports[`e2e parses e2e TextInterpolation 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('TextInterpolation.Text'),
  Vertical: get('TextInterpolation.Vertical'),
};
",
}
`;

exports[`e2e parses e2e TextInterpolation 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('TextInterpolation.Text'),
  Vertical: get('TextInterpolation.Vertical'),
};
",
}
`;

exports[`e2e parses e2e TextInterpolation 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('TextInterpolation.Text'),
  Vertical: get('TextInterpolation.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Toggle 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('Toggle.Text'),
};
",
}
`;

exports[`e2e parses e2e Toggle 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('Toggle.Text'),
};
",
}
`;

exports[`e2e parses e2e Toggle 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('Toggle.Text'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureEmail 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Email: get('UseCaptureEmail.Email'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureEmail 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Email: get('UseCaptureEmail.Email'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureEmail 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Email: get('UseCaptureEmail.Email'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureFile 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  File: get('UseCaptureFile.File'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureFile 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  File: get('UseCaptureFile.File'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureFile 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  File: get('UseCaptureFile.File'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureNumber 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Number: get('UseCaptureNumber.Number'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureNumber 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Number: get('UseCaptureNumber.Number'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureNumber 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Number: get('UseCaptureNumber.Number'),
};
",
}
`;

exports[`e2e parses e2e UseCapturePhone 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Phone: get('UseCapturePhone.Phone'),
};
",
}
`;

exports[`e2e parses e2e UseCapturePhone 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Phone: get('UseCapturePhone.Phone'),
};
",
}
`;

exports[`e2e parses e2e UseCapturePhone 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Phone: get('UseCapturePhone.Phone'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureSecure 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Secure: get('UseCaptureSecure.Secure'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureSecure 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Secure: get('UseCaptureSecure.Secure'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureSecure 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Secure: get('UseCaptureSecure.Secure'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureText 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('UseCaptureText.Text'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureText 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('UseCaptureText.Text'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureText 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('UseCaptureText.Text'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureTextArea 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  CaptureTextArea: get('UseCaptureTextArea.CaptureTextArea'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureTextArea 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  CaptureTextArea: get('UseCaptureTextArea.CaptureTextArea'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureTextArea 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  CaptureTextArea: get('UseCaptureTextArea.CaptureTextArea'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureTextManagedFromOutside 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  CaptureText: get('UseCaptureTextManagedFromOutside.CaptureText'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureTextManagedFromOutside 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  CaptureText: get('UseCaptureTextManagedFromOutside.CaptureText'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureTextManagedFromOutside 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  CaptureText: get('UseCaptureTextManagedFromOutside.CaptureText'),
};
",
}
`;

exports[`e2e parses e2e UseHorizontal 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('UseHorizontal.Horizontal'),
};
",
}
`;

exports[`e2e parses e2e UseHorizontal 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('UseHorizontal.Horizontal'),
};
",
}
`;

exports[`e2e parses e2e UseHorizontal 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('UseHorizontal.Horizontal'),
};
",
}
`;

exports[`e2e parses e2e UseImage 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Image: get('UseImage.Image', 'another'),
};
",
}
`;

exports[`e2e parses e2e UseImage 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Image: get('UseImage.Image', 'another'),
};
",
}
`;

exports[`e2e parses e2e UseImage 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Image: get('UseImage.Image', 'another'),
};
",
}
`;

exports[`e2e parses e2e UseOfProxy 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('UseOfProxy.App'),
  Button: get('UseOfProxy.Button'),
};
",
}
`;

exports[`e2e parses e2e UseOfProxy 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('UseOfProxy.App'),
  Button: get('UseOfProxy.Button'),
};
",
}
`;

exports[`e2e parses e2e UseOfProxy 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('UseOfProxy.App'),
  Button: get('UseOfProxy.Button'),
};
",
}
`;

exports[`e2e parses e2e UseProxy 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('UseProxy.Button'),
  Text: get('UseProxy.Text'),
};
",
}
`;

exports[`e2e parses e2e UseProxy 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('UseProxy.Button'),
  Text: get('UseProxy.Text'),
};
",
}
`;

exports[`e2e parses e2e UseProxy 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('UseProxy.Button'),
  Text: get('UseProxy.Text'),
};
",
}
`;

exports[`e2e parses e2e UseRouter 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  About: get('UseRouter.About'),
  Home: get('UseRouter.Home'),
  Horizontal: get('UseRouter.Horizontal'),
  Topics: get('UseRouter.Topics'),
};
",
}
`;

exports[`e2e parses e2e UseRouter 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  About: get('UseRouter.About'),
  Home: get('UseRouter.Home'),
  Horizontal: get('UseRouter.Horizontal'),
  Topics: get('UseRouter.Topics'),
};
",
}
`;

exports[`e2e parses e2e UseRouter 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  About: get('UseRouter.About'),
  Home: get('UseRouter.Home'),
  Horizontal: get('UseRouter.Horizontal'),
  Topics: get('UseRouter.Topics'),
};
",
}
`;

exports[`e2e parses e2e UseSvg 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Svg: get('UseSvg.Svg'),
  SvgCircle: get('UseSvg.SvgCircle'),
  SvgGroup: get('UseSvg.SvgGroup'),
  SvgPath1: get('UseSvg.SvgPath:1'),
  SvgPath2: get('UseSvg.SvgPath:2'),
  SvgPath: get('UseSvg.SvgPath'),
  SvgText: get('UseSvg.SvgText'),
};
",
}
`;

exports[`e2e parses e2e UseSvg 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Svg: get('UseSvg.Svg'),
  SvgCircle: get('UseSvg.SvgCircle'),
  SvgGroup: get('UseSvg.SvgGroup'),
  SvgPath1: get('UseSvg.SvgPath:1'),
  SvgPath2: get('UseSvg.SvgPath:2'),
  SvgPath: get('UseSvg.SvgPath'),
  SvgText: get('UseSvg.SvgText'),
};
",
}
`;

exports[`e2e parses e2e UseSvg 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Svg: get('UseSvg.Svg'),
  SvgCircle: get('UseSvg.SvgCircle'),
  SvgGroup: get('UseSvg.SvgGroup'),
  SvgPath1: get('UseSvg.SvgPath:1'),
  SvgPath2: get('UseSvg.SvgPath:2'),
  SvgPath: get('UseSvg.SvgPath'),
  SvgText: get('UseSvg.SvgText'),
};
",
}
`;

exports[`e2e parses e2e UseText 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  UseText: get('UseText.UseText'),
};
",
}
`;

exports[`e2e parses e2e UseText 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  UseText: get('UseText.UseText'),
};
",
}
`;

exports[`e2e parses e2e UseText 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  UseText: get('UseText.UseText'),
};
",
}
`;

exports[`e2e parses e2e UseTextCustomFont 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Italic: get('UseTextCustomFont.Italic'),
  Normal: get('UseTextCustomFont.Normal'),
  UseTextCustomFont: get('UseTextCustomFont.UseTextCustomFont'),
};
",
}
`;

exports[`e2e parses e2e UseTextCustomFont 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Italic: get('UseTextCustomFont.Italic'),
  Normal: get('UseTextCustomFont.Normal'),
  UseTextCustomFont: get('UseTextCustomFont.UseTextCustomFont'),
};
",
}
`;

exports[`e2e parses e2e UseTextCustomFont 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Italic: get('UseTextCustomFont.Italic'),
  Normal: get('UseTextCustomFont.Normal'),
  UseTextCustomFont: get('UseTextCustomFont.UseTextCustomFont'),
};
",
}
`;

exports[`e2e parses e2e UseVertical 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('UseVertical.Vertical'),
};
",
}
`;

exports[`e2e parses e2e UseVertical 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('UseVertical.Vertical'),
};
",
}
`;

exports[`e2e parses e2e UseVertical 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('UseVertical.Vertical'),
};
",
}
`;

exports[`e2e parses e2e ViewNameIsntUsedInStyle 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  ViewNameIsntUsedInStyle: get(
    'ViewNameIsntUsedInStyle.ViewNameIsntUsedInStyle'
  ),
};
",
}
`;

exports[`e2e parses e2e ViewNameIsntUsedInStyle 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  ViewNameIsntUsedInStyle: get(
    'ViewNameIsntUsedInStyle.ViewNameIsntUsedInStyle'
  ),
};
",
}
`;

exports[`e2e parses e2e ViewNameIsntUsedInStyle 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  ViewNameIsntUsedInStyle: get(
    'ViewNameIsntUsedInStyle.ViewNameIsntUsedInStyle'
  ),
};
",
}
`;

exports[`e2e parses e2e When 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('When.App'),
  Text: get('When.Text'),
};
",
}
`;

exports[`e2e parses e2e When 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('When.App'),
  Text: get('When.Text'),
};
",
}
`;

exports[`e2e parses e2e When 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('When.App'),
  Text: get('When.Text'),
};
",
}
`;

exports[`e2e parses e2e WhenTopLevel 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('WhenTopLevel.Text'),
};
",
}
`;

exports[`e2e parses e2e WhenTopLevel 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('WhenTopLevel.Text'),
};
",
}
`;

exports[`e2e parses e2e WhenTopLevel 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('WhenTopLevel.Text'),
};
",
}
`;

exports[`e2e parses e2e WithTest 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('WithTest.Text'),
  Vertical: get('WithTest.Vertical'),
};
",
}
`;

exports[`e2e parses e2e WithTest 2`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('WithTest.Text'),
  Vertical: get('WithTest.Vertical'),
};
",
}
`;

exports[`e2e parses e2e WithTest 3`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('WithTest.Text'),
  Vertical: get('WithTest.Vertical'),
};
",
}
`;

exports[`react-dom parses react-dom Action 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SubButton from './SubButton.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Vertical_h1azf9vn = css({
  color: 'red',
  '&:disabled, &.disabled': {
    color: 'blue',
  },
});

class Action extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Action',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Action',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return props.check ? (
      <button
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        onClick={event => {
          context.track({
            block: props['data-test-id'] || 'Action',
            action: 'click',
          });
          props.clickMe(event);
        }}
        disabled={props.isDisabled}
        className={\`views-block \${Vertical_h1azf9vn}\`}
      >
        <span data-test-id={\`Action.Text|\`} className=\\"views-block\\">
          click me
        </span>
        <SubButton
          data-test-id={\`Action.SubButton|\`}
          isDisabled={true}
          className=\\"views-block\\"
        />
        {props.children}
      </button>
    ) : null;
  }
}
Action.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Action;
",
  "fonts": Array [],
  "props": Object {
    "check": "string",
    "clickMe": "function",
    "isDisabled": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Action: react-dom parses react-dom Action debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SubButton from './SubButton.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h1azf9vn = css({
  color: 'red',
  '&:disabled, &.disabled': {
    color: 'blue',
  },
});

const Action = props => {
  return props.check ? (
    <button
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      onClick={props.clickMe}
      disabled={props.isDisabled}
      className={\`views-block \${Vertical_h1azf9vn}\`}
    >
      <span data-test-id={\`Action.Text|\`} className=\\"views-block\\">
        click me
      </span>
      <SubButton
        data-test-id={\`Action.SubButton|\`}
        isDisabled={true}
        className=\\"views-block\\"
      />
      {props.children}
    </button>
  ) : null;
};

export default Action;
",
  "fonts": Array [],
  "props": Object {
    "check": "string",
    "clickMe": "function",
    "isDisabled": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AnimatedButton 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';
import PropTypes from 'prop-types';

const Vertical = styled('button')(({ props }) => ({
  opacity: props.opacity,
}));

class AnimatedButton extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'AnimatedButton',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'AnimatedButton',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Vertical
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        onClick={event => {
          context.track({
            block: props['data-test-id'] || 'AnimatedButton',
            action: 'click',
          });
          props.onClick(event);
        }}
        props={props}
        className=\\"views-block\\"
      >
        <span data-test-id={\`AnimatedButton.Text|\`} className=\\"views-block\\">
          hey
        </span>
        {props.children}
      </Vertical>
    );
  }
}
AnimatedButton.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default AnimatedButton;
",
  "fonts": Array [],
  "props": Object {
    "onClick": "function",
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AnimatedButton: react-dom parses react-dom AnimatedButton debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Vertical = styled('button')(({ props }) => ({
  opacity: props.opacity,
}));

const AnimatedButton = props => {
  return (
    <Vertical
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      onClick={props.onClick}
      props={props}
      className=\\"views-block\\"
    >
      <span data-test-id={\`AnimatedButton.Text|\`} className=\\"views-block\\">
        hey
      </span>
      {props.children}
    </Vertical>
  );
};

export default AnimatedButton;
",
  "fonts": Array [],
  "props": Object {
    "onClick": "function",
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AppRegionDrag 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Vertical_h1n973fw = css({
  WebkitAppRegion: 'drag',
  width: '92%',
  marginTop: 'auto',
});

class AppRegionDrag extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'AppRegionDrag',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'AppRegionDrag',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        className={\`views-block \${Vertical_h1n973fw}\`}
      >
        {props.children}
      </div>
    );
  }
}
AppRegionDrag.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default AppRegionDrag;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AppRegionDrag: react-dom parses react-dom AppRegionDrag debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h1n973fw = css({
  WebkitAppRegion: 'drag',
  width: '92%',
  marginTop: 'auto',
});

const AppRegionDrag = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${Vertical_h1n973fw}\`}
    >
      {props.children}
    </div>
  );
};

export default AppRegionDrag;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom BackgroundImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Vertical_h1q68ydz = css({
  backgroundImage: \\"url('https://viewsdx.com/image.jpg')\\",
});
const Horizontal = styled('div')(
  {
    flexDirection: 'row',
    backgroundSize: 'contain',
  },
  ({ props }) => ({
    backgroundImage: \`url(\${props.backgroundImage})\`,
  })
);

class BackgroundImage extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'BackgroundImage',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'BackgroundImage',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        className={\`views-block \${Vertical_h1q68ydz}\`}
      >
        <Horizontal
          data-test-id={\`BackgroundImage.Horizontal|\`}
          props={props}
          className=\\"views-block\\"
        />
        {props.children}
      </div>
    );
  }
}
BackgroundImage.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default BackgroundImage;
",
  "fonts": Array [],
  "props": Object {
    "backgroundImage": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom BackgroundImage: react-dom parses react-dom BackgroundImage debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';

const Vertical_h1q68ydz = css({
  backgroundImage: \\"url('https://viewsdx.com/image.jpg')\\",
});
const Horizontal = styled('div')(
  {
    flexDirection: 'row',
    backgroundSize: 'contain',
  },
  ({ props }) => ({
    backgroundImage: \`url(\${props.backgroundImage})\`,
  })
);

const BackgroundImage = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${Vertical_h1q68ydz}\`}
    >
      <Horizontal
        data-test-id={\`BackgroundImage.Horizontal|\`}
        props={props}
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default BackgroundImage;
",
  "fonts": Array [],
  "props": Object {
    "backgroundImage": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom BlockThatUsesViewAndBothHaveScopes 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Scope from './Scope.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class BlockThatUsesViewAndBothHaveScopes extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'BlockThatUsesViewAndBothHaveScopes',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'BlockThatUsesViewAndBothHaveScopes',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Scope
        data-test-id={\`\${props['data-test-id'] ||
          'BlockThatUsesViewAndBothHaveScopes'}|\${
          props.isBlack ? 'isBlack' : ''
        }\`}
        className=\\"views-block\\"
      >
        {props.children}
      </Scope>
    );
  }
}
BlockThatUsesViewAndBothHaveScopes.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default BlockThatUsesViewAndBothHaveScopes;
",
  "fonts": Array [],
  "props": Object {
    "isBlack": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom BlockThatUsesViewAndBothHaveScopes: react-dom parses react-dom BlockThatUsesViewAndBothHaveScopes debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Scope from './Scope.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const BlockThatUsesViewAndBothHaveScopes = props => {
  return (
    <Scope
      data-test-id={\`\${props['data-test-id'] ||
        'BlockThatUsesViewAndBothHaveScopes'}|\${
        props.isBlack ? 'isBlack' : ''
      }\`}
      className=\\"views-block\\"
    >
      {props.children}
    </Scope>
  );
};

export default BlockThatUsesViewAndBothHaveScopes;
",
  "fonts": Array [],
  "props": Object {
    "isBlack": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom BoxShadow 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Vertical = styled('div')(({ props }) => ({
  boxShadow: \`10px 5px 2px \${props.color}\`,
}));
const Vertical1 = styled('div')(({ props }) => ({
  boxShadow: \`10px 5px 10px \${props.color}\`,
}));
const Vertical_he0xt4e = css({ boxShadow: '0px 8px 15px 0px rgba(0,0,0,0.1)' });

class BoxShadow extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'BoxShadow',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'BoxShadow',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Vertical
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        props={props}
        className=\\"views-block\\"
      >
        <Vertical1
          data-test-id={\`BoxShadow.Vertical:1|\`}
          props={props}
          className=\\"views-block\\"
        >
          <div
            data-test-id={\`BoxShadow.Vertical:2|\`}
            className={\`views-block \${Vertical_he0xt4e}\`}
          />
        </Vertical1>
        {props.children}
      </Vertical>
    );
  }
}
BoxShadow.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default BoxShadow;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom BoxShadow: react-dom parses react-dom BoxShadow debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';

const Vertical = styled('div')(({ props }) => ({
  boxShadow: \`10px 5px 2px \${props.color}\`,
}));
const Vertical1 = styled('div')(({ props }) => ({
  boxShadow: \`10px 5px 10px \${props.color}\`,
}));
const Vertical_he0xt4e = css({ boxShadow: '0px 8px 15px 0px rgba(0,0,0,0.1)' });

const BoxShadow = props => {
  return (
    <Vertical
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      props={props}
      className=\\"views-block\\"
    >
      <Vertical1
        data-test-id={\`BoxShadow.Vertical:1|\`}
        props={props}
        className=\\"views-block\\"
      >
        <div
          data-test-id={\`BoxShadow.Vertical:2|\`}
          className={\`views-block \${Vertical_he0xt4e}\`}
        />
      </Vertical1>
      {props.children}
    </Vertical>
  );
};

export default BoxShadow;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ClassName 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Vertical_h118stgu = css({ backgroundColor: 'blue' });

class ClassName extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ClassName',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ClassName',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        className={\`views-block hey \${Vertical_h118stgu}\`}
      >
        {props.children}
      </div>
    );
  }
}
ClassName.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ClassName;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ClassName: react-dom parses react-dom ClassName debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h118stgu = css({ backgroundColor: 'blue' });

const ClassName = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block hey \${Vertical_h118stgu}\`}
    >
      {props.children}
    </div>
  );
};

export default ClassName;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Code 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Vertical_h1cyenk5 = css({ backgroundColor: 'red' });
const Text = styled('span')(({ props }) => ({
  color: props.color,
}));

class Code extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Code',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Code',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        ref={$e => (this.$e = $e)}
        className={\`views-block \${Vertical_h1cyenk5}\`}
      >
        <Text
          data-test-id={\`Code.Text|\`}
          innerRef={props.refText}
          props={props}
          className=\\"views-block\\"
        >
          {props.text}
        </Text>
        {props.children}
      </div>
    );
  }
}
Code.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Code;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
    "refText": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Code: react-dom parses react-dom Code debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';

const Vertical_h1cyenk5 = css({ backgroundColor: 'red' });
const Text = styled('span')(({ props }) => ({
  color: props.color,
}));

const Code = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${Vertical_h1cyenk5}\`}
    >
      <Text data-test-id={\`Code.Text|\`} props={props} className=\\"views-block\\">
        {props.text}
      </Text>
      {props.children}
    </div>
  );
};

export default Code;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
    "refText": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ComplexScope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Scope from './Scope.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class ComplexScope extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ComplexScope',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ComplexScope',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Scope
        data-test-id={\`\${props['data-test-id'] || 'ComplexScope'}|\${
          props.isBlack ? 'isBlack' : ''
        }\`}
        className=\\"views-block\\"
      >
        {props.children}
      </Scope>
    );
  }
}
ComplexScope.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ComplexScope;
",
  "fonts": Array [],
  "props": Object {
    "isBlack": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ComplexScope: react-dom parses react-dom ComplexScope debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Scope from './Scope.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ComplexScope = props => {
  return (
    <Scope
      data-test-id={\`\${props['data-test-id'] || 'ComplexScope'}|\${
        props.isBlack ? 'isBlack' : ''
      }\`}
      className=\\"views-block\\"
    >
      {props.children}
    </Scope>
  );
};

export default ComplexScope;
",
  "fonts": Array [],
  "props": Object {
    "isBlack": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom DynamicStylesApplyToBasicBlocksOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';
import PropTypes from 'prop-types';

const Vertical = styled('div')(({ props }) => ({
  height: props.height,
}));

class DynamicStylesApplyToBasicBlocksOnly extends React.Component {
  componentDidMount() {
    this.context.track({
      block:
        this.props['data-test-id'] || 'DynamicStylesApplyToBasicBlocksOnly',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block:
        this.props['data-test-id'] || 'DynamicStylesApplyToBasicBlocksOnly',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Vertical
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        props={props}
        className=\\"views-block\\"
      >
        <SomeThing
          data-test-id={\`DynamicStylesApplyToBasicBlocksOnly.OnTop|\`}
          height={props.height}
          className=\\"views-block\\"
        />
        {props.children}
      </Vertical>
    );
  }
}
DynamicStylesApplyToBasicBlocksOnly.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom DynamicStylesApplyToBasicBlocksOnly: react-dom parses react-dom DynamicStylesApplyToBasicBlocksOnly debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Vertical = styled('div')(({ props }) => ({
  height: props.height,
}));

const DynamicStylesApplyToBasicBlocksOnly = props => {
  return (
    <Vertical
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      props={props}
      className=\\"views-block\\"
    >
      <SomeThing
        data-test-id={\`DynamicStylesApplyToBasicBlocksOnly.OnTop|\`}
        height={props.height}
        className=\\"views-block\\"
      />
      {props.children}
    </Vertical>
  );
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom EmptyText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class EmptyText extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'EmptyText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'EmptyText',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <span
        data-test-id={\`\${props['data-test-id'] || 'EmptyText'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}
EmptyText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default EmptyText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom EmptyText: react-dom parses react-dom EmptyText debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const EmptyText = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'EmptyText'}|\`}
      className=\\"views-block\\"
    />
  );
};

export default EmptyText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Form 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Form',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Form',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <form
        data-test-id={\`\${props['data-test-id'] || 'Form'}|\`}
        onSubmit={() => props.onSubmit(state)}
        className=\\"views-block\\"
      >
        <input
          type=\\"text\\"
          onChange={event => this.setState({ name: event.target.value })}
          value={state.name}
          data-test-id={\`Form.Name|\`}
          autoFocus={true}
          className=\\"views-block\\"
        />
        <input
          type=\\"text\\"
          onChange={event => this.setState({ surname: event.target.value })}
          value={state.surname}
          data-test-id={\`Form.Surname|\`}
          className=\\"views-block\\"
        />
        <input
          type=\\"password\\"
          onChange={event => this.setState({ password: event.target.value })}
          value={state.password}
          data-test-id={\`Form.Password|\`}
          className=\\"views-block\\"
        />
        <input
          type=\\"email\\"
          onChange={event => this.setState({ email: event.target.value })}
          value={state.email}
          data-test-id={\`Form.Email|\`}
          defaultValue=\\"morph@viewsdx.com\\"
          className=\\"views-block\\"
        />
        <button
          data-test-id={\`Form.Button|\`}
          onClick={event => {
            context.track({
              block: props['data-test-id'] || 'Form',
              action: 'click',
            });
            (() => props.onSubmit(state))(event);
          }}
          className=\\"views-block\\"
        >
          <span data-test-id={\`Form.Text|\`} className=\\"views-block\\">
            Send!
          </span>
        </button>
        {props.children}
      </form>
    );
  }
}
Form.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Form;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Form: react-dom parses react-dom Form debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <form
        data-test-id={\`\${props['data-test-id'] || 'Form'}|\`}
        onSubmit={() => props.onSubmit(state)}
        className=\\"views-block\\"
      >
        <input
          type=\\"text\\"
          onChange={event => this.setState({ name: event.target.value })}
          value={state.name}
          tabIndex={-1}
          data-test-id={\`Form.Name|\`}
          className={\`views-block mousetrap\`}
        />
        <input
          type=\\"text\\"
          onChange={event => this.setState({ surname: event.target.value })}
          value={state.surname}
          tabIndex={-1}
          data-test-id={\`Form.Surname|\`}
          className={\`views-block mousetrap\`}
        />
        <input
          type=\\"password\\"
          onChange={event => this.setState({ password: event.target.value })}
          value={state.password}
          tabIndex={-1}
          data-test-id={\`Form.Password|\`}
          className={\`views-block mousetrap\`}
        />
        <input
          type=\\"email\\"
          onChange={event => this.setState({ email: event.target.value })}
          value={state.email}
          tabIndex={-1}
          data-test-id={\`Form.Email|\`}
          defaultValue=\\"morph@viewsdx.com\\"
          className={\`views-block mousetrap\`}
        />
        <button
          data-test-id={\`Form.Button|\`}
          onClick={() => props.onSubmit(state)}
          className=\\"views-block\\"
        >
          <span data-test-id={\`Form.Text|\`} className=\\"views-block\\">
            Send!
          </span>
        </button>
        {props.children}
      </form>
    );
  }
}

export default Form;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom GoTo 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class GoTo extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'GoTo',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'GoTo',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <a
        href=\\"https://viewsdx.com\\"
        rel=\\"noopener noreferrer\\"
        target=\\"_blank\\"
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        className=\\"views-block\\"
      >
        <span data-test-id={\`GoTo.Text|\`} className=\\"views-block\\">
          Go to ViewsDX website!
        </span>
        {props.children}
      </a>
    );
  }
}
GoTo.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default GoTo;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom GoTo: react-dom parses react-dom GoTo debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const GoTo = props => {
  return (
    <a
      href=\\"https://viewsdx.com\\"
      rel=\\"noopener noreferrer\\"
      target=\\"_blank\\"
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`GoTo.Text|\`} className=\\"views-block\\">
        Go to ViewsDX website!
      </span>
      {props.children}
    </a>
  );
};

export default GoTo;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Hover 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';
import PropTypes from 'prop-types';

const Button = styled('button')(({ props }) => ({
  backgroundColor: props.backgroundColor,
  '&:hover, &.hover': {
    backgroundColor: props.backgroundColorHover,
  },
}));
const Text = styled('span')(
  {
    color: 'white',
    [\`\${Button}:hover &, \${Button}.hover &\`]: {
      color: 'black',
    },
  },
  ({ props }) => ({
    fontSize: props.fontSize,
    [\`\${Button}:hover &, \${Button}.hover &\`]: {
      fontSize: props.fontSizeHover,
    },
  })
);

class Hover extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Hover',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Hover',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Button
        data-test-id={\`\${props['data-test-id'] || 'Button'}|\`}
        onClick={event => {
          context.track({
            block: props['data-test-id'] || 'Hover',
            action: 'click',
          });
          props.onClick(event);
        }}
        props={props}
        className=\\"views-block\\"
      >
        <Text
          data-test-id={\`Hover.Text|\`}
          props={props}
          className=\\"views-block\\"
        >
          Hey!
        </Text>
        {props.children}
      </Button>
    );
  }
}
Hover.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Hover;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColor": "string",
    "backgroundColorHover": "string",
    "fontSize": "number",
    "fontSizeHover": "number",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Hover: react-dom parses react-dom Hover debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Button = styled('button')(({ props }) => ({
  backgroundColor: props.backgroundColor,
  '&:hover, &.hover': {
    backgroundColor: props.backgroundColorHover,
  },
}));
const Text = styled('span')(
  {
    color: 'white',
    [\`\${Button}:hover &, \${Button}.hover &\`]: {
      color: 'black',
    },
  },
  ({ props }) => ({
    fontSize: props.fontSize,
    [\`\${Button}:hover &, \${Button}.hover &\`]: {
      fontSize: props.fontSizeHover,
    },
  })
);

const Hover = props => {
  return (
    <Button
      data-test-id={\`\${props['data-test-id'] || 'Button'}|\`}
      onClick={props.onClick}
      props={props}
      className=\\"views-block\\"
    >
      <Text data-test-id={\`Hover.Text|\`} props={props} className=\\"views-block\\">
        Hey!
      </Text>
      {props.children}
    </Button>
  );
};

export default Hover;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColor": "string",
    "backgroundColorHover": "string",
    "fontSize": "number",
    "fontSizeHover": "number",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom JustText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class JustText extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'JustText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'JustText',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <span
        data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
        className=\\"views-block\\"
      >
        hey!
      </span>
    );
  }
}
JustText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default JustText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom JustText: react-dom parses react-dom JustText debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const JustText = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
      className=\\"views-block\\"
    >
      hey!
    </span>
  );
};

export default JustText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListOfSomething 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Something from './Something.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class ListOfSomething extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ListOfSomething',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ListOfSomething',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'ListOfSomething'}|\`}
        className=\\"views-block\\"
      >
        {Array.isArray(props.from) &&
          props.from.map((item, index) => (
            <Something
              {...item}
              key={item.id || index}
              data-test-id={\`ListOfSomething.Something|\`}
              className=\\"views-block\\"
            />
          ))}
        {props.children}
      </div>
    );
  }
}
ListOfSomething.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ListOfSomething;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListOfSomething: react-dom parses react-dom ListOfSomething debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Something from './Something.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ListOfSomething = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'ListOfSomething'}|\`}
      className=\\"views-block\\"
    >
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Something
            {...item}
            key={item.id || index}
            data-test-id={\`ListOfSomething.Something|\`}
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  );
};

export default ListOfSomething;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListWhen 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Card from './Card.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class ListWhen extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ListWhen',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ListWhen',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return props.showMe ? (
      <div
        data-test-id={\`\${props['data-test-id'] || 'List'}|\`}
        className=\\"views-block\\"
      >
        {Array.isArray(props.from) &&
          props.from.map((item, index) => (
            <Card
              {...item}
              key={item.id || index}
              data-test-id={\`ListWhen.Card|\`}
              className=\\"views-block\\"
            />
          ))}
        {props.children}
      </div>
    ) : null;
  }
}
ListWhen.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ListWhen;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListWhen: react-dom parses react-dom ListWhen debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Card from './Card.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ListWhen = props => {
  return props.showMe ? (
    <div
      data-test-id={\`\${props['data-test-id'] || 'List'}|\`}
      className=\\"views-block\\"
    >
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Card
            {...item}
            key={item.id || index}
            data-test-id={\`ListWhen.Card|\`}
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  ) : null;
};

export default ListWhen;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import garfieldPng from './garfield.png';
import chopperJpg from './chopper.jpg';
import PropTypes from 'prop-types';

class LocalImage extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'LocalImage',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'LocalImage',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <img
        data-test-id={\`\${props['data-test-id'] || 'LocalImage'}|\${
          props.isCat ? 'isCat' : ''
        }\`}
        src={props.isCat ? garfieldPng : chopperJpg}
        className=\\"views-block\\"
      />
    );
  }
}
LocalImage.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default LocalImage;
",
  "fonts": Array [],
  "props": Object {
    "isCat": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalImage: react-dom parses react-dom LocalImage debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const LocalImage = props => {
  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'LocalImage'}|\${
        props.isCat ? 'isCat' : ''
      }\`}
      src={
        props.isCat
          ? requireImage('./garfield.png')
          : requireImage('./chopper.jpg')
      }
      className=\\"views-block\\"
    />
  );
};

export default LocalImage;
",
  "fonts": Array [],
  "props": Object {
    "isCat": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalImageSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import chopperSvg from './chopper.svg';
import styled from 'react-emotion';
import PropTypes from 'prop-types';

const LocalImageSvg1 = styled('img')({ width: 50 }, ({ props }) => ({
  height: props.height,
}));

class LocalImageSvg extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'LocalImageSvg',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'LocalImageSvg',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <LocalImageSvg1
        data-test-id={\`\${props['data-test-id'] || 'LocalImageSvg'}|\`}
        src={chopperSvg}
        props={props}
        className=\\"views-block\\"
      />
    );
  }
}
LocalImageSvg.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default LocalImageSvg;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalImageSvg: react-dom parses react-dom LocalImageSvg debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const LocalImageSvg1 = styled('img')({ width: 50 }, ({ props }) => ({
  height: props.height,
}));

const LocalImageSvg = props => {
  return (
    <LocalImageSvg1
      data-test-id={\`\${props['data-test-id'] || 'LocalImageSvg'}|\`}
      src={requireImage('./chopper.svg')}
      props={props}
      className=\\"views-block\\"
    />
  );
};

export default LocalImageSvg;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalOrRemoteImageWhenCode 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class LocalOrRemoteImageWhenCode extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'LocalOrRemoteImageWhenCode',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'LocalOrRemoteImageWhenCode',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <img
        data-test-id={\`\${props['data-test-id'] ||
          'LocalOrRemoteImageWhenCode'}|\`}
        src={props.source}
        className=\\"views-block\\"
      />
    );
  }
}
LocalOrRemoteImageWhenCode.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default LocalOrRemoteImageWhenCode;
",
  "fonts": Array [],
  "props": Object {
    "source": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalOrRemoteImageWhenCode: react-dom parses react-dom LocalOrRemoteImageWhenCode debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const LocalOrRemoteImageWhenCode = props => {
  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'LocalOrRemoteImageWhenCode'}|\`}
      src={props.source}
      className=\\"views-block\\"
    />
  );
};

export default LocalOrRemoteImageWhenCode;
",
  "fonts": Array [],
  "props": Object {
    "source": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom NameIsType 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class NameIsType extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'NameIsType',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'NameIsType',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <span
        data-test-id={\`\${props['data-test-id'] || 'Texto'}|\`}
        className=\\"views-block\\"
      >
        iam
      </span>
    );
  }
}
NameIsType.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default NameIsType;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom NameIsType: react-dom parses react-dom NameIsType debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const NameIsType = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Texto'}|\`}
      className=\\"views-block\\"
    >
      iam
    </span>
  );
};

export default NameIsType;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom NestedRoutes 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-dom';
import { Route } from 'react-router-dom';
import Topic from './Topic.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class NestedRoutes extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'NestedRoutes',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'NestedRoutes',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Topics'}|\`}
        className=\\"views-block\\"
      >
        <span data-test-id={\`NestedRoutes.Text|\`} className=\\"views-block\\">
          topics
        </span>
        <Link
          to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
          data-test-id={\`NestedRoutes.Link|\`}
          className=\\"views-block\\"
        >
          <span data-test-id={\`NestedRoutes.Text:1|\`} className=\\"views-block\\">
            Rendering with React
          </span>
        </Link>
        <Route
          path=\\":topic\\"
          render={routeProps => (
            <Topic
              data-test-id={\`NestedRoutes.Topic|\`}
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        {props.children}
      </div>
    );
  }
}
NestedRoutes.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default withRouter(NestedRoutes);
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom NestedRoutes: react-dom parses react-dom NestedRoutes debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-dom';
import { Route } from 'react-router-dom';
import Topic from './Topic.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const NestedRoutes = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Topics'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`NestedRoutes.Text|\`} className=\\"views-block\\">
        topics
      </span>
      <Link
        to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
        data-test-id={\`NestedRoutes.Link|\`}
        className=\\"views-block\\"
      >
        <span data-test-id={\`NestedRoutes.Text:1|\`} className=\\"views-block\\">
          Rendering with React
        </span>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps => (
          <Topic
            data-test-id={\`NestedRoutes.Topic|\`}
            {...routeProps}
            className=\\"views-block\\"
          />
        )}
      />
      {props.children}
    </div>
  );
};

export default withRouter(NestedRoutes);
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Print 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Text_h1d06m5g = css({
  '@media print': {
    display: 'none',
  },
});

class Print extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Print',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Print',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        className=\\"views-block\\"
      >
        <span
          data-test-id={\`Print.Text|\`}
          className={\`views-block \${Text_h1d06m5g}\`}
        >
          not in print
        </span>
        <span data-test-id={\`Print.Text:1|\`} className=\\"views-block\\">
          hey
        </span>
        {props.children}
      </div>
    );
  }
}
Print.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Print;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Print: react-dom parses react-dom Print debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Text_h1d06m5g = css({
  '@media print': {
    display: 'none',
  },
});

const Print = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <span
        data-test-id={\`Print.Text|\`}
        className={\`views-block \${Text_h1d06m5g}\`}
      >
        not in print
      </span>
      <span data-test-id={\`Print.Text:1|\`} className=\\"views-block\\">
        hey
      </span>
      {props.children}
    </div>
  );
};

export default Print;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ProxyTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

class ProxyTest extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ProxyTest',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ProxyTest',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;
    const childrenArray = React.Children.toArray(props.children);
    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        className=\\"views-block\\"
      >
        <div
          data-test-id={\`ProxyTest.Horizontal|\`}
          className={\`views-block \${Horizontal_h1qq1i2q}\`}
        >
          {props.bla && childrenArray[props.childrenProxyMap['Something']]
            ? React.cloneElement(
                childrenArray[props.childrenProxyMap['Something']],
                { onClick: props.onClickRemapped }
              )
            : null}
        </div>
        {props.childrenProxyMap &&
          childrenArray[props.childrenProxyMap['View1']]}
      </div>
    );
  }
}
ProxyTest.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ProxyTest;
",
  "fonts": Array [],
  "props": Object {
    "bla": "string",
    "onClickRemapped": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ProxyTest: react-dom parses react-dom ProxyTest debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

const ProxyTest = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <div
        data-test-id={\`ProxyTest.Horizontal|\`}
        className={\`views-block \${Horizontal_h1qq1i2q}\`}
      >
        {props.bla && childrenArray[props.childrenProxyMap['Something']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['Something']],
              { onClick: props.onClickRemapped }
            )
          : null}
      </div>
      {props.childrenProxyMap && childrenArray[props.childrenProxyMap['View1']]}
    </div>
  );
};

export default ProxyTest;
",
  "fonts": Array [],
  "props": Object {
    "bla": "string",
    "onClickRemapped": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Scope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';
import PropTypes from 'prop-types';

const Scope1 = styled('span')(({ props }) => ({
  color: props.somethingGreen
    ? 'rgb(0,255,0)'
    : props.whatMakesBlue
      ? 'rgb(0,0,255)'
      : !props.whatMakesBlue && props.somethingGreen ? 'rgb(255,255,0)' : 'red',
}));

class Scope extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Scope',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Scope',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Scope1
        data-test-id={\`\${props['data-test-id'] || 'Scope'}|\${
          props.somethingGreen
            ? 'somethingGreen'
            : props.whatMakesBlue
              ? 'whatMakesBlue'
              : !props.whatMakesBlue && props.somethingGreen
                ? 'notWhatMakesBlueAndSomethingGreen'
                : ''
        }\`}
        props={props}
        className=\\"views-block\\"
      >
        {props.somethingGreen
          ? '2 green'
          : props.whatMakesBlue
            ? props.blue
            : !props.whatMakesBlue && props.somethingGreen
              ? 'is Yellow'
              : '1 red'}
      </Scope1>
    );
  }
}
Scope.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Scope;
",
  "fonts": Array [],
  "props": Object {
    "blue": "string",
    "somethingGreen": "string",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Scope: react-dom parses react-dom Scope debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Scope1 = styled('span')(({ props }) => ({
  color: props.somethingGreen
    ? 'rgb(0,255,0)'
    : props.whatMakesBlue
      ? 'rgb(0,0,255)'
      : !props.whatMakesBlue && props.somethingGreen ? 'rgb(255,255,0)' : 'red',
}));

const Scope = props => {
  return (
    <Scope1
      data-test-id={\`\${props['data-test-id'] || 'Scope'}|\${
        props.somethingGreen
          ? 'somethingGreen'
          : props.whatMakesBlue
            ? 'whatMakesBlue'
            : !props.whatMakesBlue && props.somethingGreen
              ? 'notWhatMakesBlueAndSomethingGreen'
              : ''
      }\`}
      props={props}
      className=\\"views-block\\"
    >
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue
          ? props.blue
          : !props.whatMakesBlue && props.somethingGreen
            ? 'is Yellow'
            : '1 red'}
    </Scope1>
  );
};

export default Scope;
",
  "fonts": Array [],
  "props": Object {
    "blue": "string",
    "somethingGreen": "string",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopeOnCustomView 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class ScopeOnCustomView extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ScopeOnCustomView',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ScopeOnCustomView',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Button
        data-test-id={\`\${props['data-test-id'] || 'Button'}|\${
          props.a ? 'a' : props.b ? 'b' : ''
        }\`}
        label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
        another={props.a ? 1 : 0}
        more={props.a ? props.different : props.more}
        className=\\"views-block\\"
      >
        {props.children}
      </Button>
    );
  }
}
ScopeOnCustomView.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ScopeOnCustomView;
",
  "fonts": Array [],
  "props": Object {
    "different": "string",
    "more": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopeOnCustomView: react-dom parses react-dom ScopeOnCustomView debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ScopeOnCustomView = props => {
  return (
    <Button
      data-test-id={\`\${props['data-test-id'] || 'Button'}|\${
        props.a ? 'a' : props.b ? 'b' : ''
      }\`}
      label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
      another={props.a ? 1 : 0}
      more={props.a ? props.different : props.more}
      className=\\"views-block\\"
    >
      {props.children}
    </Button>
  );
};

export default ScopeOnCustomView;
",
  "fonts": Array [],
  "props": Object {
    "different": "string",
    "more": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class ScopePopup extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ScopePopup',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ScopePopup',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Popup'}|\`}
        className=\\"views-block\\"
      >
        <button
          data-test-id={\`ScopePopup.Toggle|\${
            props.somethingGreen
              ? 'somethingGreen'
              : props.whatMakesBlue ? 'whatMakesBlue' : ''
          }\`}
          onClick={
            props.somethingGreen
              ? props.onClickGreen
              : props.whatMakesBlue ? props.onClickBlue : props.toggle
          }
          className=\\"views-block\\"
        >
          <span data-test-id={\`ScopePopup.Text|\`} className=\\"views-block\\">
            toggle popup
          </span>
        </button>
        {props.children}
      </div>
    );
  }
}
ScopePopup.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ScopePopup;
",
  "fonts": Array [],
  "props": Object {
    "onClickBlue": "function",
    "onClickGreen": "function",
    "somethingGreen": "string",
    "toggle": "function",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup: react-dom parses react-dom ScopePopup debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ScopePopup = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Popup'}|\`}
      className=\\"views-block\\"
    >
      <button
        data-test-id={\`ScopePopup.Toggle|\${
          props.somethingGreen
            ? 'somethingGreen'
            : props.whatMakesBlue ? 'whatMakesBlue' : ''
        }\`}
        onClick={
          props.somethingGreen
            ? props.onClickGreen
            : props.whatMakesBlue ? props.onClickBlue : props.toggle
        }
        className=\\"views-block\\"
      >
        <span data-test-id={\`ScopePopup.Text|\`} className=\\"views-block\\">
          toggle popup
        </span>
      </button>
      {props.children}
    </div>
  );
};

export default ScopePopup;
",
  "fonts": Array [],
  "props": Object {
    "onClickBlue": "function",
    "onClickGreen": "function",
    "somethingGreen": "string",
    "toggle": "function",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup2 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';
import PropTypes from 'prop-types';

const Content = styled('div')(({ props }) => ({
  opacity: props.isShown ? 1 : props.isSuperVisible ? 3 : 0,
}));

class ScopePopup2 extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ScopePopup2',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ScopePopup2',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Popup'}|\`}
        className=\\"views-block\\"
      >
        <button
          data-test-id={\`ScopePopup2.Toggle|\`}
          onClick={event => {
            context.track({
              block: props['data-test-id'] || 'ScopePopup2',
              action: 'click',
            });
            props.toggle(event);
          }}
          className=\\"views-block\\"
        >
          <span data-test-id={\`ScopePopup2.Text|\`} className=\\"views-block\\">
            toggle popup
          </span>
        </button>
        <Content
          data-test-id={\`ScopePopup2.Content|\${
            props.isShown
              ? 'isShown'
              : props.isSuperVisible ? 'isSuperVisible' : ''
          }\`}
          scale={props.isShown ? 1 : props.isSuperVisible ? 2 : 0}
          props={props}
          className=\\"views-block\\"
        />
        {props.children}
      </div>
    );
  }
}
ScopePopup2.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ScopePopup2;
",
  "fonts": Array [],
  "props": Object {
    "isShown": "string",
    "isSuperVisible": "string",
    "toggle": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup2: react-dom parses react-dom ScopePopup2 debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Content = styled('div')(({ props }) => ({
  opacity: props.isShown ? 1 : props.isSuperVisible ? 3 : 0,
}));

const ScopePopup2 = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Popup'}|\`}
      className=\\"views-block\\"
    >
      <button
        data-test-id={\`ScopePopup2.Toggle|\`}
        onClick={props.toggle}
        className=\\"views-block\\"
      >
        <span data-test-id={\`ScopePopup2.Text|\`} className=\\"views-block\\">
          toggle popup
        </span>
      </button>
      <Content
        data-test-id={\`ScopePopup2.Content|\${
          props.isShown
            ? 'isShown'
            : props.isSuperVisible ? 'isSuperVisible' : ''
        }\`}
        scale={props.isShown ? 1 : props.isSuperVisible ? 2 : 0}
        props={props}
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default ScopePopup2;
",
  "fonts": Array [],
  "props": Object {
    "isShown": "string",
    "isSuperVisible": "string",
    "toggle": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom SomeMissingStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';
import PropTypes from 'prop-types';

const WindowControl = styled('button')(
  {
    marginRight: 8,
    backgroundColor: '#CBCDCE',
    opacity: 0.7,
    transform: 'scale(1.1)',
    transition: 'all 0.15s ease-out',
    borderRadius: 10,
    width: 10,
    height: 10,
    '&:hover, &.hover': {
      transform: 'scale(1.5)',
    },
  },
  ({ props }) => ({
    '&:hover, &.hover': {
      backgroundColor: props.backgroundColorHover,
    },
  })
);

class SomeMissingStyle extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'SomeMissingStyle',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'SomeMissingStyle',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <WindowControl
        data-test-id={\`\${props['data-test-id'] || 'WindowControl'}|\`}
        onClick={event => {
          context.track({
            block: props['data-test-id'] || 'SomeMissingStyle',
            action: 'click',
          });
          props.onClick(event);
        }}
        tabIndex=\\"-1\\"
        props={props}
        className=\\"views-block\\"
      >
        {props.children}
      </WindowControl>
    );
  }
}
SomeMissingStyle.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default SomeMissingStyle;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColorHover": "string",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom SomeMissingStyle: react-dom parses react-dom SomeMissingStyle debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const WindowControl = styled('button')(
  {
    marginRight: 8,
    backgroundColor: '#CBCDCE',
    opacity: 0.7,
    transform: 'scale(1.1)',
    transition: 'all 0.15s ease-out',
    borderRadius: 10,
    width: 10,
    height: 10,
    '&:hover, &.hover': {
      transform: 'scale(1.5)',
    },
  },
  ({ props }) => ({
    '&:hover, &.hover': {
      backgroundColor: props.backgroundColorHover,
    },
  })
);

const SomeMissingStyle = props => {
  return (
    <WindowControl
      data-test-id={\`\${props['data-test-id'] || 'WindowControl'}|\`}
      onClick={props.onClick}
      props={props}
      className=\\"views-block\\"
    >
      {props.children}
    </WindowControl>
  );
};

export default SomeMissingStyle;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColorHover": "string",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Teleport 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-dom';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

class Teleport extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Teleport',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Teleport',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Link
        to=\\"..\\"
        data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
        className={\`views-block \${Horizontal_h1qq1i2q}\`}
      >
        <span data-test-id={\`Teleport.Text|\`} className=\\"views-block\\">
          go back
        </span>
        {props.children}
      </Link>
    );
  }
}
Teleport.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Teleport;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Teleport: react-dom parses react-dom Teleport debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-dom';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

const Teleport = props => {
  return (
    <Link
      to=\\"..\\"
      data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
      className={\`views-block \${Horizontal_h1qq1i2q}\`}
    >
      <span data-test-id={\`Teleport.Text|\`} className=\\"views-block\\">
        go back
      </span>
      {props.children}
    </Link>
  );
};

export default Teleport;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Test 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class Test extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Test',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Test',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Custom
        data-test-id={\`\${props['data-test-id'] || 'Custom'}|\`}
        stuff=\\"eqweqw\\"
        childrenProxyMap={{ Something: 0, Another: 1 }}
        className=\\"views-block\\"
      >
        <span data-test-id={\`Test.Something|\`} className=\\"views-block\\">
          v1vh1t1
        </span>
        <span data-test-id={\`Test.Another|\`} className=\\"views-block\\">
          inside custom
        </span>
        {props.children}
      </Custom>
    );
  }
}
Test.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Test;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Test: react-dom parses react-dom Test debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const Test = props => {
  return (
    <Custom
      data-test-id={\`\${props['data-test-id'] || 'Custom'}|\`}
      stuff=\\"eqweqw\\"
      childrenProxyMap={{ Something: 0, Another: 1 }}
      className=\\"views-block\\"
    >
      <span data-test-id={\`Test.Something|\`} className=\\"views-block\\">
        v1vh1t1
      </span>
      <span data-test-id={\`Test.Another|\`} className=\\"views-block\\">
        inside custom
      </span>
      {props.children}
    </Custom>
  );
};

export default Test;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom TestIds 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class TestIds extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'TestIds',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'TestIds',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
        className=\\"views-block\\"
      >
        <span data-test-id={\`TestIds.Text|\`} className=\\"views-block\\">
          1
        </span>
        <span data-test-id={\`TestIds.Text:1|\`} className=\\"views-block\\">
          2
        </span>
        <External data-test-id={\`TestIds.External|\`} className=\\"views-block\\" />
        <span data-test-id={\`TestIds.Name|\`} className=\\"views-block\\">
          name
        </span>
        {props.children}
      </div>
    );
  }
}
TestIds.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default TestIds;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom TestIds: react-dom parses react-dom TestIds debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const TestIds = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`TestIds.Text|\`} className=\\"views-block\\">
        1
      </span>
      <span data-test-id={\`TestIds.Text:1|\`} className=\\"views-block\\">
        2
      </span>
      <External data-test-id={\`TestIds.External|\`} className=\\"views-block\\" />
      <span data-test-id={\`TestIds.Name|\`} className=\\"views-block\\">
        name
      </span>
      {props.children}
    </div>
  );
};

export default TestIds;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom TextInterpolation 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class TextInterpolation extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'TextInterpolation',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'TextInterpolation',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        className=\\"views-block\\"
      >
        <span
          data-test-id={\`TextInterpolation.Text|\`}
          className=\\"views-block\\"
        >{\`\${props.name} test\`}</span>
        {props.children}
      </div>
    );
  }
}
TextInterpolation.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default TextInterpolation;
",
  "fonts": Array [],
  "props": Object {
    "name": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom TextInterpolation: react-dom parses react-dom TextInterpolation debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const TextInterpolation = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <span
        data-test-id={\`TextInterpolation.Text|\`}
        className=\\"views-block\\"
      >{\`\${props.name} test\`}</span>
      {props.children}
    </div>
  );
};

export default TextInterpolation;
",
  "fonts": Array [],
  "props": Object {
    "name": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Toggle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class Toggle extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Toggle',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'Toggle',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <span
        data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
        className=\\"views-block\\"
      >
        NOPE
      </span>
    );
  }
}
Toggle.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Toggle;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Toggle: react-dom parses react-dom Toggle debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const Toggle = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
      className=\\"views-block\\"
    >
      NOPE
    </span>
  );
};

export default Toggle;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureEmail 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Email_h1by7qdg = css({
  border: '1px solid black',
  color: 'red',
  '&:focus, &.focus': {
    color: 'purple',
  },
  '&:placeholder, &.placeholder': {
    color: 'blue',
  },
});

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureEmail',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureEmail',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <input
        type=\\"email\\"
        onChange={event => this.setState({ email: event.target.value })}
        value={state.email}
        data-test-id={\`\${props['data-test-id'] || 'Email'}|\`}
        autoFocus={true}
        defaultValue=\\"hey this is a default value\\"
        onSubmit={props.onSubmit}
        className={\`views-block \${Email_h1by7qdg}\`}
      />
    );
  }
}
UseCaptureEmail.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureEmail;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureEmail: react-dom parses react-dom UseCaptureEmail debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Email_h1by7qdg = css({
  border: '1px solid black',
  color: 'red',
  '&:focus, &.focus': {
    color: 'purple',
  },
  '&:placeholder, &.placeholder': {
    color: 'blue',
  },
});

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"email\\"
        onChange={event => this.setState({ email: event.target.value })}
        value={state.email}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'Email'}|\`}
        defaultValue=\\"hey this is a default value\\"
        onSubmit={props.onSubmit}
        className={\`views-block mousetrap \${Email_h1by7qdg}\`}
      />
    );
  }
}

export default UseCaptureEmail;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureFile 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureFile',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureFile',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <input
        onChange={event => this.setState({ file: event.target.value })}
        value={state.file}
        data-test-id={\`\${props['data-test-id'] || 'File'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}
UseCaptureFile.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureFile;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureFile: react-dom parses react-dom UseCaptureFile debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        onChange={event => this.setState({ file: event.target.value })}
        value={state.file}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'File'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureFile;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureNumber 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureNumber',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureNumber',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <input
        type=\\"number\\"
        onChange={event => this.setState({ number: event.target.value })}
        value={state.number}
        data-test-id={\`\${props['data-test-id'] || 'Number'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}
UseCaptureNumber.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureNumber;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureNumber: react-dom parses react-dom UseCaptureNumber debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"number\\"
        onChange={event => this.setState({ number: event.target.value })}
        value={state.number}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'Number'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureNumber;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCapturePhone 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCapturePhone',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCapturePhone',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <input
        type=\\"tel\\"
        onChange={event => this.setState({ phone: event.target.value })}
        value={state.phone}
        data-test-id={\`\${props['data-test-id'] || 'Phone'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}
UseCapturePhone.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCapturePhone;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCapturePhone: react-dom parses react-dom UseCapturePhone debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"tel\\"
        onChange={event => this.setState({ phone: event.target.value })}
        value={state.phone}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'Phone'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCapturePhone;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureSecure 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureSecure',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureSecure',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <input
        type=\\"password\\"
        onChange={event => this.setState({ secure: event.target.value })}
        value={state.secure}
        data-test-id={\`\${props['data-test-id'] || 'Secure'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}
UseCaptureSecure.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureSecure;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureSecure: react-dom parses react-dom UseCaptureSecure debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"password\\"
        onChange={event => this.setState({ secure: event.target.value })}
        value={state.secure}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'Secure'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureSecure;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureText',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <input
        type=\\"text\\"
        onChange={event => this.setState({ text: event.target.value })}
        value={state.text}
        data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}
UseCaptureText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureText: react-dom parses react-dom UseCaptureText debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        onChange={event => this.setState({ text: event.target.value })}
        value={state.text}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextArea 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureTextArea',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureTextArea',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <textarea
        onChange={event =>
          this.setState({ captureTextArea: event.target.value })
        }
        value={state.captureTextArea}
        data-test-id={\`\${props['data-test-id'] || 'CaptureTextArea'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}
UseCaptureTextArea.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureTextArea;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextArea: react-dom parses react-dom UseCaptureTextArea debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <textarea
        onChange={event =>
          this.setState({ captureTextArea: event.target.value })
        }
        value={state.captureTextArea}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'CaptureTextArea'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureTextArea;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextManagedFromOutside 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureTextManagedFromOutside',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseCaptureTextManagedFromOutside',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <input
        type=\\"text\\"
        data-test-id={\`\${props['data-test-id'] || 'CaptureText'}|\`}
        value={props.external}
        className=\\"views-block\\"
      />
    );
  }
}
UseCaptureTextManagedFromOutside.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureTextManagedFromOutside;
",
  "fonts": Array [],
  "props": Object {
    "external": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextManagedFromOutside: react-dom parses react-dom UseCaptureTextManagedFromOutside debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        data-test-id={\`\${props['data-test-id'] || 'CaptureText'}|\`}
        value={props.external}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureTextManagedFromOutside;
",
  "fonts": Array [],
  "props": Object {
    "external": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseHorizontal 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Horizontal_hud64j7 = css({
  flexDirection: 'row',
  border: '1px solid red',
});

class UseHorizontal extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseHorizontal',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseHorizontal',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
        className={\`views-block \${Horizontal_hud64j7}\`}
      >
        {props.children}
      </div>
    );
  }
}
UseHorizontal.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseHorizontal;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseHorizontal: react-dom parses react-dom UseHorizontal debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_hud64j7 = css({
  flexDirection: 'row',
  border: '1px solid red',
});

const UseHorizontal = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
      className={\`views-block \${Horizontal_hud64j7}\`}
    >
      {props.children}
    </div>
  );
};

export default UseHorizontal;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class UseImage extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseImage',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseImage',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <img
        data-test-id={\`\${props['data-test-id'] || 'Image'}|\${
          props.another ? 'another' : ''
        }\`}
        src={
          props.another
            ? 'https://views.tools/hi.jpg'
            : 'https://views.tools/rocks.jpg'
        }
        className=\\"views-block\\"
      />
    );
  }
}
UseImage.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseImage;
",
  "fonts": Array [],
  "props": Object {
    "another": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseImage: react-dom parses react-dom UseImage debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const UseImage = props => {
  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'Image'}|\${
        props.another ? 'another' : ''
      }\`}
      src={
        props.another
          ? 'https://views.tools/hi.jpg'
          : 'https://views.tools/rocks.jpg'
      }
      className=\\"views-block\\"
    />
  );
};

export default UseImage;
",
  "fonts": Array [],
  "props": Object {
    "another": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseOfProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const App_h1qq1i2q = css({ flexDirection: 'row' });

class UseOfProxy extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseOfProxy',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseOfProxy',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
        className={\`views-block \${App_h1qq1i2q}\`}
      >
        <Button
          data-test-id={\`UseOfProxy.Button|\`}
          color=\\"red\\"
          icon=\\"MyIcon\\"
          text=\\"I'm a button!\\"
          className=\\"views-block\\"
        />
        {props.children}
      </div>
    );
  }
}
UseOfProxy.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseOfProxy;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseOfProxy: react-dom parses react-dom UseOfProxy debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const App_h1qq1i2q = css({ flexDirection: 'row' });

const UseOfProxy = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className={\`views-block \${App_h1qq1i2q}\`}
    >
      <Button
        data-test-id={\`UseOfProxy.Button|\`}
        color=\\"red\\"
        icon=\\"MyIcon\\"
        text=\\"I'm a button!\\"
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default UseOfProxy;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Button_h1qq1i2q = css({ flexDirection: 'row' });

class UseProxy extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseProxy',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseProxy',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;
    const childrenArray = React.Children.toArray(props.children);
    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Button'}|\`}
        className={\`views-block \${Button_h1qq1i2q}\`}
      >
        {props.childrenProxyMap &&
        childrenArray[props.childrenProxyMap['props.icon']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['props.icon']],
              { fill: 'red' }
            )
          : null}
        <span data-test-id={\`UseProxy.Text|\`} className=\\"views-block\\">
          {props.text}
        </span>
      </div>
    );
  }
}
UseProxy.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseProxy;
",
  "fonts": Array [],
  "props": Object {
    "icon": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseProxy: react-dom parses react-dom UseProxy debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Button_h1qq1i2q = css({ flexDirection: 'row' });

const UseProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Button'}|\`}
      className={\`views-block \${Button_h1qq1i2q}\`}
    >
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'red' }
          )
        : null}
      <span data-test-id={\`UseProxy.Text|\`} className=\\"views-block\\">
        {props.text}
      </span>
    </div>
  );
};

export default UseProxy;
",
  "fonts": Array [],
  "props": Object {
    "icon": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseRouter 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-dom';
import { BrowserRouter as Router } from 'react-router-dom';
import Topics from './Topics.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

class UseRouter extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseRouter',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseRouter',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Router>
        <div
          data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
          className={\`views-block \${Horizontal_h1qq1i2q}\`}
        >
          <Route
            path=\\"/\\"
            exact
            render={routeProps => (
              <Home
                data-test-id={\`UseRouter.Home|\`}
                height={props.height}
                width={360}
                {...routeProps}
                className=\\"views-block\\"
              />
            )}
          />
          <Route
            path=\\"/about\\"
            render={routeProps => (
              <About
                data-test-id={\`UseRouter.About|\`}
                {...routeProps}
                className=\\"views-block\\"
              />
            )}
          />
          <Route
            path=\\"/topics\\"
            render={routeProps => (
              <Topics
                data-test-id={\`UseRouter.Topics|\`}
                {...routeProps}
                className=\\"views-block\\"
              />
            )}
          />
          {props.children}
        </div>
      </Router>
    );
  }
}
UseRouter.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseRouter;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseRouter: react-dom parses react-dom UseRouter debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-dom';
import { BrowserRouter as Router } from 'react-router-dom';
import Topics from './Topics.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

const UseRouter = props => {
  return (
    <Router>
      <div
        data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
        className={\`views-block \${Horizontal_h1qq1i2q}\`}
      >
        <Route
          path=\\"/\\"
          exact
          render={routeProps => (
            <Home
              data-test-id={\`UseRouter.Home|\`}
              height={props.height}
              width={360}
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        <Route
          path=\\"/about\\"
          render={routeProps => (
            <About
              data-test-id={\`UseRouter.About|\`}
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        <Route
          path=\\"/topics\\"
          render={routeProps => (
            <Topics
              data-test-id={\`UseRouter.Topics|\`}
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        {props.children}
      </div>
    </Router>
  );
};

export default UseRouter;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Svg_hq411mi = css({
  height: 20,
  width: 20,
});

class UseSvg extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseSvg',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseSvg',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <svg
        data-test-id={\`\${props['data-test-id'] || 'Svg'}|\`}
        viewBox=\\"0 0 20 20\\"
        className={\`views-block \${Svg_hq411mi}\`}
      >
        <path
          data-test-id={\`UseSvg.SvgPath|\`}
          d=\\"0 20\\"
          fill=\\"red\\"
          className=\\"views-block\\"
        />
        <circle
          data-test-id={\`UseSvg.SvgCircle|\`}
          cx={10}
          cy={5}
          r={5}
          className=\\"views-block\\"
        />
        <g
          data-test-id={\`UseSvg.SvgGroup|\`}
          transform=\\"translate(6.000000, 5.000000)\\"
          className=\\"views-block\\"
        >
          <path
            data-test-id={\`UseSvg.SvgPath:1|\`}
            d={1}
            className=\\"views-block\\"
          />
          <path
            data-test-id={\`UseSvg.SvgPath:2|\`}
            d={2}
            className=\\"views-block\\"
          />
        </g>
        <text
          data-test-id={\`UseSvg.SvgText|\`}
          text=\\"hey\\"
          className=\\"views-block\\"
        />
        {props.children}
      </svg>
    );
  }
}
UseSvg.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseSvg;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseSvg: react-dom parses react-dom UseSvg debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Svg_hq411mi = css({
  height: 20,
  width: 20,
});

const UseSvg = props => {
  return (
    <svg
      data-test-id={\`\${props['data-test-id'] || 'Svg'}|\`}
      viewBox=\\"0 0 20 20\\"
      className={\`views-block \${Svg_hq411mi}\`}
    >
      <path
        data-test-id={\`UseSvg.SvgPath|\`}
        d=\\"0 20\\"
        fill=\\"red\\"
        className=\\"views-block\\"
      />
      <circle
        data-test-id={\`UseSvg.SvgCircle|\`}
        cx={10}
        cy={5}
        r={5}
        className=\\"views-block\\"
      />
      <g
        data-test-id={\`UseSvg.SvgGroup|\`}
        transform=\\"translate(6.000000, 5.000000)\\"
        className=\\"views-block\\"
      >
        <path
          data-test-id={\`UseSvg.SvgPath:1|\`}
          d={1}
          className=\\"views-block\\"
        />
        <path
          data-test-id={\`UseSvg.SvgPath:2|\`}
          d={2}
          className=\\"views-block\\"
        />
      </g>
      <text
        data-test-id={\`UseSvg.SvgText|\`}
        text=\\"hey\\"
        className=\\"views-block\\"
      />
      {props.children}
    </svg>
  );
};

export default UseSvg;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import './Fonts/Montserrat-300';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const UseText_hjam8jb = css({
  color: 'blue',
  fontFamily: 'Montserrat, sans-serif',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 300,
});

class UseText extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseText',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <span
        data-test-id={\`\${props['data-test-id'] || 'UseText'}|\`}
        className={\`views-block \${UseText_hjam8jb}\`}
      >
        Hi, I'm some text
      </span>
    );
  }
}
UseText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseText;
",
  "fonts": Array [
    Object {
      "family": "Montserrat",
      "id": "Montserrat-300",
      "style": "normal",
      "weight": "300",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseText: react-dom parses react-dom UseText debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import './Fonts/Montserrat-300';
import { css } from 'react-emotion';

const UseText_hjam8jb = css({
  color: 'blue',
  fontFamily: 'Montserrat, sans-serif',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 300,
});

const UseText = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'UseText'}|\`}
      className={\`views-block \${UseText_hjam8jb}\`}
    >
      Hi, I'm some text
    </span>
  );
};

export default UseText;
",
  "fonts": Array [
    Object {
      "family": "Montserrat",
      "id": "Montserrat-300",
      "style": "normal",
      "weight": "300",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseTextCustomFont 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import './Fonts/CustomFontNotOnGoogle-300';
import './Fonts/CustomFontNotOnGoogle-400-italic';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Normal_h4qeg9p = css({
  color: 'blue',
  fontFamily: 'CustomFontNotOnGoogle, sans-serif',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 300,
});
const Italic_hw8flfq = css({
  color: 'blue',
  fontFamily: 'CustomFontNotOnGoogle, sans-serif',
  fontStyle: 'italic',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 400,
});

class UseTextCustomFont extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseTextCustomFont',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseTextCustomFont',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'UseTextCustomFont'}|\`}
        className=\\"views-block\\"
      >
        <span
          data-test-id={\`UseTextCustomFont.Normal|\`}
          className={\`views-block \${Normal_h4qeg9p}\`}
        >
          Hi, I'm some text
        </span>
        <span
          data-test-id={\`UseTextCustomFont.Italic|\`}
          className={\`views-block \${Italic_hw8flfq}\`}
        >
          Hi, I'm some text
        </span>
        {props.children}
      </div>
    );
  }
}
UseTextCustomFont.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseTextCustomFont;
",
  "fonts": Array [
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-300",
      "style": "normal",
      "weight": "300",
    },
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-400-italic",
      "style": "italic",
      "weight": "400",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseTextCustomFont: react-dom parses react-dom UseTextCustomFont debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import './Fonts/CustomFontNotOnGoogle-300';
import './Fonts/CustomFontNotOnGoogle-400-italic';
import { css } from 'react-emotion';

const Normal_h4qeg9p = css({
  color: 'blue',
  fontFamily: 'CustomFontNotOnGoogle, sans-serif',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 300,
});
const Italic_hw8flfq = css({
  color: 'blue',
  fontFamily: 'CustomFontNotOnGoogle, sans-serif',
  fontStyle: 'italic',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 400,
});

const UseTextCustomFont = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'UseTextCustomFont'}|\`}
      className=\\"views-block\\"
    >
      <span
        data-test-id={\`UseTextCustomFont.Normal|\`}
        className={\`views-block \${Normal_h4qeg9p}\`}
      >
        Hi, I'm some text
      </span>
      <span
        data-test-id={\`UseTextCustomFont.Italic|\`}
        className={\`views-block \${Italic_hw8flfq}\`}
      >
        Hi, I'm some text
      </span>
      {props.children}
    </div>
  );
};

export default UseTextCustomFont;
",
  "fonts": Array [
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-300",
      "style": "normal",
      "weight": "300",
    },
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-400-italic",
      "style": "italic",
      "weight": "400",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseVertical 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const Vertical_h1cyenk5 = css({ backgroundColor: 'red' });

class UseVertical extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseVertical',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'UseVertical',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        className={\`views-block \${Vertical_h1cyenk5}\`}
      >
        {props.children}
      </div>
    );
  }
}
UseVertical.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseVertical;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseVertical: react-dom parses react-dom UseVertical debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h1cyenk5 = css({ backgroundColor: 'red' });

const UseVertical = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${Vertical_h1cyenk5}\`}
    >
      {props.children}
    </div>
  );
};

export default UseVertical;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ViewNameIsntUsedInStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';
import PropTypes from 'prop-types';

const ViewNameIsntUsedInStyle1 = styled('div')({ zIndex: 5 }, ({ props }) => ({
  opacity: props.opacity,
}));

class ViewNameIsntUsedInStyle extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ViewNameIsntUsedInStyle',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'ViewNameIsntUsedInStyle',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <ViewNameIsntUsedInStyle1
        data-test-id={\`\${props['data-test-id'] || 'ViewNameIsntUsedInStyle'}|\`}
        props={props}
        className=\\"views-block\\"
      >
        {props.children}
      </ViewNameIsntUsedInStyle1>
    );
  }
}
ViewNameIsntUsedInStyle.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ViewNameIsntUsedInStyle;
",
  "fonts": Array [],
  "props": Object {
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ViewNameIsntUsedInStyle: react-dom parses react-dom ViewNameIsntUsedInStyle debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const ViewNameIsntUsedInStyle1 = styled('div')({ zIndex: 5 }, ({ props }) => ({
  opacity: props.opacity,
}));

const ViewNameIsntUsedInStyle = props => {
  return (
    <ViewNameIsntUsedInStyle1
      data-test-id={\`\${props['data-test-id'] || 'ViewNameIsntUsedInStyle'}|\`}
      props={props}
      className=\\"views-block\\"
    >
      {props.children}
    </ViewNameIsntUsedInStyle1>
  );
};

export default ViewNameIsntUsedInStyle;
",
  "fonts": Array [],
  "props": Object {
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom When 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';
import PropTypes from 'prop-types';

const App_h1qq1i2q = css({ flexDirection: 'row' });

class When extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'When',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'When',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <div
        data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
        className={\`views-block \${App_h1qq1i2q}\`}
      >
        {props.showMe ? (
          <span data-test-id={\`When.Text|\`} className=\\"views-block\\">
            I may be hidden
          </span>
        ) : null}
        {props.children}
      </div>
    );
  }
}
When.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default When;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom When: react-dom parses react-dom When debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const App_h1qq1i2q = css({ flexDirection: 'row' });

const When = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className={\`views-block \${App_h1qq1i2q}\`}
    >
      {props.showMe ? (
        <span data-test-id={\`When.Text|\`} className=\\"views-block\\">
          I may be hidden
        </span>
      ) : null}
      {props.children}
    </div>
  );
};

export default When;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom WhenTopLevel 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class WhenTopLevel extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'WhenTopLevel',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'WhenTopLevel',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return props.showMe ? (
      <span
        data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
        className=\\"views-block\\"
      >
        I may be hidden
      </span>
    ) : null;
  }
}
WhenTopLevel.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default WhenTopLevel;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom WhenTopLevel: react-dom parses react-dom WhenTopLevel debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const WhenTopLevel = props => {
  return props.showMe ? (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
      className=\\"views-block\\"
    >
      I may be hidden
    </span>
  ) : null;
};

export default WhenTopLevel;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom WithTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import PropTypes from 'prop-types';

class WithTest extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['data-test-id'] || 'WithTest',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['data-test-id'] || 'WithTest',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <button
        data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
        onClick={event => {
          context.track({
            block: props['data-test-id'] || 'WithTest',
            action: 'click',
          });
          props.change(event);
        }}
        className=\\"views-block\\"
      >
        <span data-test-id={\`WithTest.Text|\`} className=\\"views-block\\">
          {props.text}
        </span>
        {props.children}
      </button>
    );
  }
}
WithTest.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default WithTest;
",
  "fonts": Array [],
  "props": Object {
    "change": "function",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom WithTest: react-dom parses react-dom WithTest debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const WithTest = props => {
  return (
    <button
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      onClick={props.change}
      className=\\"views-block\\"
    >
      <span data-test-id={\`WithTest.Text|\`} className=\\"views-block\\">
        {props.text}
      </span>
      {props.children}
    </button>
  );
};

export default WithTest;
",
  "fonts": Array [],
  "props": Object {
    "change": "function",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Action 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SubButton from './SubButton.view.js';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ h1g2xbng: { color: 'red' } });

class Action extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Action',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Action',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return props.check ? (
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={event => {
          context.track({
            block: props['testID'] || 'Action',
            action: 'click',
          });
          props.clickMe(event);
        }}
        disabled={props.isDisabled}
        underlayColor=\\"transparent\\"
      >
        <View
          testID={\`\${props['testID'] || 'Vertical'}|\`}
          style={styles.h1g2xbng}
        >
          <Text testID={\`Action.Text|\`}>click me</Text>
          <SubButton testID={\`Action.SubButton|\`} isDisabled={true} />
          {props.children}
        </View>
      </TouchableWithoutFeedback>
    ) : null;
  }
}
Action.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Action;
",
  "fonts": Array [],
  "props": Object {
    "check": "string",
    "clickMe": "function",
    "isDisabled": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Action 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SubButton from './SubButton.view.js';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ h1g2xbng: { color: 'red' } });

class Action extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Action',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Action',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return props.check ? (
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={event => {
          context.track({
            block: props['testID'] || 'Action',
            action: 'click',
          });
          props.clickMe(event);
        }}
        disabled={props.isDisabled}
        underlayColor=\\"transparent\\"
      >
        <View
          testID={\`\${props['testID'] || 'Vertical'}|\`}
          style={styles.h1g2xbng}
        >
          <Text testID={\`Action.Text|\`}>click me</Text>
          <SubButton testID={\`Action.SubButton|\`} isDisabled={true} />
          {props.children}
        </View>
      </TouchableWithoutFeedback>
    ) : null;
  }
}
Action.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Action;
",
  "fonts": Array [],
  "props": Object {
    "check": "string",
    "clickMe": "function",
    "isDisabled": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native AnimatedButton 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, Text, TouchableWithoutFeedback } from 'react-native';
import PropTypes from 'prop-types';

class AnimatedButton extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'AnimatedButton',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'AnimatedButton',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={event => {
          context.track({
            block: props['testID'] || 'AnimatedButton',
            action: 'click',
          });
          props.onClick(event);
        }}
        underlayColor=\\"transparent\\"
      >
        <Animated.View
          testID={\`\${props['testID'] || 'Vertical'}|\`}
          style={{ opacity: props.opacity }}
        >
          <Text testID={\`AnimatedButton.Text|\`}>hey</Text>
          {props.children}
        </Animated.View>
      </TouchableWithoutFeedback>
    );
  }
}
AnimatedButton.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default AnimatedButton;
",
  "fonts": Array [],
  "props": Object {
    "onClick": "function",
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native AnimatedButton 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, Text, TouchableWithoutFeedback } from 'react-native';
import PropTypes from 'prop-types';

class AnimatedButton extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'AnimatedButton',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'AnimatedButton',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={event => {
          context.track({
            block: props['testID'] || 'AnimatedButton',
            action: 'click',
          });
          props.onClick(event);
        }}
        underlayColor=\\"transparent\\"
      >
        <Animated.View
          testID={\`\${props['testID'] || 'Vertical'}|\`}
          style={{ opacity: props.opacity }}
        >
          <Text testID={\`AnimatedButton.Text|\`}>hey</Text>
          {props.children}
        </Animated.View>
      </TouchableWithoutFeedback>
    );
  }
}
AnimatedButton.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default AnimatedButton;
",
  "fonts": Array [],
  "props": Object {
    "onClick": "function",
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native AppRegionDrag 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  hfuuuuw: { width: '92%', marginTop: 'auto' },
});

class AppRegionDrag extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'AppRegionDrag',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'AppRegionDrag',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`} style={styles.hfuuuuw}>
        {props.children}
      </View>
    );
  }
}
AppRegionDrag.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default AppRegionDrag;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native AppRegionDrag 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  hfuuuuw: { width: '92%', marginTop: 'auto' },
});

class AppRegionDrag extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'AppRegionDrag',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'AppRegionDrag',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`} style={styles.hfuuuuw}>
        {props.children}
      </View>
    );
  }
}
AppRegionDrag.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default AppRegionDrag;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native BackgroundImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, Image, StyleSheet } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class BackgroundImage extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'BackgroundImage',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'BackgroundImage',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Image
        resizeMode=\\"cover\\"
        source={{ uri: 'https://viewsdx.com/image.jpg' }}
        testID={\`\${props['testID'] || 'Vertical'}|\`}
      >
        <Animated.Image
          resizeMode={undefined}
          source={{ uri: props.backgroundImage }}
          testID={\`BackgroundImage.Horizontal|\`}
          style={styles.hp2cr4d}
        />
        {props.children}
      </Image>
    );
  }
}
BackgroundImage.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default BackgroundImage;
",
  "fonts": Array [],
  "props": Object {
    "backgroundImage": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native BackgroundImage 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, Image, StyleSheet } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class BackgroundImage extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'BackgroundImage',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'BackgroundImage',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Image
        resizeMode=\\"cover\\"
        source={{ uri: 'https://viewsdx.com/image.jpg' }}
        testID={\`\${props['testID'] || 'Vertical'}|\`}
      >
        <Animated.Image
          resizeMode={undefined}
          source={{ uri: props.backgroundImage }}
          testID={\`BackgroundImage.Horizontal|\`}
          style={styles.hp2cr4d}
        />
        {props.children}
      </Image>
    );
  }
}
BackgroundImage.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default BackgroundImage;
",
  "fonts": Array [],
  "props": Object {
    "backgroundImage": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native BlockThatUsesViewAndBothHaveScopes 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Scope from './Scope.view.js';
import PropTypes from 'prop-types';

class BlockThatUsesViewAndBothHaveScopes extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'BlockThatUsesViewAndBothHaveScopes',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'BlockThatUsesViewAndBothHaveScopes',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Scope
        testID={\`\${props['testID'] || 'BlockThatUsesViewAndBothHaveScopes'}|\${
          props.isBlack ? 'isBlack' : ''
        }\`}
      >
        {props.children}
      </Scope>
    );
  }
}
BlockThatUsesViewAndBothHaveScopes.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default BlockThatUsesViewAndBothHaveScopes;
",
  "fonts": Array [],
  "props": Object {
    "isBlack": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native BoxShadow 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  hvzqnyi: {
    elevation: 1,
    shadowOffset: { width: 0, height: 8 },
    shadowRadius: 15,
    shadowOpacity: 1,
    shadowColor: 'rgba(0, 0, 0, 0.1)',
  },
});

class BoxShadow extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'BoxShadow',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'BoxShadow',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Animated.View
        testID={\`\${props['testID'] || 'Vertical'}|\`}
        style={{
          elevation: 1,
          shadowOffset: { width: 10, height: 5 },
          shadowRadius: 2,
          shadowOpacity: 1,
          shadowColor: props.color,
        }}
      >
        <Animated.View
          testID={\`BoxShadow.Vertical:1|\`}
          style={{
            elevation: 1,
            shadowOffset: { width: 10, height: 5 },
            shadowRadius: 10,
            shadowOpacity: 1,
            shadowColor: props.color,
          }}
        >
          <View testID={\`BoxShadow.Vertical:2|\`} style={styles.hvzqnyi} />
        </Animated.View>
        {props.children}
      </Animated.View>
    );
  }
}
BoxShadow.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default BoxShadow;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native BoxShadow 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  hvzqnyi: {
    elevation: 1,
    shadowOffset: { width: 0, height: 8 },
    shadowRadius: 15,
    shadowOpacity: 1,
    shadowColor: 'rgba(0, 0, 0, 0.1)',
  },
});

class BoxShadow extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'BoxShadow',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'BoxShadow',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Animated.View
        testID={\`\${props['testID'] || 'Vertical'}|\`}
        style={{
          elevation: 1,
          shadowOffset: { width: 10, height: 5 },
          shadowRadius: 2,
          shadowOpacity: 1,
          shadowColor: props.color,
        }}
      >
        <Animated.View
          testID={\`BoxShadow.Vertical:1|\`}
          style={{
            elevation: 1,
            shadowOffset: { width: 10, height: 5 },
            shadowRadius: 10,
            shadowOpacity: 1,
            shadowColor: props.color,
          }}
        >
          <View testID={\`BoxShadow.Vertical:2|\`} style={styles.hvzqnyi} />
        </Animated.View>
        {props.children}
      </Animated.View>
    );
  }
}
BoxShadow.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default BoxShadow;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ClassName 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hkg1xou: { backgroundColor: 'blue' } });

class ClassName extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ClassName',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ClassName',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`} style={styles.hkg1xou}>
        {props.children}
      </View>
    );
  }
}
ClassName.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ClassName;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ClassName 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hkg1xou: { backgroundColor: 'blue' } });

class ClassName extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ClassName',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ClassName',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`} style={styles.hkg1xou}>
        {props.children}
      </View>
    );
  }
}
ClassName.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ClassName;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Code 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ h1jcb2fl: { backgroundColor: 'red' } });

class Code extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Code',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Code',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View
        testID={\`\${props['testID'] || 'Vertical'}|\`}
        ref={$e => (this.$e = $e)}
        style={styles.h1jcb2fl}
      >
        <Animated.Text
          testID={\`Code.Text|\`}
          innerRef={props.refText}
          style={{ color: props.color }}
        >
          {props.text}
        </Animated.Text>
        {props.children}
      </View>
    );
  }
}
Code.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Code;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
    "refText": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Code 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ h1jcb2fl: { backgroundColor: 'red' } });

class Code extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Code',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Code',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View
        testID={\`\${props['testID'] || 'Vertical'}|\`}
        ref={$e => (this.$e = $e)}
        style={styles.h1jcb2fl}
      >
        <Animated.Text
          testID={\`Code.Text|\`}
          innerRef={props.refText}
          style={{ color: props.color }}
        >
          {props.text}
        </Animated.Text>
        {props.children}
      </View>
    );
  }
}
Code.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Code;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
    "refText": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ComplexScope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Scope from './Scope.view.js';
import PropTypes from 'prop-types';

class ComplexScope extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ComplexScope',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ComplexScope',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Scope
        testID={\`\${props['testID'] || 'ComplexScope'}|\${
          props.isBlack ? 'isBlack' : ''
        }\`}
      >
        {props.children}
      </Scope>
    );
  }
}
ComplexScope.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ComplexScope;
",
  "fonts": Array [],
  "props": Object {
    "isBlack": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ComplexScope 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Scope from './Scope.view.js';
import PropTypes from 'prop-types';

class ComplexScope extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ComplexScope',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ComplexScope',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Scope
        testID={\`\${props['testID'] || 'ComplexScope'}|\${
          props.isBlack ? 'isBlack' : ''
        }\`}
      >
        {props.children}
      </Scope>
    );
  }
}
ComplexScope.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ComplexScope;
",
  "fonts": Array [],
  "props": Object {
    "isBlack": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native DynamicStylesApplyToBasicBlocksOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import { Animated } from 'react-native';
import PropTypes from 'prop-types';

class DynamicStylesApplyToBasicBlocksOnly extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'DynamicStylesApplyToBasicBlocksOnly',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'DynamicStylesApplyToBasicBlocksOnly',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Animated.View
        testID={\`\${props['testID'] || 'Vertical'}|\`}
        style={{ height: props.height }}
      >
        <SomeThing
          testID={\`DynamicStylesApplyToBasicBlocksOnly.OnTop|\`}
          height={props.height}
        />
        {props.children}
      </Animated.View>
    );
  }
}
DynamicStylesApplyToBasicBlocksOnly.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native DynamicStylesApplyToBasicBlocksOnly 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import { Animated } from 'react-native';
import PropTypes from 'prop-types';

class DynamicStylesApplyToBasicBlocksOnly extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'DynamicStylesApplyToBasicBlocksOnly',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'DynamicStylesApplyToBasicBlocksOnly',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Animated.View
        testID={\`\${props['testID'] || 'Vertical'}|\`}
        style={{ height: props.height }}
      >
        <SomeThing
          testID={\`DynamicStylesApplyToBasicBlocksOnly.OnTop|\`}
          height={props.height}
        />
        {props.children}
      </Animated.View>
    );
  }
}
DynamicStylesApplyToBasicBlocksOnly.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native EmptyText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class EmptyText extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'EmptyText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'EmptyText',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return <Text testID={\`\${props['testID'] || 'EmptyText'}|\`} />;
  }
}
EmptyText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default EmptyText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native EmptyText 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class EmptyText extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'EmptyText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'EmptyText',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return <Text testID={\`\${props['testID'] || 'EmptyText'}|\`} />;
  }
}
EmptyText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default EmptyText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Form 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TextInput, TouchableWithoutFeedback, View } from 'react-native';
import PropTypes from 'prop-types';

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Form',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Form',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <View testID={\`\${props['testID'] || 'Form'}|\`}>
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Surname ? () => this.$Surname.focus() : null}
          returnKeyType={this.$Surname ? 'next' : 'go'}
          onChangeText={name => this.setState({ name })}
          ref={$e => (this.$name = $e)}
          value={state.name}
          keyboardType=\\"default\\"
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Name|\`}
          autoFocus={true}
        />
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Password ? () => this.$Password.focus() : null}
          returnKeyType={this.$Password ? 'next' : 'go'}
          onChangeText={surname => this.setState({ surname })}
          ref={$e => (this.$surname = $e)}
          value={state.surname}
          keyboardType=\\"default\\"
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Surname|\`}
        />
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Email ? () => this.$Email.focus() : null}
          returnKeyType={this.$Email ? 'next' : 'go'}
          onChangeText={password => this.setState({ password })}
          ref={$e => (this.$password = $e)}
          value={state.password}
          secureTextEntry
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Password|\`}
        />
        <TextInput
          returnKeyType=\\"done\\"
          onChangeText={email => this.setState({ email })}
          ref={$e => (this.$email = $e)}
          value={state.email}
          keyboardType=\\"email-address\\"
          autoCorrect={false}
          defaultValue={undefined}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Email|\`}
          defaultValue=\\"morph@viewsdx.com\\"
        />
        <TouchableWithoutFeedback
          activeOpacity={0.7}
          onPress={event => {
            context.track({
              block: props['testID'] || 'Form',
              action: 'click',
            });
            (() => props.onSubmit(state))(event);
          }}
          underlayColor=\\"transparent\\"
        >
          <View testID={\`Form.Button|\`}>
            <Text testID={\`Form.Text|\`}>Send!</Text>
          </View>
        </TouchableWithoutFeedback>
        {props.children}
      </View>
    );
  }
}
Form.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Form;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Form 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TextInput, TouchableWithoutFeedback, View } from 'react-native';
import PropTypes from 'prop-types';

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Form',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Form',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <View testID={\`\${props['testID'] || 'Form'}|\`}>
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Surname ? () => this.$Surname.focus() : null}
          returnKeyType={this.$Surname ? 'next' : 'go'}
          onChangeText={name => this.setState({ name })}
          ref={$e => (this.$name = $e)}
          value={state.name}
          keyboardType=\\"default\\"
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Name|\`}
          autoFocus={true}
        />
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Password ? () => this.$Password.focus() : null}
          returnKeyType={this.$Password ? 'next' : 'go'}
          onChangeText={surname => this.setState({ surname })}
          ref={$e => (this.$surname = $e)}
          value={state.surname}
          keyboardType=\\"default\\"
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Surname|\`}
        />
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Email ? () => this.$Email.focus() : null}
          returnKeyType={this.$Email ? 'next' : 'go'}
          onChangeText={password => this.setState({ password })}
          ref={$e => (this.$password = $e)}
          value={state.password}
          secureTextEntry
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Password|\`}
        />
        <TextInput
          returnKeyType=\\"done\\"
          onChangeText={email => this.setState({ email })}
          ref={$e => (this.$email = $e)}
          value={state.email}
          keyboardType=\\"email-address\\"
          autoCorrect={false}
          defaultValue={undefined}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Email|\`}
          defaultValue=\\"morph@viewsdx.com\\"
        />
        <TouchableWithoutFeedback
          activeOpacity={0.7}
          onPress={event => {
            context.track({
              block: props['testID'] || 'Form',
              action: 'click',
            });
            (() => props.onSubmit(state))(event);
          }}
          underlayColor=\\"transparent\\"
        >
          <View testID={\`Form.Button|\`}>
            <Text testID={\`Form.Text|\`}>Send!</Text>
          </View>
        </TouchableWithoutFeedback>
        {props.children}
      </View>
    );
  }
}
Form.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Form;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native GoTo 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, View } from 'react-native';
import PropTypes from 'prop-types';

class GoTo extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'GoTo',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'GoTo',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
        <Text testID={\`GoTo.Text|\`}>Go to ViewsDX website!</Text>
        {props.children}
      </View>
    );
  }
}
GoTo.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default GoTo;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native GoTo 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, View } from 'react-native';
import PropTypes from 'prop-types';

class GoTo extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'GoTo',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'GoTo',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
        <Text testID={\`GoTo.Text|\`}>Go to ViewsDX website!</Text>
        {props.children}
      </View>
    );
  }
}
GoTo.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default GoTo;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Hover 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, TouchableWithoutFeedback } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hyfo4ef: { color: 'white' } });

class Hover extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Hover',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Hover',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={event => {
          context.track({ block: props['testID'] || 'Hover', action: 'click' });
          props.onClick(event);
        }}
        underlayColor=\\"transparent\\"
      >
        <Animated.View
          testID={\`\${props['testID'] || 'Button'}|\`}
          style={{ backgroundColor: props.backgroundColor }}
        >
          <Animated.Text
            testID={\`Hover.Text|\`}
            style={[styles.hyfo4ef, { fontSize: props.fontSize }]}
          >
            Hey!
          </Animated.Text>
          {props.children}
        </Animated.View>
      </TouchableWithoutFeedback>
    );
  }
}
Hover.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Hover;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColor": "string",
    "backgroundColorHover": "string",
    "fontSize": "number",
    "fontSizeHover": "number",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Hover 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, TouchableWithoutFeedback } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hyfo4ef: { color: 'white' } });

class Hover extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Hover',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Hover',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={event => {
          context.track({ block: props['testID'] || 'Hover', action: 'click' });
          props.onClick(event);
        }}
        underlayColor=\\"transparent\\"
      >
        <Animated.View
          testID={\`\${props['testID'] || 'Button'}|\`}
          style={{ backgroundColor: props.backgroundColor }}
        >
          <Animated.Text
            testID={\`Hover.Text|\`}
            style={[styles.hyfo4ef, { fontSize: props.fontSize }]}
          >
            Hey!
          </Animated.Text>
          {props.children}
        </Animated.View>
      </TouchableWithoutFeedback>
    );
  }
}
Hover.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Hover;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColor": "string",
    "backgroundColorHover": "string",
    "fontSize": "number",
    "fontSizeHover": "number",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native JustText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class JustText extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'JustText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'JustText',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return <Text testID={\`\${props['testID'] || 'Text'}|\`}>hey!</Text>;
  }
}
JustText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default JustText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native JustText 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class JustText extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'JustText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'JustText',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return <Text testID={\`\${props['testID'] || 'Text'}|\`}>hey!</Text>;
  }
}
JustText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default JustText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ListOfSomething 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Something from './Something.view.js';
import { View } from 'react-native';
import PropTypes from 'prop-types';

class ListOfSomething extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ListOfSomething',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ListOfSomething',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'ListOfSomething'}|\`}>
        {Array.isArray(props.from) &&
          props.from.map((item, index) => (
            <Something
              {...item}
              key={item.id || index}
              testID={\`ListOfSomething.Something|\`}
            />
          ))}
        {props.children}
      </View>
    );
  }
}
ListOfSomething.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ListOfSomething;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ListOfSomething 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Something from './Something.view.js';
import { View } from 'react-native';
import PropTypes from 'prop-types';

class ListOfSomething extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ListOfSomething',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ListOfSomething',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'ListOfSomething'}|\`}>
        {Array.isArray(props.from) &&
          props.from.map((item, index) => (
            <Something
              {...item}
              key={item.id || index}
              testID={\`ListOfSomething.Something|\`}
            />
          ))}
        {props.children}
      </View>
    );
  }
}
ListOfSomething.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ListOfSomething;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ListWhen 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Card from './Card.view.js';
import { View } from 'react-native';
import PropTypes from 'prop-types';

class ListWhen extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ListWhen',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ListWhen',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return props.showMe ? (
      <View testID={\`\${props['testID'] || 'List'}|\`}>
        {Array.isArray(props.from) &&
          props.from.map((item, index) => (
            <Card {...item} key={item.id || index} testID={\`ListWhen.Card|\`} />
          ))}
        {props.children}
      </View>
    ) : null;
  }
}
ListWhen.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ListWhen;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ListWhen 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Card from './Card.view.js';
import { View } from 'react-native';
import PropTypes from 'prop-types';

class ListWhen extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ListWhen',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ListWhen',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return props.showMe ? (
      <View testID={\`\${props['testID'] || 'List'}|\`}>
        {Array.isArray(props.from) &&
          props.from.map((item, index) => (
            <Card {...item} key={item.id || index} testID={\`ListWhen.Card|\`} />
          ))}
        {props.children}
      </View>
    ) : null;
  }
}
ListWhen.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ListWhen;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import garfieldPng from './garfield.png';
import chopperJpg from './chopper.jpg';
import { Image } from 'react-native';
import PropTypes from 'prop-types';

class LocalImage extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'LocalImage',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'LocalImage',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Image
        testID={\`\${props['testID'] || 'LocalImage'}|\${
          props.isCat ? 'isCat' : ''
        }\`}
        source={props.isCat ? garfieldPng : chopperJpg}
      />
    );
  }
}
LocalImage.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default LocalImage;
",
  "fonts": Array [],
  "props": Object {
    "isCat": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalImage 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import garfieldPng from './garfield.png';
import chopperJpg from './chopper.jpg';
import { Image } from 'react-native';
import PropTypes from 'prop-types';

class LocalImage extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'LocalImage',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'LocalImage',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Image
        testID={\`\${props['testID'] || 'LocalImage'}|\${
          props.isCat ? 'isCat' : ''
        }\`}
        source={props.isCat ? garfieldPng : chopperJpg}
      />
    );
  }
}
LocalImage.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default LocalImage;
",
  "fonts": Array [],
  "props": Object {
    "isCat": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalImageSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import chopperSvg from './chopper.svg';
import { Image, StyleSheet } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ h1fkj9gt: { width: 50 } });

class LocalImageSvg extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'LocalImageSvg',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'LocalImageSvg',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Image
        testID={\`\${props['testID'] || 'LocalImageSvg'}|\`}
        source={chopperSvg}
        style={[styles.h1fkj9gt, { height: props.height }]}
      />
    );
  }
}
LocalImageSvg.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default LocalImageSvg;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalImageSvg 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import chopperSvg from './chopper.svg';
import { Image, StyleSheet } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ h1fkj9gt: { width: 50 } });

class LocalImageSvg extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'LocalImageSvg',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'LocalImageSvg',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Image
        testID={\`\${props['testID'] || 'LocalImageSvg'}|\`}
        source={chopperSvg}
        style={[styles.h1fkj9gt, { height: props.height }]}
      />
    );
  }
}
LocalImageSvg.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default LocalImageSvg;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalOrRemoteImageWhenCode 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Image } from 'react-native';
import PropTypes from 'prop-types';

class LocalOrRemoteImageWhenCode extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'LocalOrRemoteImageWhenCode',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'LocalOrRemoteImageWhenCode',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Image
        testID={\`\${props['testID'] || 'LocalOrRemoteImageWhenCode'}|\`}
        source={{ uri: props.source }}
      />
    );
  }
}
LocalOrRemoteImageWhenCode.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default LocalOrRemoteImageWhenCode;
",
  "fonts": Array [],
  "props": Object {
    "source": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalOrRemoteImageWhenCode 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Image } from 'react-native';
import PropTypes from 'prop-types';

class LocalOrRemoteImageWhenCode extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'LocalOrRemoteImageWhenCode',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'LocalOrRemoteImageWhenCode',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Image
        testID={\`\${props['testID'] || 'LocalOrRemoteImageWhenCode'}|\`}
        source={{ uri: props.source }}
      />
    );
  }
}
LocalOrRemoteImageWhenCode.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default LocalOrRemoteImageWhenCode;
",
  "fonts": Array [],
  "props": Object {
    "source": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native NameIsType 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class NameIsType extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'NameIsType',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'NameIsType',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return <Text testID={\`\${props['testID'] || 'Texto'}|\`}>iam</Text>;
  }
}
NameIsType.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default NameIsType;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native NameIsType 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class NameIsType extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'NameIsType',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'NameIsType',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return <Text testID={\`\${props['testID'] || 'Texto'}|\`}>iam</Text>;
  }
}
NameIsType.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default NameIsType;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native NestedRoutes 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-native';
import { Route } from 'react-router-native';
import Topic from './Topic.view.js';
import { Text, View } from 'react-native';
import PropTypes from 'prop-types';

class NestedRoutes extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'NestedRoutes',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'NestedRoutes',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Topics'}|\`}>
        <Text testID={\`NestedRoutes.Text|\`}>topics</Text>
        <Link
          activeOpacity={0.7}
          to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
          underlayColor=\\"transparent\\"
        >
          <View
            to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
            testID={\`NestedRoutes.Link|\`}
          >
            <Text testID={\`NestedRoutes.Text:1|\`}>Rendering with React</Text>
          </View>
        </Link>
        <Route
          path=\\":topic\\"
          render={routeProps => (
            <Topic testID={\`NestedRoutes.Topic|\`} {...routeProps} />
          )}
        />
        {props.children}
      </View>
    );
  }
}
NestedRoutes.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default withRouter(NestedRoutes);
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native NestedRoutes 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-native';
import { Route } from 'react-router-native';
import Topic from './Topic.view.js';
import { Text, View } from 'react-native';
import PropTypes from 'prop-types';

class NestedRoutes extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'NestedRoutes',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'NestedRoutes',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Topics'}|\`}>
        <Text testID={\`NestedRoutes.Text|\`}>topics</Text>
        <Link
          activeOpacity={0.7}
          to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
          underlayColor=\\"transparent\\"
        >
          <View
            to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
            testID={\`NestedRoutes.Link|\`}
          >
            <Text testID={\`NestedRoutes.Text:1|\`}>Rendering with React</Text>
          </View>
        </Link>
        <Route
          path=\\":topic\\"
          render={routeProps => (
            <Topic testID={\`NestedRoutes.Topic|\`} {...routeProps} />
          )}
        />
        {props.children}
      </View>
    );
  }
}
NestedRoutes.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default withRouter(NestedRoutes);
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Print 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, View } from 'react-native';
import PropTypes from 'prop-types';

class Print extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Print',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Print',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
        <Text testID={\`Print.Text|\`}>not in print</Text>
        <Text testID={\`Print.Text:1|\`}>hey</Text>
        {props.children}
      </View>
    );
  }
}
Print.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Print;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Print 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, View } from 'react-native';
import PropTypes from 'prop-types';

class Print extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Print',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Print',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
        <Text testID={\`Print.Text|\`}>not in print</Text>
        <Text testID={\`Print.Text:1|\`}>hey</Text>
        {props.children}
      </View>
    );
  }
}
Print.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Print;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ProxyTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class ProxyTest extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ProxyTest',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ProxyTest',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;
    const childrenArray = React.Children.toArray(props.children);
    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
        <View testID={\`ProxyTest.Horizontal|\`} style={styles.hp2cr4d}>
          {props.bla && childrenArray[props.childrenProxyMap['Something']]
            ? React.cloneElement(
                childrenArray[props.childrenProxyMap['Something']],
                { onClick: props.onClickRemapped }
              )
            : null}
        </View>
        {props.childrenProxyMap &&
          childrenArray[props.childrenProxyMap['View1']]}
      </View>
    );
  }
}
ProxyTest.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ProxyTest;
",
  "fonts": Array [],
  "props": Object {
    "bla": "string",
    "onClickRemapped": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ProxyTest 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class ProxyTest extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ProxyTest',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ProxyTest',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;
    const childrenArray = React.Children.toArray(props.children);
    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
        <View testID={\`ProxyTest.Horizontal|\`} style={styles.hp2cr4d}>
          {props.bla && childrenArray[props.childrenProxyMap['Something']]
            ? React.cloneElement(
                childrenArray[props.childrenProxyMap['Something']],
                { onClick: props.onClickRemapped }
              )
            : null}
        </View>
        {props.childrenProxyMap &&
          childrenArray[props.childrenProxyMap['View1']]}
      </View>
    );
  }
}
ProxyTest.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ProxyTest;
",
  "fonts": Array [],
  "props": Object {
    "bla": "string",
    "onClickRemapped": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Scope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class Scope extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Scope',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Scope',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Text
        testID={\`\${props['testID'] || 'Scope'}|\${
          props.somethingGreen
            ? 'somethingGreen'
            : props.whatMakesBlue
              ? 'whatMakesBlue'
              : !props.whatMakesBlue && props.somethingGreen
                ? 'notWhatMakesBlueAndSomethingGreen'
                : ''
        }\`}
        style={{
          color: props.somethingGreen
            ? 'rgb(0,255,0)'
            : props.whatMakesBlue
              ? 'rgb(0,0,255)'
              : !props.whatMakesBlue && props.somethingGreen
                ? 'rgb(255,255,0)'
                : 'red',
        }}
      >
        {props.somethingGreen
          ? '2 green'
          : props.whatMakesBlue
            ? props.blue
            : !props.whatMakesBlue && props.somethingGreen
              ? 'is Yellow'
              : '1 red'}
      </Text>
    );
  }
}
Scope.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Scope;
",
  "fonts": Array [],
  "props": Object {
    "blue": "string",
    "somethingGreen": "string",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Scope 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class Scope extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Scope',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Scope',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Text
        testID={\`\${props['testID'] || 'Scope'}|\${
          props.somethingGreen
            ? 'somethingGreen'
            : props.whatMakesBlue
              ? 'whatMakesBlue'
              : !props.whatMakesBlue && props.somethingGreen
                ? 'notWhatMakesBlueAndSomethingGreen'
                : ''
        }\`}
        style={{
          color: props.somethingGreen
            ? 'rgb(0,255,0)'
            : props.whatMakesBlue
              ? 'rgb(0,0,255)'
              : !props.whatMakesBlue && props.somethingGreen
                ? 'rgb(255,255,0)'
                : 'red',
        }}
      >
        {props.somethingGreen
          ? '2 green'
          : props.whatMakesBlue
            ? props.blue
            : !props.whatMakesBlue && props.somethingGreen
              ? 'is Yellow'
              : '1 red'}
      </Text>
    );
  }
}
Scope.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Scope;
",
  "fonts": Array [],
  "props": Object {
    "blue": "string",
    "somethingGreen": "string",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopeOnCustomView 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import PropTypes from 'prop-types';

class ScopeOnCustomView extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ScopeOnCustomView',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ScopeOnCustomView',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Button
        testID={\`\${props['testID'] || 'Button'}|\${
          props.a ? 'a' : props.b ? 'b' : ''
        }\`}
        label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
        another={props.a ? 1 : 0}
        more={props.a ? props.different : props.more}
      >
        {props.children}
      </Button>
    );
  }
}
ScopeOnCustomView.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ScopeOnCustomView;
",
  "fonts": Array [],
  "props": Object {
    "different": "string",
    "more": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopeOnCustomView 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import PropTypes from 'prop-types';

class ScopeOnCustomView extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ScopeOnCustomView',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ScopeOnCustomView',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Button
        testID={\`\${props['testID'] || 'Button'}|\${
          props.a ? 'a' : props.b ? 'b' : ''
        }\`}
        label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
        another={props.a ? 1 : 0}
        more={props.a ? props.different : props.more}
      >
        {props.children}
      </Button>
    );
  }
}
ScopeOnCustomView.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ScopeOnCustomView;
",
  "fonts": Array [],
  "props": Object {
    "different": "string",
    "more": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopePopup 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TouchableWithoutFeedback, View } from 'react-native';
import PropTypes from 'prop-types';

class ScopePopup extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ScopePopup',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ScopePopup',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Popup'}|\`}>
        <TouchableWithoutFeedback
          activeOpacity={0.7}
          onPress={
            props.somethingGreen
              ? props.onClickGreen
              : props.whatMakesBlue ? props.onClickBlue : props.toggle
          }
          underlayColor=\\"transparent\\"
        >
          <View
            testID={\`ScopePopup.Toggle|\${
              props.somethingGreen
                ? 'somethingGreen'
                : props.whatMakesBlue ? 'whatMakesBlue' : ''
            }\`}
          >
            <Text testID={\`ScopePopup.Text|\`}>toggle popup</Text>
          </View>
        </TouchableWithoutFeedback>
        {props.children}
      </View>
    );
  }
}
ScopePopup.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ScopePopup;
",
  "fonts": Array [],
  "props": Object {
    "onClickBlue": "function",
    "onClickGreen": "function",
    "somethingGreen": "string",
    "toggle": "function",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopePopup 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TouchableWithoutFeedback, View } from 'react-native';
import PropTypes from 'prop-types';

class ScopePopup extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ScopePopup',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ScopePopup',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Popup'}|\`}>
        <TouchableWithoutFeedback
          activeOpacity={0.7}
          onPress={
            props.somethingGreen
              ? props.onClickGreen
              : props.whatMakesBlue ? props.onClickBlue : props.toggle
          }
          underlayColor=\\"transparent\\"
        >
          <View
            testID={\`ScopePopup.Toggle|\${
              props.somethingGreen
                ? 'somethingGreen'
                : props.whatMakesBlue ? 'whatMakesBlue' : ''
            }\`}
          >
            <Text testID={\`ScopePopup.Text|\`}>toggle popup</Text>
          </View>
        </TouchableWithoutFeedback>
        {props.children}
      </View>
    );
  }
}
ScopePopup.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ScopePopup;
",
  "fonts": Array [],
  "props": Object {
    "onClickBlue": "function",
    "onClickGreen": "function",
    "somethingGreen": "string",
    "toggle": "function",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopePopup2 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TouchableWithoutFeedback, View } from 'react-native';
import PropTypes from 'prop-types';

class ScopePopup2 extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ScopePopup2',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ScopePopup2',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Popup'}|\`}>
        <TouchableWithoutFeedback
          activeOpacity={0.7}
          onPress={event => {
            context.track({
              block: props['testID'] || 'ScopePopup2',
              action: 'click',
            });
            props.toggle(event);
          }}
          underlayColor=\\"transparent\\"
        >
          <View testID={\`ScopePopup2.Toggle|\`}>
            <Text testID={\`ScopePopup2.Text|\`}>toggle popup</Text>
          </View>
        </TouchableWithoutFeedback>
        <View
          testID={\`ScopePopup2.Content|\${
            props.isShown
              ? 'isShown'
              : props.isSuperVisible ? 'isSuperVisible' : ''
          }\`}
          scale={props.isShown ? 1 : props.isSuperVisible ? 2 : 0}
          style={{ opacity: props.isShown ? 1 : props.isSuperVisible ? 3 : 0 }}
        />
        {props.children}
      </View>
    );
  }
}
ScopePopup2.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ScopePopup2;
",
  "fonts": Array [],
  "props": Object {
    "isShown": "string",
    "isSuperVisible": "string",
    "toggle": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopePopup2 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TouchableWithoutFeedback, View } from 'react-native';
import PropTypes from 'prop-types';

class ScopePopup2 extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ScopePopup2',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ScopePopup2',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Popup'}|\`}>
        <TouchableWithoutFeedback
          activeOpacity={0.7}
          onPress={event => {
            context.track({
              block: props['testID'] || 'ScopePopup2',
              action: 'click',
            });
            props.toggle(event);
          }}
          underlayColor=\\"transparent\\"
        >
          <View testID={\`ScopePopup2.Toggle|\`}>
            <Text testID={\`ScopePopup2.Text|\`}>toggle popup</Text>
          </View>
        </TouchableWithoutFeedback>
        <View
          testID={\`ScopePopup2.Content|\${
            props.isShown
              ? 'isShown'
              : props.isSuperVisible ? 'isSuperVisible' : ''
          }\`}
          scale={props.isShown ? 1 : props.isSuperVisible ? 2 : 0}
          style={{ opacity: props.isShown ? 1 : props.isSuperVisible ? 3 : 0 }}
        />
        {props.children}
      </View>
    );
  }
}
ScopePopup2.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ScopePopup2;
",
  "fonts": Array [],
  "props": Object {
    "isShown": "string",
    "isSuperVisible": "string",
    "toggle": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native SomeMissingStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, TouchableWithoutFeedback } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  h7g4z7s: {
    marginRight: 8,
    backgroundColor: '#CBCDCE',
    opacity: 0.7,
    transform: 'scale(1.1)',
    transition: 'all 0.15s ease-out',
    borderRadius: 10,
    width: 10,
    height: 10,
  },
});

class SomeMissingStyle extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'SomeMissingStyle',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'SomeMissingStyle',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={event => {
          context.track({
            block: props['testID'] || 'SomeMissingStyle',
            action: 'click',
          });
          props.onClick(event);
        }}
        underlayColor=\\"transparent\\"
      >
        <Animated.View
          testID={\`\${props['testID'] || 'WindowControl'}|\`}
          tabIndex=\\"-1\\"
          style={styles.h7g4z7s}
        >
          {props.children}
        </Animated.View>
      </TouchableWithoutFeedback>
    );
  }
}
SomeMissingStyle.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default SomeMissingStyle;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColorHover": "string",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native SomeMissingStyle 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, TouchableWithoutFeedback } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  h7g4z7s: {
    marginRight: 8,
    backgroundColor: '#CBCDCE',
    opacity: 0.7,
    transform: 'scale(1.1)',
    transition: 'all 0.15s ease-out',
    borderRadius: 10,
    width: 10,
    height: 10,
  },
});

class SomeMissingStyle extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'SomeMissingStyle',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'SomeMissingStyle',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={event => {
          context.track({
            block: props['testID'] || 'SomeMissingStyle',
            action: 'click',
          });
          props.onClick(event);
        }}
        underlayColor=\\"transparent\\"
      >
        <Animated.View
          testID={\`\${props['testID'] || 'WindowControl'}|\`}
          tabIndex=\\"-1\\"
          style={styles.h7g4z7s}
        >
          {props.children}
        </Animated.View>
      </TouchableWithoutFeedback>
    );
  }
}
SomeMissingStyle.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default SomeMissingStyle;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColorHover": "string",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Teleport 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-native';
import { StyleSheet, Text, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class Teleport extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Teleport',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Teleport',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Link activeOpacity={0.7} to=\\"..\\" underlayColor=\\"transparent\\">
        <View
          to=\\"..\\"
          testID={\`\${props['testID'] || 'Horizontal'}|\`}
          style={styles.hp2cr4d}
        >
          <Text testID={\`Teleport.Text|\`}>go back</Text>
          {props.children}
        </View>
      </Link>
    );
  }
}
Teleport.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Teleport;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Teleport 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-native';
import { StyleSheet, Text, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class Teleport extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Teleport',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Teleport',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Link activeOpacity={0.7} to=\\"..\\" underlayColor=\\"transparent\\">
        <View
          to=\\"..\\"
          testID={\`\${props['testID'] || 'Horizontal'}|\`}
          style={styles.hp2cr4d}
        >
          <Text testID={\`Teleport.Text|\`}>go back</Text>
          {props.children}
        </View>
      </Link>
    );
  }
}
Teleport.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Teleport;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Test 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class Test extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Test',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Test',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Custom
        testID={\`\${props['testID'] || 'Custom'}|\`}
        stuff=\\"eqweqw\\"
        childrenProxyMap={{ Something: 0, Another: 1 }}
      >
        <Text testID={\`Test.Something|\`}>v1vh1t1</Text>
        <Text testID={\`Test.Another|\`}>inside custom</Text>
        {props.children}
      </Custom>
    );
  }
}
Test.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Test;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Test 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class Test extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Test',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Test',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Custom
        testID={\`\${props['testID'] || 'Custom'}|\`}
        stuff=\\"eqweqw\\"
        childrenProxyMap={{ Something: 0, Another: 1 }}
      >
        <Text testID={\`Test.Something|\`}>v1vh1t1</Text>
        <Text testID={\`Test.Another|\`}>inside custom</Text>
        {props.children}
      </Custom>
    );
  }
}
Test.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Test;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native TestIds 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import { Text, View } from 'react-native';
import PropTypes from 'prop-types';

class TestIds extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'TestIds',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'TestIds',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'App'}|\`}>
        <Text testID={\`TestIds.Text|\`}>1</Text>
        <Text testID={\`TestIds.Text:1|\`}>2</Text>
        <External testID={\`TestIds.External|\`} />
        <Text testID={\`TestIds.Name|\`}>name</Text>
        {props.children}
      </View>
    );
  }
}
TestIds.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default TestIds;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native TestIds 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import { Text, View } from 'react-native';
import PropTypes from 'prop-types';

class TestIds extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'TestIds',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'TestIds',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'App'}|\`}>
        <Text testID={\`TestIds.Text|\`}>1</Text>
        <Text testID={\`TestIds.Text:1|\`}>2</Text>
        <External testID={\`TestIds.External|\`} />
        <Text testID={\`TestIds.Name|\`}>name</Text>
        {props.children}
      </View>
    );
  }
}
TestIds.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default TestIds;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native TextInterpolation 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, View } from 'react-native';
import PropTypes from 'prop-types';

class TextInterpolation extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'TextInterpolation',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'TextInterpolation',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
        <Text testID={\`TextInterpolation.Text|\`}>{\`\${props.name} test\`}</Text>
        {props.children}
      </View>
    );
  }
}
TextInterpolation.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default TextInterpolation;
",
  "fonts": Array [],
  "props": Object {
    "name": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native TextInterpolation 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, View } from 'react-native';
import PropTypes from 'prop-types';

class TextInterpolation extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'TextInterpolation',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'TextInterpolation',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
        <Text testID={\`TextInterpolation.Text|\`}>{\`\${props.name} test\`}</Text>
        {props.children}
      </View>
    );
  }
}
TextInterpolation.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default TextInterpolation;
",
  "fonts": Array [],
  "props": Object {
    "name": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Toggle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class Toggle extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Toggle',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Toggle',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return <Text testID={\`\${props['testID'] || 'Text'}|\`}>NOPE</Text>;
  }
}
Toggle.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Toggle;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Toggle 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class Toggle extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'Toggle',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'Toggle',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return <Text testID={\`\${props['testID'] || 'Text'}|\`}>NOPE</Text>;
  }
}
Toggle.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default Toggle;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureEmail 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, TextInput } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  hm4pcs: {
    borderColor: 'black',
    borderStyle: 'solid',
    borderWidth: 1,
    color: 'red',
  },
});

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureEmail',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureEmail',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={email => this.setState({ email })}
        ref={$e => (this.$email = $e)}
        value={state.email}
        keyboardType=\\"email-address\\"
        autoCorrect={false}
        defaultValue={undefined}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Email'}|\`}
        autoFocus={true}
        defaultValue=\\"hey this is a default value\\"
        style={styles.hm4pcs}
      />
    );
  }
}
UseCaptureEmail.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureEmail;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureEmail 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, TextInput } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  hm4pcs: {
    borderColor: 'black',
    borderStyle: 'solid',
    borderWidth: 1,
    color: 'red',
  },
});

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureEmail',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureEmail',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={email => this.setState({ email })}
        ref={$e => (this.$email = $e)}
        value={state.email}
        keyboardType=\\"email-address\\"
        autoCorrect={false}
        defaultValue={undefined}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Email'}|\`}
        autoFocus={true}
        defaultValue=\\"hey this is a default value\\"
        style={styles.hm4pcs}
      />
    );
  }
}
UseCaptureEmail.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureEmail;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureFile 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import CaptureFile from './CaptureFile.view.js';
import PropTypes from 'prop-types';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureFile',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureFile',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <CaptureFile
        returnKeyType=\\"done\\"
        onChangeText={file => this.setState({ file })}
        ref={$e => (this.$file = $e)}
        value={state.file}
        keyboardType=\\"undefined\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'File'}|\`}
      />
    );
  }
}
UseCaptureFile.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureFile;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureFile 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import CaptureFile from './CaptureFile.view.js';
import PropTypes from 'prop-types';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureFile',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureFile',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <CaptureFile
        returnKeyType=\\"done\\"
        onChangeText={file => this.setState({ file })}
        ref={$e => (this.$file = $e)}
        value={state.file}
        keyboardType=\\"undefined\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'File'}|\`}
      />
    );
  }
}
UseCaptureFile.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureFile;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureNumber 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureNumber',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureNumber',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={number => this.setState({ number })}
        ref={$e => (this.$number = $e)}
        value={state.number}
        keyboardType=\\"numeric\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Number'}|\`}
      />
    );
  }
}
UseCaptureNumber.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureNumber;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureNumber 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureNumber',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureNumber',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={number => this.setState({ number })}
        ref={$e => (this.$number = $e)}
        value={state.number}
        keyboardType=\\"numeric\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Number'}|\`}
      />
    );
  }
}
UseCaptureNumber.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureNumber;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCapturePhone 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCapturePhone',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCapturePhone',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={phone => this.setState({ phone })}
        ref={$e => (this.$phone = $e)}
        value={state.phone}
        keyboardType=\\"phone-pad\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Phone'}|\`}
      />
    );
  }
}
UseCapturePhone.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCapturePhone;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCapturePhone 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCapturePhone',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCapturePhone',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={phone => this.setState({ phone })}
        ref={$e => (this.$phone = $e)}
        value={state.phone}
        keyboardType=\\"phone-pad\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Phone'}|\`}
      />
    );
  }
}
UseCapturePhone.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCapturePhone;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureSecure 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureSecure',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureSecure',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={secure => this.setState({ secure })}
        ref={$e => (this.$secure = $e)}
        value={state.secure}
        secureTextEntry
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Secure'}|\`}
      />
    );
  }
}
UseCaptureSecure.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureSecure;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureSecure 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureSecure',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureSecure',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={secure => this.setState({ secure })}
        ref={$e => (this.$secure = $e)}
        value={state.secure}
        secureTextEntry
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Secure'}|\`}
      />
    );
  }
}
UseCaptureSecure.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureSecure;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureText',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={text => this.setState({ text })}
        ref={$e => (this.$text = $e)}
        value={state.text}
        keyboardType=\\"default\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Text'}|\`}
      />
    );
  }
}
UseCaptureText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureText 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureText',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={text => this.setState({ text })}
        ref={$e => (this.$text = $e)}
        value={state.text}
        keyboardType=\\"default\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Text'}|\`}
      />
    );
  }
}
UseCaptureText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureTextArea 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureTextArea',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureTextArea',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={captureTextArea => this.setState({ captureTextArea })}
        ref={$e => (this.$captureTextArea = $e)}
        value={state.captureTextArea}
        keyboardType=\\"default\\"
        multiline={true}
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'CaptureTextArea'}|\`}
      />
    );
  }
}
UseCaptureTextArea.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureTextArea;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureTextArea 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureTextArea',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureTextArea',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={captureTextArea => this.setState({ captureTextArea })}
        ref={$e => (this.$captureTextArea = $e)}
        value={state.captureTextArea}
        keyboardType=\\"default\\"
        multiline={true}
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'CaptureTextArea'}|\`}
      />
    );
  }
}
UseCaptureTextArea.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureTextArea;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureTextManagedFromOutside 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureTextManagedFromOutside',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureTextManagedFromOutside',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={captureText => this.setState({ captureText })}
        ref={$e => (this.$captureText = $e)}
        value={state.captureText}
        keyboardType=\\"default\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'CaptureText'}|\`}
        value={props.external}
      />
    );
  }
}
UseCaptureTextManagedFromOutside.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureTextManagedFromOutside;
",
  "fonts": Array [],
  "props": Object {
    "external": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureTextManagedFromOutside 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';
import PropTypes from 'prop-types';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureTextManagedFromOutside',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseCaptureTextManagedFromOutside',
      action: 'leave',
    });
  }

  render() {
    const { context, props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={captureText => this.setState({ captureText })}
        ref={$e => (this.$captureText = $e)}
        value={state.captureText}
        keyboardType=\\"default\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'CaptureText'}|\`}
        value={props.external}
      />
    );
  }
}
UseCaptureTextManagedFromOutside.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseCaptureTextManagedFromOutside;
",
  "fonts": Array [],
  "props": Object {
    "external": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseHorizontal 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  h13qdyyc: {
    flexDirection: 'row',
    borderColor: 'red',
    borderStyle: 'solid',
    borderWidth: 1,
  },
});

class UseHorizontal extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseHorizontal',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseHorizontal',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View
        testID={\`\${props['testID'] || 'Horizontal'}|\`}
        style={styles.h13qdyyc}
      >
        {props.children}
      </View>
    );
  }
}
UseHorizontal.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseHorizontal;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseHorizontal 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  h13qdyyc: {
    flexDirection: 'row',
    borderColor: 'red',
    borderStyle: 'solid',
    borderWidth: 1,
  },
});

class UseHorizontal extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseHorizontal',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseHorizontal',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View
        testID={\`\${props['testID'] || 'Horizontal'}|\`}
        style={styles.h13qdyyc}
      >
        {props.children}
      </View>
    );
  }
}
UseHorizontal.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseHorizontal;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Image } from 'react-native';
import PropTypes from 'prop-types';

class UseImage extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseImage',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseImage',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Image
        testID={\`\${props['testID'] || 'Image'}|\${
          props.another ? 'another' : ''
        }\`}
        source={{
          uri: props.another
            ? 'https://views.tools/hi.jpg'
            : 'https://views.tools/rocks.jpg',
        }}
      />
    );
  }
}
UseImage.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseImage;
",
  "fonts": Array [],
  "props": Object {
    "another": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseImage 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Image } from 'react-native';
import PropTypes from 'prop-types';

class UseImage extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseImage',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseImage',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Image
        testID={\`\${props['testID'] || 'Image'}|\${
          props.another ? 'another' : ''
        }\`}
        source={{
          uri: props.another
            ? 'https://views.tools/hi.jpg'
            : 'https://views.tools/rocks.jpg',
        }}
      />
    );
  }
}
UseImage.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseImage;
",
  "fonts": Array [],
  "props": Object {
    "another": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseOfProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class UseOfProxy extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseOfProxy',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseOfProxy',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'App'}|\`} style={styles.hp2cr4d}>
        <Button
          testID={\`UseOfProxy.Button|\`}
          color=\\"red\\"
          icon=\\"MyIcon\\"
          text=\\"I'm a button!\\"
        />
        {props.children}
      </View>
    );
  }
}
UseOfProxy.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseOfProxy;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseOfProxy 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class UseOfProxy extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseOfProxy',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseOfProxy',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'App'}|\`} style={styles.hp2cr4d}>
        <Button
          testID={\`UseOfProxy.Button|\`}
          color=\\"red\\"
          icon=\\"MyIcon\\"
          text=\\"I'm a button!\\"
        />
        {props.children}
      </View>
    );
  }
}
UseOfProxy.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseOfProxy;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class UseProxy extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseProxy',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseProxy',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;
    const childrenArray = React.Children.toArray(props.children);
    return (
      <View testID={\`\${props['testID'] || 'Button'}|\`} style={styles.hp2cr4d}>
        {props.childrenProxyMap &&
        childrenArray[props.childrenProxyMap['props.icon']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['props.icon']],
              { fill: 'red' }
            )
          : null}
        <Text testID={\`UseProxy.Text|\`}>{props.text}</Text>
      </View>
    );
  }
}
UseProxy.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseProxy;
",
  "fonts": Array [],
  "props": Object {
    "icon": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseProxy 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class UseProxy extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseProxy',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseProxy',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;
    const childrenArray = React.Children.toArray(props.children);
    return (
      <View testID={\`\${props['testID'] || 'Button'}|\`} style={styles.hp2cr4d}>
        {props.childrenProxyMap &&
        childrenArray[props.childrenProxyMap['props.icon']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['props.icon']],
              { fill: 'red' }
            )
          : null}
        <Text testID={\`UseProxy.Text|\`}>{props.text}</Text>
      </View>
    );
  }
}
UseProxy.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseProxy;
",
  "fonts": Array [],
  "props": Object {
    "icon": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseRouter 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-native';
import { NativeRouter as Router } from 'react-router-native';
import Topics from './Topics.view.js';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class UseRouter extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseRouter',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseRouter',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Router>
        <View
          testID={\`\${props['testID'] || 'Horizontal'}|\`}
          style={styles.hp2cr4d}
        >
          <Route
            path=\\"/\\"
            exact
            render={routeProps => (
              <Home
                testID={\`UseRouter.Home|\`}
                height={props.height}
                width={360}
                {...routeProps}
              />
            )}
          />
          <Route
            path=\\"/about\\"
            render={routeProps => (
              <About testID={\`UseRouter.About|\`} {...routeProps} />
            )}
          />
          <Route
            path=\\"/topics\\"
            render={routeProps => (
              <Topics testID={\`UseRouter.Topics|\`} {...routeProps} />
            )}
          />
          {props.children}
        </View>
      </Router>
    );
  }
}
UseRouter.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseRouter;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseRouter 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-native';
import { NativeRouter as Router } from 'react-router-native';
import Topics from './Topics.view.js';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class UseRouter extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseRouter',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseRouter',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Router>
        <View
          testID={\`\${props['testID'] || 'Horizontal'}|\`}
          style={styles.hp2cr4d}
        >
          <Route
            path=\\"/\\"
            exact
            render={routeProps => (
              <Home
                testID={\`UseRouter.Home|\`}
                height={props.height}
                width={360}
                {...routeProps}
              />
            )}
          />
          <Route
            path=\\"/about\\"
            render={routeProps => (
              <About testID={\`UseRouter.About|\`} {...routeProps} />
            )}
          />
          <Route
            path=\\"/topics\\"
            render={routeProps => (
              <Topics testID={\`UseRouter.Topics|\`} {...routeProps} />
            )}
          />
          {props.children}
        </View>
      </Router>
    );
  }
}
UseRouter.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseRouter;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Svg, {
  Circle as SvgCircle,
  G as SvgGroup,
  Path as SvgPath,
  Text as SvgText,
} from 'react-native-svg';
import PropTypes from 'prop-types';

class UseSvg extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseSvg',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseSvg',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Svg
        testID={\`\${props['testID'] || 'Svg'}|\`}
        viewBox=\\"0 0 20 20\\"
        height={20}
        width={20}
      >
        <SvgPath testID={\`UseSvg.SvgPath|\`} d=\\"0 20\\" fill=\\"red\\" />
        <SvgCircle testID={\`UseSvg.SvgCircle|\`} cx={10} cy={5} r={5} />
        <SvgGroup
          testID={\`UseSvg.SvgGroup|\`}
          transform=\\"translate(6.000000, 5.000000)\\"
        >
          <SvgPath testID={\`UseSvg.SvgPath:1|\`} d={1} />
          <SvgPath testID={\`UseSvg.SvgPath:2|\`} d={2} />
        </SvgGroup>
        <SvgText testID={\`UseSvg.SvgText|\`} text=\\"hey\\" />
        {props.children}
      </Svg>
    );
  }
}
UseSvg.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseSvg;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseSvg 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Svg, {
  Circle as SvgCircle,
  G as SvgGroup,
  Path as SvgPath,
  Text as SvgText,
} from 'react-native-svg';
import PropTypes from 'prop-types';

class UseSvg extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseSvg',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseSvg',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Svg
        testID={\`\${props['testID'] || 'Svg'}|\`}
        viewBox=\\"0 0 20 20\\"
        height={20}
        width={20}
      >
        <SvgPath testID={\`UseSvg.SvgPath|\`} d=\\"0 20\\" fill=\\"red\\" />
        <SvgCircle testID={\`UseSvg.SvgCircle|\`} cx={10} cy={5} r={5} />
        <SvgGroup
          testID={\`UseSvg.SvgGroup|\`}
          transform=\\"translate(6.000000, 5.000000)\\"
        >
          <SvgPath testID={\`UseSvg.SvgPath:1|\`} d={1} />
          <SvgPath testID={\`UseSvg.SvgPath:2|\`} d={2} />
        </SvgGroup>
        <SvgText testID={\`UseSvg.SvgText|\`} text=\\"hey\\" />
        {props.children}
      </Svg>
    );
  }
}
UseSvg.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseSvg;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  h1gml2rz: {
    color: 'blue',
    fontFamily: 'Montserrat-300',
    fontSize: 16,
    lineHeight: 24,
  },
});

class UseText extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseText',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Text testID={\`\${props['testID'] || 'UseText'}|\`} style={styles.h1gml2rz}>
        Hi, I'm some text
      </Text>
    );
  }
}
UseText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseText;
",
  "fonts": Array [
    Object {
      "family": "Montserrat",
      "id": "Montserrat-300",
      "style": "normal",
      "weight": "300",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseText 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  h1gml2rz: {
    color: 'blue',
    fontFamily: 'Montserrat-300',
    fontSize: 16,
    lineHeight: 24,
  },
});

class UseText extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseText',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseText',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Text testID={\`\${props['testID'] || 'UseText'}|\`} style={styles.h1gml2rz}>
        Hi, I'm some text
      </Text>
    );
  }
}
UseText.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseText;
",
  "fonts": Array [
    Object {
      "family": "Montserrat",
      "id": "Montserrat-300",
      "style": "normal",
      "weight": "300",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseTextCustomFont 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  hlldui9: {
    color: 'blue',
    fontFamily: 'CustomFontNotOnGoogle-300',
    fontSize: 16,
    lineHeight: 24,
  },
  h164u665: {
    color: 'blue',
    fontFamily: 'CustomFontNotOnGoogle-400',
    fontStyle: 'italic',
    fontSize: 16,
    lineHeight: 24,
  },
});

class UseTextCustomFont extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseTextCustomFont',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseTextCustomFont',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'UseTextCustomFont'}|\`}>
        <Text testID={\`UseTextCustomFont.Normal|\`} style={styles.hlldui9}>
          Hi, I'm some text
        </Text>
        <Text testID={\`UseTextCustomFont.Italic|\`} style={styles.h164u665}>
          Hi, I'm some text
        </Text>
        {props.children}
      </View>
    );
  }
}
UseTextCustomFont.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseTextCustomFont;
",
  "fonts": Array [
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-300",
      "style": "normal",
      "weight": "300",
    },
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-400-italic",
      "style": "italic",
      "weight": "400",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseTextCustomFont 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({
  hlldui9: {
    color: 'blue',
    fontFamily: 'CustomFontNotOnGoogle-300',
    fontSize: 16,
    lineHeight: 24,
  },
  h164u665: {
    color: 'blue',
    fontFamily: 'CustomFontNotOnGoogle-400',
    fontStyle: 'italic',
    fontSize: 16,
    lineHeight: 24,
  },
});

class UseTextCustomFont extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseTextCustomFont',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseTextCustomFont',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'UseTextCustomFont'}|\`}>
        <Text testID={\`UseTextCustomFont.Normal|\`} style={styles.hlldui9}>
          Hi, I'm some text
        </Text>
        <Text testID={\`UseTextCustomFont.Italic|\`} style={styles.h164u665}>
          Hi, I'm some text
        </Text>
        {props.children}
      </View>
    );
  }
}
UseTextCustomFont.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseTextCustomFont;
",
  "fonts": Array [
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-300",
      "style": "normal",
      "weight": "300",
    },
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-400-italic",
      "style": "italic",
      "weight": "400",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseVertical 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ h1jcb2fl: { backgroundColor: 'red' } });

class UseVertical extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseVertical',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseVertical',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View
        testID={\`\${props['testID'] || 'Vertical'}|\`}
        style={styles.h1jcb2fl}
      >
        {props.children}
      </View>
    );
  }
}
UseVertical.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseVertical;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseVertical 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ h1jcb2fl: { backgroundColor: 'red' } });

class UseVertical extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'UseVertical',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'UseVertical',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View
        testID={\`\${props['testID'] || 'Vertical'}|\`}
        style={styles.h1jcb2fl}
      >
        {props.children}
      </View>
    );
  }
}
UseVertical.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default UseVertical;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ViewNameIsntUsedInStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ h15ehzpl: { zIndex: 5 } });

class ViewNameIsntUsedInStyle extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ViewNameIsntUsedInStyle',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ViewNameIsntUsedInStyle',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Animated.View
        testID={\`\${props['testID'] || 'ViewNameIsntUsedInStyle'}|\`}
        style={[styles.h15ehzpl, { opacity: props.opacity }]}
      >
        {props.children}
      </Animated.View>
    );
  }
}
ViewNameIsntUsedInStyle.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ViewNameIsntUsedInStyle;
",
  "fonts": Array [],
  "props": Object {
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ViewNameIsntUsedInStyle 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ h15ehzpl: { zIndex: 5 } });

class ViewNameIsntUsedInStyle extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'ViewNameIsntUsedInStyle',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'ViewNameIsntUsedInStyle',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <Animated.View
        testID={\`\${props['testID'] || 'ViewNameIsntUsedInStyle'}|\`}
        style={[styles.h15ehzpl, { opacity: props.opacity }]}
      >
        {props.children}
      </Animated.View>
    );
  }
}
ViewNameIsntUsedInStyle.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default ViewNameIsntUsedInStyle;
",
  "fonts": Array [],
  "props": Object {
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native When 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class When extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'When',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'When',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'App'}|\`} style={styles.hp2cr4d}>
        {props.showMe ? (
          <Text testID={\`When.Text|\`}>I may be hidden</Text>
        ) : null}
        {props.children}
      </View>
    );
  }
}
When.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default When;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native When 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import PropTypes from 'prop-types';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

class When extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'When',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'When',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <View testID={\`\${props['testID'] || 'App'}|\`} style={styles.hp2cr4d}>
        {props.showMe ? (
          <Text testID={\`When.Text|\`}>I may be hidden</Text>
        ) : null}
        {props.children}
      </View>
    );
  }
}
When.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default When;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native WhenTopLevel 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class WhenTopLevel extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'WhenTopLevel',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'WhenTopLevel',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return props.showMe ? (
      <Text testID={\`\${props['testID'] || 'Text'}|\`}>I may be hidden</Text>
    ) : null;
  }
}
WhenTopLevel.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default WhenTopLevel;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native WhenTopLevel 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';

class WhenTopLevel extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'WhenTopLevel',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'WhenTopLevel',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return props.showMe ? (
      <Text testID={\`\${props['testID'] || 'Text'}|\`}>I may be hidden</Text>
    ) : null;
  }
}
WhenTopLevel.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default WhenTopLevel;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native WithTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TouchableWithoutFeedback, View } from 'react-native';
import PropTypes from 'prop-types';

class WithTest extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'WithTest',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'WithTest',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={event => {
          context.track({
            block: props['testID'] || 'WithTest',
            action: 'click',
          });
          props.change(event);
        }}
        underlayColor=\\"transparent\\"
      >
        <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
          <Text testID={\`WithTest.Text|\`}>{props.text}</Text>
          {props.children}
        </View>
      </TouchableWithoutFeedback>
    );
  }
}
WithTest.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default WithTest;
",
  "fonts": Array [],
  "props": Object {
    "change": "function",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native WithTest 2`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TouchableWithoutFeedback, View } from 'react-native';
import PropTypes from 'prop-types';

class WithTest extends React.Component {
  componentDidMount() {
    this.context.track({
      block: this.props['testID'] || 'WithTest',
      action: 'enter',
    });
  }

  componentWillUnmount() {
    this.context.track({
      block: this.props['testID'] || 'WithTest',
      action: 'leave',
    });
  }

  render() {
    const { context, props } = this;

    return (
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={event => {
          context.track({
            block: props['testID'] || 'WithTest',
            action: 'click',
          });
          props.change(event);
        }}
        underlayColor=\\"transparent\\"
      >
        <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
          <Text testID={\`WithTest.Text|\`}>{props.text}</Text>
          {props.children}
        </View>
      </TouchableWithoutFeedback>
    );
  }
}
WithTest.contextTypes = {
  track: PropTypes.func.isRequired,
};

export default WithTest;
",
  "fonts": Array [],
  "props": Object {
    "change": "function",
    "text": "string",
  },
  "svgs": Array [],
}
`;
