// This file is automatically generated by Views and will be overwritten
// when the morpher runs. If you want to contribute to how it's generated, eg,
// improving the algorithms inside, etc, see this:
// https://github.com/viewstools/morph/blob/master/ensure-data.js
import * as fromValidate from 'Data/validate.js'
import * as fromFormat from 'Data/format.js'
import {
  normalizePath,
  useSetFlowTo,
  useFlow,
  getNextFlow,
  isFlowKeyWithArguments,
  getFlowDefinitionKey,
  getFlowDefinition,
  getParentView,
} from './Flow.js'
// import get from 'dlv';
import get from 'lodash/get'
import produce from 'immer'
// import set from 'dset';
import set from 'lodash/set'
import React, {
  useContext,
  useEffect,
  useMemo,
  useReducer,
  useRef,
} from 'react'

let SET = 'data/SET'
let SET_FN = 'data/SET_FN'
let RESET = 'data/RESET'
let FORCE_REQUIRED = 'data/FORCE_REQUIRED'
let IS_SUBMITTING = 'data/IS_SUBMITTING'
let reducer = produce((draft, action) => {
  switch (action.type) {
    case SET: {
      set(draft, action.path, action.value)
      break
    }

    case SET_FN: {
      action.fn(draft, set, get)
      break
    }

    case RESET: {
      return action.value
    }

    case IS_SUBMITTING: {
      draft._isSubmitting = action.value
      break
    }

    case FORCE_REQUIRED: {
      draft._forceRequired = true
      draft._isSubmitting = false
      break
    }

    default: {
      throw new Error(
        `Unknown action type "${action.type}" in useData reducer.`
      )
    }
  }
})

let DataContexts = {
  default: React.createContext([]),
}
export function DataProvider(props) {
  if (process.env.NODE_ENV === 'development') {
    if (!props.context) {
      log({
        type: 'views/data/missing-context-value',
        viewPath: props.viewPath,
        message: `You're missing the context value in DataProvider. Eg: <DataProvider context="namespace" value={value}>. You're using the default one now instead.`,
      })
    }
  }
  if (!(props.context in DataContexts)) {
    DataContexts[props.context] = React.createContext([])
    DataContexts[props.context].displayName = props.context
  }
  let Context = DataContexts[props.context]

  let [_state, dispatch] = useReducer(reducer, props.value)
  let [state, setState] = useReducer((_, s) => s, props.value)
  // TODO: refactor -- This is part of the listeners
  let setFlowTo = useSetFlowTo(props.viewPath)
  let flow = useFlow()
  let flowRef = useRef(flow)
  useEffect(() => {
    flowRef.current = flow
  }, [flow])
  let listeners = useRef([])
  function registerListener(listener) {
    listeners.current.push(listener)
    // TODO: because we have the effect now but we may need it then
    // listener(_state, state)
    return () => {
      listeners.current = listeners.current.filter((l) => l !== listener)
    }
  }

  useEffect(() => {
    if (state === _state) return
    console.debug({
      type: 'views/data/listeners/state-change',
      state,
      _state,
    })

    // We are sorting the listeners from longest to shorter
    // as an approximation to get the order of setFlowTo's application
    let nextFlow = flowRef.current.flow
    let listenersCurrent = [...listeners.current]
    listenersCurrent.sort((a, b) => b.viewPath.length - a.viewPath.length)
    let targets = []

    function _setFlowTo(target) {
      nextFlow = getNextFlow(target, nextFlow)
      targets.push(target)
    }

    function _has(key) {
      if (!key) return false

      // active view in flow
      let [parent, view] = getParentView(key)
      let value = nextFlow[parent]
      if (value === view) return true
      if (typeof value === 'string') return false

      // FIXME HACK: check for a definition key instead of the arguments
      // version of it because Tools doesn't understand list items on the
      //  flow just yet and sets the flow to the definition key instead
      if (isFlowKeyWithArguments(key)) {
        let definitionKey = getFlowDefinitionKey(key)
        let [parent, view] = getParentView(definitionKey)
        let value = nextFlow[parent]
        if (value === view) return true
        if (typeof value === 'string') return false
      }

      // first view defined on the flow
      let parentFlowDefinition = getFlowDefinition(parent)
      return (
        Array.isArray(parentFlowDefinition) && parentFlowDefinition[0] === view
      )
    }

    let hasKeys = []

    listenersCurrent.forEach(({ listener, viewPath }) => {
      let has = (key) => {
        let result = _has(key)
        hasKeys.push({ viewPath, key, result, flow: { ...nextFlow } })
        return result
      }
      listener(_state, state, { has }, _setFlowTo)
    })
    if (listenersCurrent.length || targets.length || hasKeys.length) {
      console.debug({
        type: 'views/data/listeners/current',
        listeners: listenersCurrent,
        targets,
        hasKeys,
      })
    }
    targets.forEach(setFlowTo)
    setState(_state)
  }, [_state, state]) // eslint-disable-line
  // ignore setFlowTo

  // track a reference of state so that any call to onSubmit gets the latest
  // state even if it changed through the execution
  let stateRef = useRef(state)
  useEffect(() => {
    stateRef.current = state
  }, [state])

  let isSubmitting = useRef(false)
  let shouldCallOnChange = useRef(false)

  useEffect(() => {
    if (isSubmitting.current) return

    shouldCallOnChange.current = false

    dispatch({ type: RESET, value: props.value })
  }, [props.value]) // eslint-disable-line
  // ignore dispatch

  function _onChange(value, changePath = props.context) {
    if (typeof value === 'function') {
      dispatch({ type: SET_FN, fn: value })
    } else if (!changePath) {
      dispatch({ type: RESET, value })
    } else {
      dispatch({
        type: SET,
        path: changePath,
        value,
      })
    }
  }

  // keep track of props.onChange outside of the following effect to
  // prevent loops. Making the function useCallback didn't work
  let onSubmit = useRef(props.onSubmit)
  useEffect(() => {
    onSubmit.current = props.onSubmit
  }, [props.onSubmit])

  async function _onSubmit(args) {
    if (isSubmitting.current) return
    isSubmitting.current = true

    try {
      dispatch({ type: IS_SUBMITTING, value: true })
      let res = await onSubmit.current({
        value: stateRef.current,
        args,
        onChange: _onChange,
      })
      isSubmitting.current = false

      if (!res) {
        dispatch({ type: IS_SUBMITTING, value: false })
        return
      }
    } catch (error) {
      isSubmitting.current = false
    }

    dispatch({ type: FORCE_REQUIRED })
  }

  let value = useMemo(
    () => [state, dispatch, _onSubmit, props.value, registerListener],
    [state, props.value] // eslint-disable-line
  ) // ignore registerListener

  // keep track of props.onChange outside of the following effect to
  // prevent loops. Making the function useCallback didn't work
  let onChange = useRef(props.onChange)
  useEffect(() => {
    onChange.current = props.onChange
  }, [props.onChange])

  useEffect(() => {
    if (!shouldCallOnChange.current) {
      shouldCallOnChange.current = true
      return
    }

    onChange.current(state, (fn) => dispatch({ type: SET_FN, fn }))
  }, [state]) // eslint-disable-line
  // ignore props.context, props.viewPath

  return <Context.Provider value={value}>{props.children}</Context.Provider>
}
DataProvider.defaultProps = {
  context: 'default',
  onChange: () => {},
  onSubmit: () => {},
}

export function useDataListener({
  // path = null,
  context = 'default',
  viewPath,
  listener,
} = {}) {
  let [, , , , registerListener] = useContext(DataContexts[context])

  return useEffect(() => {
    if (!viewPath) return
    return registerListener({ listener, viewPath })
  }, []) // eslint-disable-line
}

if (process.env.NODE_ENV === 'development') {
  let isArray = Array.isArray
  Array.isArray = (maybeArray) => {
    try {
      return isArray(maybeArray) || `${maybeArray}` === 'proxyString'
    } catch (error) {
      return false
    }
  }
}
export function useData({
  path = null,
  context = 'default',
  formatIn = null,
  formatOut = null,
  validate = null,
  validateRequired = false,
  viewPath = null,
} = {}) {
  let [data, dispatch, onSubmit, originalValue] = useContext(
    DataContexts[context] || DataContexts.default
  )
  let touched = useRef(false)

  let [value, isValidInitial, isValid] = useMemo(() => {
    let rawValue = path ? get(data, path) : data

    let value = rawValue
    if (path && formatIn) {
      try {
        value = fromFormat[formatIn](rawValue, data)
      } catch (error) {
        if (process.env.NODE_ENV === 'development') {
          log({
            type: 'views/data/runtime-formatIn',
            viewPath,
            context,
            formatIn,
            message: `"${formatIn}" function failed to run on Data/format.js.`,
            error,
          })
        }
      }
    }

    let isValidInitial = true
    if (validate) {
      try {
        isValidInitial = !!fromValidate[validate](rawValue, value, data)
      } catch (error) {
        if (process.env.NODE_ENV === 'development') {
          log({
            type: 'views/data/runtime-validate',
            viewPath,
            context,
            validate,
            message: `"${validate}" function failed to run on Data/validate.js.`,
            error,
          })
        }
      }
    }
    let isValid =
      touched.current || (validateRequired && data._forceRequired)
        ? isValidInitial
        : true

    return [value, isValidInitial, isValid]
  }, [data, formatIn, path, validate, validateRequired]) // eslint-disable-line
  // ignore context and viewPath

  let memo = useMemo(
    () => {
      if (!data) return {}

      function onChange(value, changePath = path) {
        touched.current = true

        if (typeof value === 'function') {
          dispatch({ type: SET_FN, fn: value })
        } else if (!changePath) {
          dispatch({ type: RESET, value })
        } else {
          let valueSet = value
          if (formatOut) {
            try {
              valueSet = fromFormat[formatOut](value, data)
            } catch (error) {
              if (process.env.NODE_ENV === 'development') {
                log({
                  type: 'views/data/runtime-formatOut',
                  viewPath,
                  context,
                  formatOut,
                  message: `"${formatIn}" function failed to run on Data/format.js.`,
                  error,
                })
              }
            }
          }

          dispatch({
            type: SET,
            path: changePath,
            value: valueSet,
          })
        }
      }

      return {
        onChange,
        onSubmit,
        value,
        originalValue,
        isSubmitting: data._isSubmitting,
        isValid,
        isValidInitial,
        isInvalid: !isValid,
        isInvalidInitial: !isValidInitial,
      }
    },
    // eslint-disable-next-line
    [
      dispatch,
      path,
      value,
      isValidInitial,
      isValid,
      formatOut,
      data?._isSubmitting, // eslint-disable-line
      onSubmit,
    ]
  )
  // ignore data - this can cause rendering issues though

  if (process.env.NODE_ENV === 'development') {
    // source: https://github.com/TheWWWorm/proxy-mock/blob/master/index.js
    function getProxyMock(
      specifics = {
        value: 'proxyString',
      },
      name = 'proxyMock',
      wrap
    ) {
      function _target() {
        getProxyMock()
      }

      let target = wrap ? wrap(name, _target) : _target

      target[Symbol.toPrimitive] = (hint, b, c) => {
        if (hint === 'string') {
          return 'proxyString'
        } else if (hint === 'number') {
          return 42
        }
        return '1337'
      }
      target[Symbol.iterator] = function* () {
        yield getProxyMock({}, `${name}.Symbol(Symbol.iterator)`, wrap)
      }

      let length = 3

      return new Proxy(target, {
        get(obj, key) {
          key = key.toString()
          if (key === 'forEach') {
            return function forEach(fn) {
              Array(length)
                .fill(0)
                .forEach((_, i) => {
                  let item = getProxyMock({}, `${name}`, wrap)
                  fn(item, i, [item])
                })
            }
          }
          if (key === 'map' || key === 'filter') {
            return function map(fn) {
              return Array(length)
                .fill(0)
                .map((_, i) => {
                  let item = getProxyMock({}, `${name}`, wrap)
                  return fn(item, i, [item])
                })
            }
          }
          if (key === 'find') {
            return function map(fn) {
              let item = getProxyMock({}, `${name}`, wrap)
              return fn(item, 0, [item])
            }
          }
          if (key === 'length') {
            return length
          }
          if (key === 'lat') {
            return 35.3877847
          }
          if (key === 'lng') {
            return 24.048761
          }
          if (/date/.test(key)) {
            return '2021-03-22'
          }
          if (/time/.test(key)) {
            return '11:50'
          }
          if (key === 'text') {
            return 'proxyString'
          }
          if (key === 'id') {
            return null
          }
          if (specifics.hasOwnProperty(key)) {
            return specifics[key]
          }
          if (key === 'Symbol(Symbol.toPrimitive)') {
            return obj[Symbol.toPrimitive]
          }
          if (key === 'Symbol(Symbol.iterator)') {
            return obj[Symbol.iterator]
          }
          if (!obj.hasOwnProperty(key)) {
            obj[key] = getProxyMock({}, `${name}.${key}`, wrap)
          }

          return obj[key]
        },
        apply() {
          return getProxyMock({}, `${name}`, wrap)
        },
      })
    }

    function getDataMock() {
      let value = getProxyMock()
      return {
        onChange() {},
        onSubmit() {},
        value,
        originalValue: value,
        isSubmitting: false,
        isValid: true,
        isValidInitial: true,
        isInvalid: false,
        isInvalidInitial: false,
      }
    }

    if (!(context in DataContexts)) {
      log({
        type: 'views/data/missing-data-provider',
        viewPath,
        context,
        message: `"${context}" isn't a valid Data context. Add a <DataProvider context="${context}" value={data}> in the component that defines the context for this view. You're using a mock now.`,
      })
      return getDataMock()
    }

    if (!data) {
      log({
        type: 'views/data/missing-data-for-provider',
        viewPath,
        context,
        message: `"${context}" doesn't have data. You're using a mock now.`,
      })
      return getDataMock()
    }

    if (formatIn && !(formatIn in fromFormat)) {
      log({
        type: 'views/data/invalid-formatIn',
        viewPath,
        context,
        formatIn,
        message: `"${formatIn}" function doesn't exist or is not exported in Data/format.js. You're using a mock now.`,
      })
      return getDataMock()
    }

    if (formatOut && !(formatOut in fromFormat)) {
      log({
        type: 'views/data/invalid-formatOut',
        viewPath,
        context,
        formatOut,
        message: `"${formatOut}" function doesn't exist or is not exported in Data/format.js. You're using a mock now.`,
      })
      return getDataMock()
    }

    if (validate && !(validate in fromValidate)) {
      log({
        type: 'views/data/invalid-validate',
        viewPath,
        context,
        validate,
        message: `"${validate}" function doesn't exist or is not exported in Data/validators.js. You're using a mock now.`,
      })
      return getDataMock()
    }
  }

  return memo
}

export function useSetFlowToBasedOnData({
  context,
  data,
  fetching,
  error,
  viewPath,
  pause = false,
}) {
  let flow = useFlow()
  let setFlowTo = useSetFlowTo(viewPath, true)
  let contentPath = useMemo(() => {
    if (flow.flow[viewPath] === 'Content') {
      let result = Object.entries(flow.flow).find(([key]) =>
        key.includes(`${viewPath}/Content`)
      )
      if (result) {
        let [key, value] = result
        return `${key.replace(`${viewPath}/`, '')}/${value}`
      }
    }

    return 'Content'
  }, []) // eslint-disable-line
  // ignore flow.flow

  useEffect(() => {
    let view = contentPath
    if (error) {
      view = 'Error'
    } else if (pause && !data) {
      view = 'No'
    } else if (fetching) {
      view = 'Loading'
    } else if (isEmpty(context, data)) {
      view = 'Empty'
    }

    // TODO do we need No? I think we need it, even if it is used once only
    // otherwise we'll need to render any of the other states
    setFlowTo(normalizePath(viewPath, view))
  }, [data, error]) // eslint-disable-line
  // ignore setFlowTo and props.viewPath
}

function isEmpty(context, data) {
  if (!data) return true
  let value = data[context]
  return Array.isArray(value) ? value.length === 0 : !value
}

let logQueue = []
let logTimeout = null
function log(stuff) {
  logQueue.push(stuff)
  clearTimeout(logTimeout)
  logTimeout = setTimeout(() => {
    if (logQueue.length > 0) {
      console.log({
        type: 'views/data',
        warnings: logQueue,
      })
      logQueue = []
    }
  }, 500)
}
