// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react-dom parses react-dom Action 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

const Action = props => {
  return props.check ? (
    <button
      data-test-id={props['data-test-id'] || 'Vertical'}
      onClick={props.clickMe}
      className={styles.h18or678}
    >
      <div data-test-id=\\"Action.Text\\">click me</div>
      {props.children}
    </button>
  ) : null;
};

export default Action;
"
`;

exports[`react-dom parses react-dom AnimatedButton 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Animated from 'react-dom-animated';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

const AnimatedButton = props => {
  return (
    <Animated.button
      data-test-id={props['data-test-id'] || 'Vertical'}
      onClick={props.onClick}
      className={styles.h18or678}
      style={{ opacity: props.opacity }}
    >
      <div data-test-id=\\"AnimatedButton.Text\\">hey</div>
      {props.children}
    </Animated.button>
  );
};

export default AnimatedButton;
"
`;

exports[`react-dom parses react-dom BackgroundImage 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Animated from 'react-dom-animated';
import css from 'glam';
const styles = {
  h1omhxf4: css('css-1lgf2gr', [], function inlineCss() {
    return [
      \`.css-1lgf2gr { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column;
background-image: url(\\"https://viewsdx.com/image.jpg\\"); }\`,
    ];
  }),
  h1peh4ml: css('css-ii8p9n', [], function inlineCss() {
    return [
      \`.css-ii8p9n { -webkit-flex-direction: row; -ms-flex-direction: row; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row;
background-size: contain; }\`,
    ];
  }),
};

const BackgroundImage = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={styles.h1omhxf4}
    >
      <Animated.div
        data-test-id=\\"BackgroundImage.Horizontal\\"
        className={styles.h1peh4ml}
        style={{ backgroundImage: \`url(\${props.backgroundImage})\` }}
      />
      {props.children}
    </div>
  );
};

export default BackgroundImage;
"
`;

exports[`react-dom parses react-dom BoxShadow 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Animated from 'react-dom-animated';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
  h18mfro8: css('css-16jqtdw', [], function inlineCss() {
    return [
      \`.css-16jqtdw { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column;
box-shadow: 0px 8px 15px 0px rgba(0,0,0,0.1); }\`,
    ];
  }),
};

const BoxShadow = props => {
  return (
    <Animated.div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={styles.h18or678}
      style={{ boxShadow: \`10px 5px 2px \${props.color}\` }}
    >
      <div data-test-id=\\"BoxShadow.Vertical:1\\" className={styles.h18mfro8} />
      {props.children}
    </Animated.div>
  );
};

export default BoxShadow;
"
`;

exports[`react-dom parses react-dom Form 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <form
        data-test-id={props['data-test-id'] || 'Form'}
        onSubmit={() => props.onSubmit(state)}
        className={styles.h18or678}
      >
        <input
          type=\\"text\\"
          onChange={event => this.setState({ name: event.target.value })}
          value={state.name}
          data-test-id=\\"Form.Name\\"
          autoFocus={true}
        />
        <input
          type=\\"text\\"
          onChange={event => this.setState({ surname: event.target.value })}
          value={state.surname}
          data-test-id=\\"Form.Surname\\"
        />
        <input
          type=\\"password\\"
          onChange={event => this.setState({ password: event.target.value })}
          value={state.password}
          data-test-id=\\"Form.Password\\"
        />
        <input
          type=\\"email\\"
          onChange={event => this.setState({ email: event.target.value })}
          value={state.email}
          data-test-id=\\"Form.Email\\"
          defaultValue=\\"morph@viewsdx.com\\"
        />
        <button
          data-test-id=\\"Form.Button\\"
          onClick={() => props.onSubmit(state)}
          className={styles.h18or678}
        >
          <div data-test-id=\\"Form.Text\\">Send!</div>
        </button>
        {props.children}
      </form>
    );
  }
}

export default Form;
"
`;

exports[`react-dom parses react-dom GoTo 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

const GoTo = props => {
  return (
    <a
      href=\\"https://viewsdx.com\\"
      rel=\\"noopener noreferrer\\"
      target=\\"_blank\\"
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={styles.h18or678}
    >
      <div data-test-id=\\"GoTo.Text\\">Go to ViewsDX website!</div>
      {props.children}
    </a>
  );
};

export default GoTo;
"
`;

exports[`react-dom parses react-dom Hover 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h1mc7g7i: css('css-i58qmr', [], function inlineCss() {
    return [
      \`.css-i58qmr { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column;
background-color: black; }\`,
      \`.css-i58qmr:hover { background-color: white; }\`,
    ];
  }),
  h1mgvy2v: css('css-9glvsj', [], function inlineCss() {
    return [
      \`.css-9glvsj { color: white; }\`,
      \`.css-9glvsj:hover { color: black; }\`,
    ];
  }),
};

const Hover = props => {
  return (
    <button
      data-test-id={props['data-test-id'] || 'Button'}
      onClick={props.onClick}
      className={styles.h1mc7g7i}
    >
      <div data-test-id=\\"Hover.Text\\" className={styles.h1mgvy2v}>
        Hey!
      </div>
      {props.children}
    </button>
  );
};

export default Hover;
"
`;

exports[`react-dom parses react-dom HoverProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h1mc7g7i: css('css-i58qmr', [], function inlineCss() {
    return [
      \`.css-i58qmr { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column;
background-color: black; }\`,
      \`.css-i58qmr:hover { background-color: white; }\`,
    ];
  }),
  h1mgvy2v: css('css-9glvsj', [], function inlineCss() {
    return [
      \`.css-9glvsj { color: white; }\`,
      \`.css-9glvsj:hover { color: black; }\`,
    ];
  }),
};

const HoverProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <button
      data-test-id={props['data-test-id'] || 'Button'}
      onClick={props.onClick}
      className={styles.h1mc7g7i}
    >
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'white', fillHover: 'black' }
          )
        : null}
      <div data-test-id=\\"HoverProxy.Text\\" className={styles.h1mgvy2v}>
        Hey!
      </div>
    </button>
  );
};

export default HoverProxy;
"
`;

exports[`react-dom parses react-dom JustText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const JustText = props => {
  return <div data-test-id={props['data-test-id'] || 'Text'}>hey!</div>;
};

export default JustText;
"
`;

exports[`react-dom parses react-dom ListOfButtons 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

const ListOfButtons = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'List'}
      className={styles.h18or678}
    >
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <button
            data-test-id=\\"ListOfButtons.Vertical\\"
            onClick={props.onClick}
            className={styles.h18or678}
            key={index}
          >
            <div
              data-test-id=\\"ListOfButtons.Text\\"
              style={{ color: item.color }}
            >
              {index}
            </div>
          </button>
        ))}
      {props.children}
    </div>
  );
};

export default ListOfButtons;
"
`;

exports[`react-dom parses react-dom ListOfSomething 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

const ListOfSomething = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'List'}
      className={styles.h18or678}
    >
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <div
            data-test-id=\\"ListOfSomething.Text\\"
            dataIndex={index}
            style={{ color: item.color }}
            key={index}
          >
            {index}
          </div>
        ))}
      {props.children}
    </div>
  );
};

export default ListOfSomething;
"
`;

exports[`react-dom parses react-dom NameIsType 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const NameIsType = props => {
  return <div data-test-id={props['data-test-id'] || 'Texto'}>iam</div>;
};

export default NameIsType;
"
`;

exports[`react-dom parses react-dom NestedRoutes 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-dom';
import { Route } from 'react-router-dom';
import Topic from './Topic.view.js';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

const NestedRoutes = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Topics'}
      className={styles.h18or678}
    >
      <div data-test-id=\\"NestedRoutes.Text\\">topics</div>
      <Link
        to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
        data-test-id=\\"NestedRoutes.Link\\"
        className={styles.h18or678}
      >
        <div data-test-id=\\"NestedRoutes.Text:1\\">Rendering with React</div>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps => (
          <Topic data-test-id=\\"NestedRoutes.Topic\\" {...routeProps} />
        )}
      />
      {props.children}
    </div>
  );
};

export default withRouter(NestedRoutes);
"
`;

exports[`react-dom parses react-dom Print 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
  h12h5uqm: css('css-kbgujp', [], function inlineCss() {
    return [
      \`@media print {
    .css-kbgujp {
        display: none
    }
}\`,
    ];
  }),
};

const Print = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={styles.h18or678}
    >
      <div data-test-id=\\"Print.Text\\" className={styles.h12h5uqm}>
        not in print
      </div>
      <div data-test-id=\\"Print.Text:1\\">hey</div>
      {props.children}
    </div>
  );
};

export default Print;
"
`;

exports[`react-dom parses react-dom ProxyTest 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
  hnpb55i: css('css-sw3yj', [], function inlineCss() {
    return [
      \`.css-sw3yj { -webkit-flex-direction: row; -ms-flex-direction: row; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; }\`,
    ];
  }),
};

const ProxyTest = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={styles.h18or678}
    >
      <div data-test-id=\\"ProxyTest.Horizontal\\" className={styles.hnpb55i}>
        {props.bla && childrenArray[props.childrenProxyMap['Something']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['Something']],
              { onClick: props.onClickRemapped }
            )
          : null}
      </div>
      {props.childrenProxyMap && childrenArray[props.childrenProxyMap['View1']]}
    </div>
  );
};

export default ProxyTest;
"
`;

exports[`react-dom parses react-dom Scope 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  ha1tv9a: css('css-jk0pkr', [], function inlineCss() {
    return [\`.css-jk0pkr { color: red; }\`];
  }),
};

const Scope = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Text'}
      className={styles.ha1tv9a}
    >
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue ? props.blue : '1 red'}
    </div>
  );
};

export default Scope;
"
`;

exports[`react-dom parses react-dom ScopePopup 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

const ScopePopup = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Popup'}
      animate=\\"pop\\"
      className={styles.h18or678}
    >
      <button
        data-test-id=\\"ScopePopup.Toggle\\"
        onClick={props.toggle}
        className={styles.h18or678}
      >
        <div data-test-id=\\"ScopePopup.Text\\">toggle popup</div>
      </button>
      {props.children}
    </div>
  );
};

export default ScopePopup;
"
`;

exports[`react-dom parses react-dom ScopePopup2 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

const ScopePopup2 = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Popup'}
      className={styles.h18or678}
    >
      <button
        data-test-id=\\"ScopePopup2.Toggle\\"
        onClick={props.toggle}
        className={styles.h18or678}
      >
        <div data-test-id=\\"ScopePopup2.Text\\">toggle popup</div>
      </button>
      {props.children}
    </div>
  );
};

export default ScopePopup2;
"
`;

exports[`react-dom parses react-dom Teleport 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-dom';
import css from 'glam';
const styles = {
  hnpb55i: css('css-sw3yj', [], function inlineCss() {
    return [
      \`.css-sw3yj { -webkit-flex-direction: row; -ms-flex-direction: row; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; }\`,
    ];
  }),
};

const Teleport = props => {
  return (
    <Link
      to=\\"..\\"
      data-test-id={props['data-test-id'] || 'Horizontal'}
      className={styles.hnpb55i}
    >
      <div data-test-id=\\"Teleport.Text\\">go back</div>
      {props.children}
    </Link>
  );
};

export default Teleport;
"
`;

exports[`react-dom parses react-dom Test 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';

const Test = props => {
  return (
    <Custom
      data-test-id={props['data-test-id'] || 'Custom'}
      stuff=\\"eqweqw\\"
      childrenProxyMap={{ Something: 0, Another: 1 }}
    >
      <div data-test-id=\\"Test.Something\\">v1vh1t1</div>
      <div data-test-id=\\"Test.Another\\">inside custom</div>
      {props.children}
    </Custom>
  );
};

export default Test;
"
`;

exports[`react-dom parses react-dom TestIds 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

const TestIds = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'App'}
      className={styles.h18or678}
    >
      <div data-test-id=\\"TestIds.Text\\">1</div>
      <div data-test-id=\\"TestIds.Text:1\\">2</div>
      <External data-test-id=\\"TestIds.External\\" />
      <div data-test-id=\\"TestIds.Name\\">name</div>
      {props.children}
    </div>
  );
};

export default TestIds;
"
`;

exports[`react-dom parses react-dom Toggle 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const Toggle = props => {
  return <div data-test-id={props['data-test-id'] || 'Text'}>NOPE</div>;
};

export default Toggle;
"
`;

exports[`react-dom parses react-dom UseCaptureEmail 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h10b81ay: css('css-17byui2', [], function inlineCss() {
    return [
      \`.css-17byui2 { border: 1px solid black;
color: red; }\`,
      \`.css-17byui2::placeholder { color: blue; }\`,
    ];
  }),
};

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"email\\"
        onChange={event => this.setState({ email: event.target.value })}
        value={state.email}
        data-test-id={props['data-test-id'] || 'Email'}
        defaultValue=\\"hey this is a default value\\"
        onSubmit={props.onSubmit}
        className={styles.h10b81ay}
      />
    );
  }
}

export default UseCaptureEmail;
"
`;

exports[`react-dom parses react-dom UseCaptureFile 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        onChange={event => this.setState({ file: event.target.value })}
        value={state.file}
        data-test-id={props['data-test-id'] || 'File'}
      />
    );
  }
}

export default UseCaptureFile;
"
`;

exports[`react-dom parses react-dom UseCaptureNumber 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"number\\"
        onChange={event => this.setState({ number: event.target.value })}
        value={state.number}
        data-test-id={props['data-test-id'] || 'Number'}
      />
    );
  }
}

export default UseCaptureNumber;
"
`;

exports[`react-dom parses react-dom UseCapturePhone 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"tel\\"
        onChange={event => this.setState({ phone: event.target.value })}
        value={state.phone}
        data-test-id={props['data-test-id'] || 'Phone'}
      />
    );
  }
}

export default UseCapturePhone;
"
`;

exports[`react-dom parses react-dom UseCaptureSecure 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"password\\"
        onChange={event => this.setState({ secure: event.target.value })}
        value={state.secure}
        data-test-id={props['data-test-id'] || 'Secure'}
      />
    );
  }
}

export default UseCaptureSecure;
"
`;

exports[`react-dom parses react-dom UseCaptureText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        onChange={event => this.setState({ text: event.target.value })}
        value={state.text}
        data-test-id={props['data-test-id'] || 'Text'}
      />
    );
  }
}

export default UseCaptureText;
"
`;

exports[`react-dom parses react-dom UseCaptureTextArea 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <textarea
        onChange={event =>
          this.setState({ captureTextArea: event.target.value })}
        value={state.captureTextArea}
        data-test-id={props['data-test-id'] || 'CaptureTextArea'}
      />
    );
  }
}

export default UseCaptureTextArea;
"
`;

exports[`react-dom parses react-dom UseCaptureTextManagedFromOutside 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        data-test-id={props['data-test-id'] || 'CaptureText'}
        value={props.external}
      />
    );
  }
}

export default UseCaptureTextManagedFromOutside;
"
`;

exports[`react-dom parses react-dom UseHorizontal 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h1d1hac2: css('css-vkz5lf', [], function inlineCss() {
    return [
      \`.css-vkz5lf { -webkit-flex-direction: row; -ms-flex-direction: row; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row;
border: 1px solid red; }\`,
    ];
  }),
};

const UseHorizontal = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Horizontal'}
      className={styles.h1d1hac2}
    >
      {props.children}
    </div>
  );
};

export default UseHorizontal;
"
`;

exports[`react-dom parses react-dom UseImage 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const UseImage = props => {
  return (
    <img
      data-test-id={props['data-test-id'] || 'Image'}
      src=\\"https://viewsdx.com/rocks.jpg\\"
    />
  );
};

export default UseImage;
"
`;

exports[`react-dom parses react-dom UseOfProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import css from 'glam';
const styles = {
  hnpb55i: css('css-sw3yj', [], function inlineCss() {
    return [
      \`.css-sw3yj { -webkit-flex-direction: row; -ms-flex-direction: row; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; }\`,
    ];
  }),
};

const UseOfProxy = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'App'}
      className={styles.hnpb55i}
    >
      <Button
        data-test-id=\\"UseOfProxy.Button\\"
        color=\\"red\\"
        icon=\\"MyIcon\\"
        text=\\"I'm a button!\\"
      />
      {props.children}
    </div>
  );
};

export default UseOfProxy;
"
`;

exports[`react-dom parses react-dom UseProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  hnpb55i: css('css-sw3yj', [], function inlineCss() {
    return [
      \`.css-sw3yj { -webkit-flex-direction: row; -ms-flex-direction: row; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; }\`,
    ];
  }),
};

const UseProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={props['data-test-id'] || 'Button'}
      className={styles.hnpb55i}
    >
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'red' }
          )
        : null}
      <div data-test-id=\\"UseProxy.Text\\">{props.text}</div>
    </div>
  );
};

export default UseProxy;
"
`;

exports[`react-dom parses react-dom UseRouter 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-dom';
import { BrowserRouter as Router } from 'react-router-dom';
import Topics from './Topics.view.js';
import css from 'glam';
const styles = {
  hnpb55i: css('css-sw3yj', [], function inlineCss() {
    return [
      \`.css-sw3yj { -webkit-flex-direction: row; -ms-flex-direction: row; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; }\`,
    ];
  }),
};

const UseRouter = props => {
  return (
    <Router>
      <div
        data-test-id={props['data-test-id'] || 'Horizontal'}
        className={styles.hnpb55i}
      >
        <Route
          path=\\"/\\"
          exact
          render={routeProps => (
            <Home
              data-test-id=\\"UseRouter.Home\\"
              heigth={props.height}
              width={360}
              {...routeProps}
            />
          )}
        />
        <Route
          path=\\"/about\\"
          render={routeProps => (
            <About data-test-id=\\"UseRouter.About\\" {...routeProps} />
          )}
        />
        <Route
          path=\\"/topics\\"
          render={routeProps => (
            <Topics data-test-id=\\"UseRouter.Topics\\" {...routeProps} />
          )}
        />
        {props.children}
      </div>
    </Router>
  );
};

export default UseRouter;
"
`;

exports[`react-dom parses react-dom UseSvg 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const UseSvg = props => {
  return (
    <svg data-test-id={props['data-test-id'] || 'Svg'} viewBox=\\"0 0 20 20\\">
      <path data-test-id=\\"UseSvg.SvgPath\\" d=\\"0 20\\" />
      <circle data-test-id=\\"UseSvg.SvgCircle\\" cx={10} cy={5} r={5} />
      <g data-test-id=\\"UseSvg.SvgGroup\\">
        <path data-test-id=\\"UseSvg.SvgPath:1\\" d={1} />
        <path data-test-id=\\"UseSvg.SvgPath:2\\" d={2} />
      </g>
      <text data-test-id=\\"UseSvg.SvgText\\" text=\\"hey\\" />
      {props.children}
    </svg>
  );
};

export default UseSvg;
"
`;

exports[`react-dom parses react-dom UseText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h1bamxte: css('css-1l09f9n', [], function inlineCss() {
    return [
      \`.css-1l09f9n { color: blue;
font-family: Montserrat, sans-serif;
font-size: 16px;
font-weight: 300; }\`,
    ];
  }),
};

const UseText = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Text'}
      className={styles.h1bamxte}
    >
      Hi, I'm some text
    </div>
  );
};

export default UseText;
"
`;

exports[`react-dom parses react-dom UseVertical 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  h1k352l5: css('css-nxb3y5', [], function inlineCss() {
    return [
      \`.css-nxb3y5 { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column;
background-color: red; }\`,
    ];
  }),
};

const UseVertical = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={styles.h1k352l5}
    >
      {props.children}
    </div>
  );
};

export default UseVertical;
"
`;

exports[`react-dom parses react-dom When 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  hnpb55i: css('css-sw3yj', [], function inlineCss() {
    return [
      \`.css-sw3yj { -webkit-flex-direction: row; -ms-flex-direction: row; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; }\`,
    ];
  }),
};

const When = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'App'}
      className={styles.hnpb55i}
    >
      {props.showMe ? (
        <div data-test-id=\\"When.Text\\">I may be hidden</div>
      ) : null}
      {props.children}
    </div>
  );
};

export default When;
"
`;

exports[`react-dom parses react-dom WhenList 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import css from 'glam';
const styles = {
  hnpb55i: css('css-sw3yj', [], function inlineCss() {
    return [
      \`.css-sw3yj { -webkit-flex-direction: row; -ms-flex-direction: row; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; }\`,
    ];
  }),
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

const WhenList = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'App'}
      className={styles.hnpb55i}
    >
      {props.showMe ? (
        <div data-test-id=\\"WhenList.List\\" className={styles.h18or678}>
          {Array.isArray(props.list) &&
            props.list.map((item, index) => (
              <div data-test-id=\\"WhenList.Text\\" key={index}>
                {item.thing}
              </div>
            ))}
        </div>
      ) : null}
      {props.children}
    </div>
  );
};

export default WhenList;
"
`;

exports[`react-dom parses react-dom WhenTopLevel 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const WhenTopLevel = props => {
  return props.showMe ? (
    <div data-test-id={props['data-test-id'] || 'Text'}>I may be hidden</div>
  ) : null;
};

export default WhenTopLevel;
"
`;

exports[`react-dom parses react-dom WithTest 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import * as fromTests from './WithTest.view.tests.js';
import css from 'glam';
const styles = {
  h18or678: css('css-1s0kfvh', [], function inlineCss() {
    return [
      \`.css-1s0kfvh { -webkit-flex-direction: column; -ms-flex-direction: column; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; }\`,
    ];
  }),
};

class TestsWithTest extends React.Component {
  constructor(props) {
    super(props);

    this.display = this.display.bind(this);
    this.tests = fromTests.make(this.display);

    this.state = {
      active: props.test,
      data: this.tests[props.test] || this.tests[this.tests._main],
    };
  }

  display(data, active) {
    this.setState(
      {
        active,
        data,
      },
      () => {
        if (typeof this.props.onInteraction === 'function') {
          this.props.onInteraction();
        }
      }
    );
  }

  componentWillReceiveProps(next) {
    if (this.state.active !== next.test) {
      this.setState({
        active: next.test,
        data: this.tests[next.test],
      });
    }
  }

  render() {
    const { props, state } = this;
    return (
      <WithTest
        width={props.width}
        height={props.height}
        {...state.data}
        {...clean(props)}
      />
    );
  }
}
function clean(props) {
  const ret = {};
  Object.keys(props)
    .filter(prop => prop !== 'height' && prop !== 'width' && prop !== 'test')
    .forEach(prop => (ret[prop] = props[prop]));
  return ret;
}
TestsWithTest.tests = fromTests.names;

const WithTest = props => {
  return (
    <button
      data-test-id={props['data-test-id'] || 'Vertical'}
      onClick={props.change}
      className={styles.h18or678}
    >
      <div data-test-id=\\"WithTest.Text\\">{props.text}</div>
      {props.children}
    </button>
  );
};

export default TestsWithTest;
"
`;

exports[`react-native parses react-native Action 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const Action = props => {
  return props.check ? (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.clickMe}
      underlayColor=\\"transparent\\"
    >
      <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
        <Text testID=\\"Action.Text\\">click me</Text>
        {props.children}
      </View>
    </TouchableWithoutFeedback>
  ) : null;
};

export default Action;
"
`;

exports[`react-native parses react-native AnimatedButton 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import {
  Animated,
  StyleSheet,
  Text,
  TouchableWithoutFeedback,
} from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const AnimatedButton = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <Animated.View
        testID={props['testID'] || 'Vertical'}
        style={[styles.h18pdll5, { opacity: props.opacity }]}
      >
        <Text testID=\\"AnimatedButton.Text\\">hey</Text>
        {props.children}
      </Animated.View>
    </TouchableWithoutFeedback>
  );
};

export default AnimatedButton;
"
`;

exports[`react-native parses react-native BackgroundImage 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, Image, StyleSheet } from 'react-native';
const styles = StyleSheet.create({
  h18pdll5: { flexDirection: 'column' },
  hp2cr4d: { flexDirection: 'row' },
});

const BackgroundImage = props => {
  return (
    <Image
      resizeMode=\\"cover\\"
      source={{ uri: 'https://viewsdx.com/image.jpg' }}
      testID={props['testID'] || 'Vertical'}
      style={styles.h18pdll5}
    >
      <Animated.Image
        resizeMode=\\"contain\\"
        source={{ uri: props.backgroundImage }}
        testID=\\"BackgroundImage.Horizontal\\"
        style={styles.hp2cr4d}
      />
      {props.children}
    </Image>
  );
};

export default BackgroundImage;
"
`;

exports[`react-native parses react-native BoxShadow 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h18pdll5: { flexDirection: 'column' },
  h141a9qm: {
    flexDirection: 'column',
    elevation: 1,
    shadowOffset: { width: 0, height: 8 },
    shadowRadius: 15,
    shadowOpacity: 1,
    shadowColor: 'rgba(0, 0, 0, 0.1)',
  },
});

const BoxShadow = props => {
  return (
    <Animated.View
      testID={props['testID'] || 'Vertical'}
      style={[
        styles.h18pdll5,
        {
          elevation: 1,
          shadowOffset: { width: 10, height: 5 },
          shadowRadius: 2,
          shadowOpacity: 1,
          shadowColor: props.color,
        },
      ]}
    >
      <View testID=\\"BoxShadow.Vertical:1\\" style={styles.h141a9qm} />
      {props.children}
    </Animated.View>
  );
};

export default BoxShadow;
"
`;

exports[`react-native parses react-native Form 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import {
  StyleSheet,
  Text,
  TextInput,
  TouchableWithoutFeedback,
  View,
} from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <View testID={props['testID'] || 'Form'} style={styles.h18pdll5}>
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Surname ? () => this.$Surname.focus() : null}
          returnKeyType={this.$Surname ? 'next' : 'go'}
          onChangeText={name => this.setState({ name })}
          ref={$e => (this.$name = $e)}
          value={state.name}
          keyboardType=\\"default\\"
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID=\\"Form.Name\\"
          autoFocus={true}
        />
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Password ? () => this.$Password.focus() : null}
          returnKeyType={this.$Password ? 'next' : 'go'}
          onChangeText={surname => this.setState({ surname })}
          ref={$e => (this.$surname = $e)}
          value={state.surname}
          keyboardType=\\"default\\"
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID=\\"Form.Surname\\"
        />
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Email ? () => this.$Email.focus() : null}
          returnKeyType={this.$Email ? 'next' : 'go'}
          onChangeText={password => this.setState({ password })}
          ref={$e => (this.$password = $e)}
          value={state.password}
          secureTextEntry
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID=\\"Form.Password\\"
        />
        <TextInput
          returnKeyType=\\"done\\"
          onChangeText={email => this.setState({ email })}
          ref={$e => (this.$email = $e)}
          value={state.email}
          keyboardType=\\"email-address\\"
          autoCorrect={false}
          defaultValue=\\"morph@viewsdx.com\\"
          underlineColorAndroid=\\"transparent\\"
          testID=\\"Form.Email\\"
          defaultValue=\\"morph@viewsdx.com\\"
        />
        <TouchableWithoutFeedback
          activeOpacity={0.7}
          onPress={() => props.onSubmit(state)}
          underlayColor=\\"transparent\\"
        >
          <View testID=\\"Form.Button\\" style={styles.h18pdll5}>
            <Text testID=\\"Form.Text\\">Send!</Text>
          </View>
        </TouchableWithoutFeedback>
        {props.children}
      </View>
    );
  }
}

export default Form;
"
`;

exports[`react-native parses react-native GoTo 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const GoTo = props => {
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
      <Text testID=\\"GoTo.Text\\">Go to ViewsDX website!</Text>
      {props.children}
    </View>
  );
};

export default GoTo;
"
`;

exports[`react-native parses react-native Hover 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({
  h1jrzrhl: { flexDirection: 'column', backgroundColor: 'black' },
  hyfo4ef: { color: 'white' },
});

const Hover = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <View testID={props['testID'] || 'Button'} style={styles.h1jrzrhl}>
        <Text testID=\\"Hover.Text\\" style={styles.hyfo4ef}>
          Hey!
        </Text>
        {props.children}
      </View>
    </TouchableWithoutFeedback>
  );
};

export default Hover;
"
`;

exports[`react-native parses react-native HoverProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({
  h1jrzrhl: { flexDirection: 'column', backgroundColor: 'black' },
  hyfo4ef: { color: 'white' },
});

const HoverProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <View testID={props['testID'] || 'Button'} style={styles.h1jrzrhl}>
        {props.childrenProxyMap &&
        childrenArray[props.childrenProxyMap['props.icon']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['props.icon']],
              { fill: 'white', fillHover: 'black' }
            )
          : null}
        <Text testID=\\"HoverProxy.Text\\" style={styles.hyfo4ef}>
          Hey!
        </Text>
      </View>
    </TouchableWithoutFeedback>
  );
};

export default HoverProxy;
"
`;

exports[`react-native parses react-native JustText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const JustText = props => {
  return <Text testID={props['testID'] || 'Text'}>hey!</Text>;
};

export default JustText;
"
`;

exports[`react-native parses react-native ListOfButtons 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import {
  Animated,
  StyleSheet,
  TouchableWithoutFeedback,
  View,
} from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ListOfButtons = props => {
  return (
    <View testID={props['testID'] || 'List'} style={styles.h18pdll5}>
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <TouchableWithoutFeedback
            activeOpacity={0.7}
            onPress={props.onClick}
            underlayColor=\\"transparent\\"
            key={index}
          >
            <View testID=\\"ListOfButtons.Vertical\\" style={styles.h18pdll5}>
              <Animated.Text
                testID=\\"ListOfButtons.Text\\"
                style={{ color: item.color }}
              >
                {index}
              </Animated.Text>
            </View>
          </TouchableWithoutFeedback>
        ))}
      {props.children}
    </View>
  );
};

export default ListOfButtons;
"
`;

exports[`react-native parses react-native ListOfSomething 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ListOfSomething = props => {
  return (
    <View testID={props['testID'] || 'List'} style={styles.h18pdll5}>
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <Animated.Text
            testID=\\"ListOfSomething.Text\\"
            dataIndex={index}
            style={{ color: item.color }}
            key={index}
          >
            {index}
          </Animated.Text>
        ))}
      {props.children}
    </View>
  );
};

export default ListOfSomething;
"
`;

exports[`react-native parses react-native NameIsType 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const NameIsType = props => {
  return <Text testID={props['testID'] || 'Texto'}>iam</Text>;
};

export default NameIsType;
"
`;

exports[`react-native parses react-native NestedRoutes 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-native';
import { Route } from 'react-router-native';
import Topic from './Topic.view.js';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const NestedRoutes = props => {
  return (
    <View testID={props['testID'] || 'Topics'} style={styles.h18pdll5}>
      <Text testID=\\"NestedRoutes.Text\\">topics</Text>
      <Link
        activeOpacity={0.7}
        to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
        underlayColor=\\"transparent\\"
      >
        <View testID=\\"NestedRoutes.Link\\" style={styles.h18pdll5}>
          <Text testID=\\"NestedRoutes.Text:1\\">Rendering with React</Text>
        </View>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps => (
          <Topic testID=\\"NestedRoutes.Topic\\" {...routeProps} />
        )}
      />
      {props.children}
    </View>
  );
};

export default withRouter(NestedRoutes);
"
`;

exports[`react-native parses react-native Print 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const Print = props => {
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
      <Text testID=\\"Print.Text\\">not in print</Text>
      <Text testID=\\"Print.Text:1\\">hey</Text>
      {props.children}
    </View>
  );
};

export default Print;
"
`;

exports[`react-native parses react-native ProxyTest 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h18pdll5: { flexDirection: 'column' },
  hp2cr4d: { flexDirection: 'row' },
});

const ProxyTest = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
      <View testID=\\"ProxyTest.Horizontal\\" style={styles.hp2cr4d}>
        {props.bla && childrenArray[props.childrenProxyMap['Something']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['Something']],
              { onClick: props.onClickRemapped }
            )
          : null}
      </View>
      {props.childrenProxyMap && childrenArray[props.childrenProxyMap['View1']]}
    </View>
  );
};

export default ProxyTest;
"
`;

exports[`react-native parses react-native Scope 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text } from 'react-native';
const styles = StyleSheet.create({ h1g2xbng: { color: 'red' } });

const Scope = props => {
  return (
    <Text testID={props['testID'] || 'Text'} style={styles.h1g2xbng}>
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue ? props.blue : '1 red'}
    </Text>
  );
};

export default Scope;
"
`;

exports[`react-native parses react-native ScopePopup 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ScopePopup = props => {
  return (
    <View
      testID={props['testID'] || 'Popup'}
      animate=\\"pop\\"
      style={styles.h18pdll5}
    >
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={props.toggle}
        underlayColor=\\"transparent\\"
      >
        <View testID=\\"ScopePopup.Toggle\\" style={styles.h18pdll5}>
          <Text testID=\\"ScopePopup.Text\\">toggle popup</Text>
        </View>
      </TouchableWithoutFeedback>
      {props.children}
    </View>
  );
};

export default ScopePopup;
"
`;

exports[`react-native parses react-native ScopePopup2 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ScopePopup2 = props => {
  return (
    <View testID={props['testID'] || 'Popup'} style={styles.h18pdll5}>
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={props.toggle}
        underlayColor=\\"transparent\\"
      >
        <View testID=\\"ScopePopup2.Toggle\\" style={styles.h18pdll5}>
          <Text testID=\\"ScopePopup2.Text\\">toggle popup</Text>
        </View>
      </TouchableWithoutFeedback>
      {props.children}
    </View>
  );
};

export default ScopePopup2;
"
`;

exports[`react-native parses react-native Teleport 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-native';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const Teleport = props => {
  return (
    <Link activeOpacity={0.7} to=\\"..\\" underlayColor=\\"transparent\\">
      <View testID={props['testID'] || 'Horizontal'} style={styles.hp2cr4d}>
        <Text testID=\\"Teleport.Text\\">go back</Text>
        {props.children}
      </View>
    </Link>
  );
};

export default Teleport;
"
`;

exports[`react-native parses react-native Test 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';
import { Text } from 'react-native';

const Test = props => {
  return (
    <Custom
      testID={props['testID'] || 'Custom'}
      stuff=\\"eqweqw\\"
      childrenProxyMap={{ Something: 0, Another: 1 }}
    >
      <Text testID=\\"Test.Something\\">v1vh1t1</Text>
      <Text testID=\\"Test.Another\\">inside custom</Text>
      {props.children}
    </Custom>
  );
};

export default Test;
"
`;

exports[`react-native parses react-native TestIds 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const TestIds = props => {
  return (
    <View testID={props['testID'] || 'App'} style={styles.h18pdll5}>
      <Text testID=\\"TestIds.Text\\">1</Text>
      <Text testID=\\"TestIds.Text:1\\">2</Text>
      <External testID=\\"TestIds.External\\" />
      <Text testID=\\"TestIds.Name\\">name</Text>
      {props.children}
    </View>
  );
};

export default TestIds;
"
`;

exports[`react-native parses react-native Toggle 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const Toggle = props => {
  return <Text testID={props['testID'] || 'Text'}>NOPE</Text>;
};

export default Toggle;
"
`;

exports[`react-native parses react-native UseCaptureEmail 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, TextInput } from 'react-native';
const styles = StyleSheet.create({
  hm4pcs: {
    borderColor: 'black',
    borderStyle: 'solid',
    borderWidth: 1,
    color: 'red',
  },
});

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        onSubmitEditing={props.onSubmit}
        returnKeyType=\\"go\\"
        onChangeText={email => this.setState({ email })}
        ref={$e => (this.$email = $e)}
        value={state.email}
        keyboardType=\\"email-address\\"
        autoCorrect={false}
        defaultValue=\\"hey this is a default value\\"
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'Email'}
        placeholderTextColor=\\"blue\\"
        defaultValue=\\"hey this is a default value\\"
        style={styles.hm4pcs}
      />
    );
  }
}

export default UseCaptureEmail;
"
`;

exports[`react-native parses react-native UseCaptureFile 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import CaptureFile from './CaptureFile.view.js';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <CaptureFile
        returnKeyType=\\"done\\"
        onChangeText={file => this.setState({ file })}
        ref={$e => (this.$file = $e)}
        value={state.file}
        keyboardType=\\"undefined\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'File'}
      />
    );
  }
}

export default UseCaptureFile;
"
`;

exports[`react-native parses react-native UseCaptureNumber 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={number => this.setState({ number })}
        ref={$e => (this.$number = $e)}
        value={state.number}
        keyboardType=\\"numeric\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'Number'}
      />
    );
  }
}

export default UseCaptureNumber;
"
`;

exports[`react-native parses react-native UseCapturePhone 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={phone => this.setState({ phone })}
        ref={$e => (this.$phone = $e)}
        value={state.phone}
        keyboardType=\\"phone-pad\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'Phone'}
      />
    );
  }
}

export default UseCapturePhone;
"
`;

exports[`react-native parses react-native UseCaptureSecure 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={secure => this.setState({ secure })}
        ref={$e => (this.$secure = $e)}
        value={state.secure}
        secureTextEntry
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'Secure'}
      />
    );
  }
}

export default UseCaptureSecure;
"
`;

exports[`react-native parses react-native UseCaptureText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={text => this.setState({ text })}
        ref={$e => (this.$text = $e)}
        value={state.text}
        keyboardType=\\"default\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'Text'}
      />
    );
  }
}

export default UseCaptureText;
"
`;

exports[`react-native parses react-native UseCaptureTextArea 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={captureTextArea => this.setState({ captureTextArea })}
        ref={$e => (this.$captureTextArea = $e)}
        value={state.captureTextArea}
        keyboardType=\\"undefined\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'CaptureTextArea'}
      />
    );
  }
}

export default UseCaptureTextArea;
"
`;

exports[`react-native parses react-native UseCaptureTextManagedFromOutside 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={captureText => this.setState({ captureText })}
        ref={$e => (this.$captureText = $e)}
        value={state.captureText}
        keyboardType=\\"default\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'CaptureText'}
        value={props.external}
      />
    );
  }
}

export default UseCaptureTextManagedFromOutside;
"
`;

exports[`react-native parses react-native UseHorizontal 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h13qdyyc: {
    flexDirection: 'row',
    borderColor: 'red',
    borderStyle: 'solid',
    borderWidth: 1,
  },
});

const UseHorizontal = props => {
  return (
    <View testID={props['testID'] || 'Horizontal'} style={styles.h13qdyyc}>
      {props.children}
    </View>
  );
};

export default UseHorizontal;
"
`;

exports[`react-native parses react-native UseImage 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Image } from 'react-native';

const UseImage = props => {
  return (
    <Image
      testID={props['testID'] || 'Image'}
      source={{ uri: 'https://viewsdx.com/rocks.jpg' }}
    />
  );
};

export default UseImage;
"
`;

exports[`react-native parses react-native UseOfProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseOfProxy = props => {
  return (
    <View testID={props['testID'] || 'App'} style={styles.hp2cr4d}>
      <Button
        testID=\\"UseOfProxy.Button\\"
        color=\\"red\\"
        icon=\\"MyIcon\\"
        text=\\"I'm a button!\\"
      />
      {props.children}
    </View>
  );
};

export default UseOfProxy;
"
`;

exports[`react-native parses react-native UseProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <View testID={props['testID'] || 'Button'} style={styles.hp2cr4d}>
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'red' }
          )
        : null}
      <Text testID=\\"UseProxy.Text\\">{props.text}</Text>
    </View>
  );
};

export default UseProxy;
"
`;

exports[`react-native parses react-native UseRouter 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-native';
import { NativeRouter as Router } from 'react-router-native';
import Topics from './Topics.view.js';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseRouter = props => {
  return (
    <Router>
      <View testID={props['testID'] || 'Horizontal'} style={styles.hp2cr4d}>
        <Route
          path=\\"/\\"
          exact
          render={routeProps => (
            <Home
              testID=\\"UseRouter.Home\\"
              heigth={props.height}
              width={360}
              {...routeProps}
            />
          )}
        />
        <Route
          path=\\"/about\\"
          render={routeProps => (
            <About testID=\\"UseRouter.About\\" {...routeProps} />
          )}
        />
        <Route
          path=\\"/topics\\"
          render={routeProps => (
            <Topics testID=\\"UseRouter.Topics\\" {...routeProps} />
          )}
        />
        {props.children}
      </View>
    </Router>
  );
};

export default UseRouter;
"
`;

exports[`react-native parses react-native UseSvg 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Svg, {
  Circle as SvgCircle,
  G as SvgGroup,
  Path as SvgPath,
  Text as SvgText,
} from 'react-native-svg';

const UseSvg = props => {
  return (
    <Svg testID={props['testID'] || 'Svg'} viewBox=\\"0 0 20 20\\">
      <SvgPath testID=\\"UseSvg.SvgPath\\" d=\\"0 20\\" />
      <SvgCircle testID=\\"UseSvg.SvgCircle\\" cx={10} cy={5} r={5} />
      <SvgGroup testID=\\"UseSvg.SvgGroup\\">
        <SvgPath testID=\\"UseSvg.SvgPath:1\\" d={1} />
        <SvgPath testID=\\"UseSvg.SvgPath:2\\" d={2} />
      </SvgGroup>
      <SvgText testID=\\"UseSvg.SvgText\\" text=\\"hey\\" />
      {props.children}
    </Svg>
  );
};

export default UseSvg;
"
`;

exports[`react-native parses react-native UseText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text } from 'react-native';
const styles = StyleSheet.create({
  h11t0jc: { color: 'blue', fontFamily: 'Montserrat-300', fontSize: 16 },
});

const UseText = props => {
  return (
    <Text testID={props['testID'] || 'Text'} style={styles.h11t0jc}>
      Hi, I'm some text
    </Text>
  );
};

export default UseText;
"
`;

exports[`react-native parses react-native UseVertical 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h1c5r919: { flexDirection: 'column', backgroundColor: 'red' },
});

const UseVertical = props => {
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h1c5r919}>
      {props.children}
    </View>
  );
};

export default UseVertical;
"
`;

exports[`react-native parses react-native When 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const When = props => {
  return (
    <View testID={props['testID'] || 'App'} style={styles.hp2cr4d}>
      {props.showMe ? <Text testID=\\"When.Text\\">I may be hidden</Text> : null}
      {props.children}
    </View>
  );
};

export default When;
"
`;

exports[`react-native parses react-native WhenList 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({
  hp2cr4d: { flexDirection: 'row' },
  h18pdll5: { flexDirection: 'column' },
});

const WhenList = props => {
  return (
    <View testID={props['testID'] || 'App'} style={styles.hp2cr4d}>
      {props.showMe ? (
        <View testID=\\"WhenList.List\\" style={styles.h18pdll5}>
          {Array.isArray(props.list) &&
            props.list.map((item, index) => (
              <Text testID=\\"WhenList.Text\\" key={index}>
                {item.thing}
              </Text>
            ))}
        </View>
      ) : null}
      {props.children}
    </View>
  );
};

export default WhenList;
"
`;

exports[`react-native parses react-native WhenTopLevel 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const WhenTopLevel = props => {
  return props.showMe ? (
    <Text testID={props['testID'] || 'Text'}>I may be hidden</Text>
  ) : null;
};

export default WhenTopLevel;
"
`;

exports[`react-native parses react-native WithTest 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import * as fromTests from './WithTest.view.tests.js';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

class TestsWithTest extends React.Component {
  constructor(props) {
    super(props);

    this.display = this.display.bind(this);
    this.tests = fromTests.make(this.display);

    this.state = {
      active: props.test,
      data: this.tests[props.test] || this.tests[this.tests._main],
    };
  }

  display(data, active) {
    this.setState(
      {
        active,
        data,
      },
      () => {
        if (typeof this.props.onInteraction === 'function') {
          this.props.onInteraction();
        }
      }
    );
  }

  componentWillReceiveProps(next) {
    if (this.state.active !== next.test) {
      this.setState({
        active: next.test,
        data: this.tests[next.test],
      });
    }
  }

  render() {
    const { props, state } = this;
    return (
      <WithTest
        width={props.width}
        height={props.height}
        {...state.data}
        {...clean(props)}
      />
    );
  }
}
function clean(props) {
  const ret = {};
  Object.keys(props)
    .filter(prop => prop !== 'height' && prop !== 'width' && prop !== 'test')
    .forEach(prop => (ret[prop] = props[prop]));
  return ret;
}
TestsWithTest.tests = fromTests.names;

const WithTest = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.change}
      underlayColor=\\"transparent\\"
    >
      <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
        <Text testID=\\"WithTest.Text\\">{props.text}</Text>
        {props.children}
      </View>
    </TouchableWithoutFeedback>
  );
};

export default TestsWithTest;
"
`;
