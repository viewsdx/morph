// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`e2e parses e2e Action 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const Action = {
  Vertical: get('Action.Vertical'),
  Text: get('Action.Text'),
  SubButton: get('Action.SubButton'),
};

export default Action;
",
}
`;

exports[`e2e parses e2e AnimatedButton 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const AnimatedButton = {
  Vertical: get('AnimatedButton.Vertical'),
  Text: get('AnimatedButton.Text'),
};

export default AnimatedButton;
",
}
`;

exports[`e2e parses e2e AppRegionDrag 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const AppRegionDrag = {
  Vertical: get('AppRegionDrag.Vertical'),
};

export default AppRegionDrag;
",
}
`;

exports[`e2e parses e2e BackgroundImage 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const BackgroundImage = {
  Vertical: get('BackgroundImage.Vertical'),
  Horizontal: get('BackgroundImage.Horizontal'),
};

export default BackgroundImage;
",
}
`;

exports[`e2e parses e2e BoxShadow 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const BoxShadow = {
  Vertical: get('BoxShadow.Vertical'),
  Vertical: get('BoxShadow.Vertical'),
  Vertical: get('BoxShadow.Vertical'),
};

export default BoxShadow;
",
}
`;

exports[`e2e parses e2e ClassName 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const ClassName = {
  Vertical: get('ClassName.Vertical'),
};

export default ClassName;
",
}
`;

exports[`e2e parses e2e Code 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const Code = {
  Vertical: get('Code.Vertical'),
  Text: get('Code.Text'),
};

export default Code;
",
}
`;

exports[`e2e parses e2e DynamicStylesApplyToBasicBlocksOnly 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const DynamicStylesApplyToBasicBlocksOnly = {
  Vertical: get('DynamicStylesApplyToBasicBlocksOnly.Vertical'),
  OnTop: get('DynamicStylesApplyToBasicBlocksOnly.OnTop'),
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
}
`;

exports[`e2e parses e2e EmptyText 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const EmptyText = {
  EmptyText: get('EmptyText.EmptyText'),
};

export default EmptyText;
",
}
`;

exports[`e2e parses e2e Form 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const Form = {
  Form: get('Form.Form'),
  Name: get('Form.Name'),
  Surname: get('Form.Surname'),
  Password: get('Form.Password'),
  Email: get('Form.Email'),
  Button: get('Form.Button'),
  Text: get('Form.Text'),
};

export default Form;
",
}
`;

exports[`e2e parses e2e GoTo 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const GoTo = {
  Vertical: get('GoTo.Vertical'),
  Text: get('GoTo.Text'),
};

export default GoTo;
",
}
`;

exports[`e2e parses e2e Hover 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const Hover = {
  Button: get('Hover.Button'),
  Text: get('Hover.Text'),
};

export default Hover;
",
}
`;

exports[`e2e parses e2e JustText 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const JustText = {
  Text: get('JustText.Text'),
};

export default JustText;
",
}
`;

exports[`e2e parses e2e ListOfSomething 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const ListOfSomething = {
  ListOfSomething: get('ListOfSomething.ListOfSomething'),
  Something: get('ListOfSomething.Something'),
};

export default ListOfSomething;
",
}
`;

exports[`e2e parses e2e ListWhen 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const ListWhen = {
  List: get('ListWhen.List'),
  Card: get('ListWhen.Card'),
};

export default ListWhen;
",
}
`;

exports[`e2e parses e2e LocalImage 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const LocalImage = {
  LocalImage: get('LocalImage.LocalImage', 'isCat'),
};

export default LocalImage;
",
}
`;

exports[`e2e parses e2e LocalImageSvg 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const LocalImageSvg = {
  LocalImageSvg: get('LocalImageSvg.LocalImageSvg'),
};

export default LocalImageSvg;
",
}
`;

exports[`e2e parses e2e LocalOrRemoteImageWhenCode 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const LocalOrRemoteImageWhenCode = {
  LocalOrRemoteImageWhenCode: get(
    'LocalOrRemoteImageWhenCode.LocalOrRemoteImageWhenCode'
  ),
};

export default LocalOrRemoteImageWhenCode;
",
}
`;

exports[`e2e parses e2e NameIsType 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const NameIsType = {
  Texto: get('NameIsType.Texto'),
};

export default NameIsType;
",
}
`;

exports[`e2e parses e2e NestedRoutes 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const NestedRoutes = {
  Topics: get('NestedRoutes.Topics'),
  Text: get('NestedRoutes.Text'),
  Link: get('NestedRoutes.Link'),
  Text: get('NestedRoutes.Text'),
  Topic: get('NestedRoutes.Topic'),
};

export default NestedRoutes;
",
}
`;

exports[`e2e parses e2e Print 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const Print = {
  Vertical: get('Print.Vertical'),
  Text: get('Print.Text'),
  Text: get('Print.Text'),
};

export default Print;
",
}
`;

exports[`e2e parses e2e ProxyTest 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const ProxyTest = {
  Vertical: get('ProxyTest.Vertical'),
  Horizontal: get('ProxyTest.Horizontal'),
};

export default ProxyTest;
",
}
`;

exports[`e2e parses e2e Scope 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const Scope = {
  Text: get(
    'Scope.Text',
    'notWhatMakesBlueAndSomethingGreen',
    'whatMakesBlue',
    'somethingGreen'
  ),
};

export default Scope;
",
}
`;

exports[`e2e parses e2e ScopeOnCustomView 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const ScopeOnCustomView = {
  Button: get('ScopeOnCustomView.Button', 'b', 'a'),
};

export default ScopeOnCustomView;
",
}
`;

exports[`e2e parses e2e ScopePopup 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const ScopePopup = {
  Popup: get('ScopePopup.Popup'),
  Toggle: get('ScopePopup.Toggle', 'whatMakesBlue', 'somethingGreen'),
  Text: get('ScopePopup.Text'),
};

export default ScopePopup;
",
}
`;

exports[`e2e parses e2e ScopePopup2 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const ScopePopup2 = {
  Popup: get('ScopePopup2.Popup'),
  Toggle: get('ScopePopup2.Toggle'),
  Text: get('ScopePopup2.Text'),
  Content: get('ScopePopup2.Content', 'isSuperVisible', 'isShown'),
};

export default ScopePopup2;
",
}
`;

exports[`e2e parses e2e SomeMissingStyle 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const SomeMissingStyle = {
  WindowControl: get('SomeMissingStyle.WindowControl'),
};

export default SomeMissingStyle;
",
}
`;

exports[`e2e parses e2e Teleport 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const Teleport = {
  Horizontal: get('Teleport.Horizontal'),
  Text: get('Teleport.Text'),
};

export default Teleport;
",
}
`;

exports[`e2e parses e2e Test 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const Test = {
  Custom: get('Test.Custom'),
  Something: get('Test.Something'),
  Another: get('Test.Another'),
};

export default Test;
",
}
`;

exports[`e2e parses e2e TestIds 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const TestIds = {
  App: get('TestIds.App'),
  Text: get('TestIds.Text'),
  Text: get('TestIds.Text'),
  External: get('TestIds.External'),
  Name: get('TestIds.Name'),
};

export default TestIds;
",
}
`;

exports[`e2e parses e2e TextInterpolation 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const TextInterpolation = {
  Vertical: get('TextInterpolation.Vertical'),
  Text: get('TextInterpolation.Text'),
};

export default TextInterpolation;
",
}
`;

exports[`e2e parses e2e Toggle 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const Toggle = {
  Text: get('Toggle.Text'),
};

export default Toggle;
",
}
`;

exports[`e2e parses e2e UseCaptureEmail 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseCaptureEmail = {
  Email: get('UseCaptureEmail.Email'),
};

export default UseCaptureEmail;
",
}
`;

exports[`e2e parses e2e UseCaptureFile 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseCaptureFile = {
  File: get('UseCaptureFile.File'),
};

export default UseCaptureFile;
",
}
`;

exports[`e2e parses e2e UseCaptureNumber 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseCaptureNumber = {
  Number: get('UseCaptureNumber.Number'),
};

export default UseCaptureNumber;
",
}
`;

exports[`e2e parses e2e UseCapturePhone 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseCapturePhone = {
  Phone: get('UseCapturePhone.Phone'),
};

export default UseCapturePhone;
",
}
`;

exports[`e2e parses e2e UseCaptureSecure 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseCaptureSecure = {
  Secure: get('UseCaptureSecure.Secure'),
};

export default UseCaptureSecure;
",
}
`;

exports[`e2e parses e2e UseCaptureText 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseCaptureText = {
  Text: get('UseCaptureText.Text'),
};

export default UseCaptureText;
",
}
`;

exports[`e2e parses e2e UseCaptureTextArea 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseCaptureTextArea = {
  CaptureTextArea: get('UseCaptureTextArea.CaptureTextArea'),
};

export default UseCaptureTextArea;
",
}
`;

exports[`e2e parses e2e UseCaptureTextManagedFromOutside 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseCaptureTextManagedFromOutside = {
  CaptureText: get('UseCaptureTextManagedFromOutside.CaptureText'),
};

export default UseCaptureTextManagedFromOutside;
",
}
`;

exports[`e2e parses e2e UseHorizontal 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseHorizontal = {
  Horizontal: get('UseHorizontal.Horizontal'),
};

export default UseHorizontal;
",
}
`;

exports[`e2e parses e2e UseImage 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseImage = {
  Image: get('UseImage.Image', 'another'),
};

export default UseImage;
",
}
`;

exports[`e2e parses e2e UseOfProxy 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseOfProxy = {
  App: get('UseOfProxy.App'),
  Button: get('UseOfProxy.Button'),
};

export default UseOfProxy;
",
}
`;

exports[`e2e parses e2e UseProxy 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseProxy = {
  Button: get('UseProxy.Button'),
  Text: get('UseProxy.Text'),
};

export default UseProxy;
",
}
`;

exports[`e2e parses e2e UseRouter 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseRouter = {
  Horizontal: get('UseRouter.Horizontal'),
  Home: get('UseRouter.Home'),
  About: get('UseRouter.About'),
  Topics: get('UseRouter.Topics'),
};

export default UseRouter;
",
}
`;

exports[`e2e parses e2e UseSvg 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseSvg = {
  Svg: get('UseSvg.Svg'),
  SvgPath: get('UseSvg.SvgPath'),
  SvgCircle: get('UseSvg.SvgCircle'),
  SvgGroup: get('UseSvg.SvgGroup'),
  SvgPath: get('UseSvg.SvgPath'),
  SvgPath: get('UseSvg.SvgPath'),
  SvgText: get('UseSvg.SvgText'),
};

export default UseSvg;
",
}
`;

exports[`e2e parses e2e UseText 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseText = {
  UseText: get('UseText.UseText'),
};

export default UseText;
",
}
`;

exports[`e2e parses e2e UseTextCustomFont 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseTextCustomFont = {
  UseTextCustomFont: get('UseTextCustomFont.UseTextCustomFont'),
  Normal: get('UseTextCustomFont.Normal'),
  Italic: get('UseTextCustomFont.Italic'),
};

export default UseTextCustomFont;
",
}
`;

exports[`e2e parses e2e UseVertical 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const UseVertical = {
  Vertical: get('UseVertical.Vertical'),
};

export default UseVertical;
",
}
`;

exports[`e2e parses e2e ViewNameIsntUsedInStyle 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const ViewNameIsntUsedInStyle = {
  ViewNameIsntUsedInStyle: get(
    'ViewNameIsntUsedInStyle.ViewNameIsntUsedInStyle'
  ),
};

export default ViewNameIsntUsedInStyle;
",
}
`;

exports[`e2e parses e2e When 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const When = {
  App: get('When.App'),
  Text: get('When.Text'),
};

export default When;
",
}
`;

exports[`e2e parses e2e WhenTopLevel 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const WhenTopLevel = {
  Text: get('WhenTopLevel.Text'),
};

export default WhenTopLevel;
",
}
`;

exports[`e2e parses e2e WithTest 1`] = `
Object {
  "code": "const get = (id, ...scopes) => () => {
  const el = browser.element(\`[data-test-id*=\\"\${id}|\\"]\`);

  scopes.forEach(scope => {
    el[scope] = () => browser.element(\`[data-test-id=\\"\${id}|\${scope}\\"]\`);
  });

  return el;
};

const WithTest = {
  Vertical: get('WithTest.Vertical'),
  Text: get('WithTest.Text'),
};

export default WithTest;
",
}
`;

exports[`react-dom parses react-dom Action 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SubButton from './SubButton.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h1azf9vn = css({
  color: 'red',
  '&:disabled, &.disabled': {
    color: 'blue',
  },
});

const Action = props => {
  return props.check ? (
    <button
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      onClick={props.clickMe}
      disabled={props.isDisabled}
      className={\`views-block \${Vertical_h1azf9vn}\`}
    >
      <span data-test-id={\`Action.Text|\`} className=\\"views-block\\">
        click me
      </span>
      <SubButton
        data-test-id=\\"Action.SubButton\\"
        isDisabled={true}
        className=\\"views-block\\"
      />
      {props.children}
    </button>
  ) : null;
};

export default Action;
",
  "fonts": Array [],
  "props": Object {
    "check": "string",
    "clickMe": "function",
    "isDisabled": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Action: react-dom parses react-dom Action debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SubButton from './SubButton.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h1azf9vn = css({
  color: 'red',
  '&:disabled, &.disabled': {
    color: 'blue',
  },
});

const Action = props => {
  return props.check ? (
    <button
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      onClick={props.clickMe}
      disabled={props.isDisabled}
      className={\`views-block \${Vertical_h1azf9vn}\`}
    >
      <span data-test-id={\`Action.Text|\`} className=\\"views-block\\">
        click me
      </span>
      <SubButton
        data-test-id=\\"Action.SubButton\\"
        isDisabled={true}
        className=\\"views-block\\"
      />
      {props.children}
    </button>
  ) : null;
};

export default Action;
",
  "fonts": Array [],
  "props": Object {
    "check": "string",
    "clickMe": "function",
    "isDisabled": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AnimatedButton 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Vertical = styled('button')(({ props }) => ({
  opacity: props.opacity,
}));

const AnimatedButton = props => {
  return (
    <Vertical
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      onClick={props.onClick}
      props={props}
      className=\\"views-block\\"
    >
      <span data-test-id={\`AnimatedButton.Text|\`} className=\\"views-block\\">
        hey
      </span>
      {props.children}
    </Vertical>
  );
};

export default AnimatedButton;
",
  "fonts": Array [],
  "props": Object {
    "onClick": "function",
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AnimatedButton: react-dom parses react-dom AnimatedButton debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Vertical = styled('button')(({ props }) => ({
  opacity: props.opacity,
}));

const AnimatedButton = props => {
  return (
    <Vertical
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      onClick={props.onClick}
      props={props}
      className=\\"views-block\\"
    >
      <span data-test-id={\`AnimatedButton.Text|\`} className=\\"views-block\\">
        hey
      </span>
      {props.children}
    </Vertical>
  );
};

export default AnimatedButton;
",
  "fonts": Array [],
  "props": Object {
    "onClick": "function",
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AppRegionDrag 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h1n973fw = css({
  WebkitAppRegion: 'drag',
  width: '92%',
  marginTop: 'auto',
});

const AppRegionDrag = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${Vertical_h1n973fw}\`}
    >
      {props.children}
    </div>
  );
};

export default AppRegionDrag;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AppRegionDrag: react-dom parses react-dom AppRegionDrag debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h1n973fw = css({
  WebkitAppRegion: 'drag',
  width: '92%',
  marginTop: 'auto',
});

const AppRegionDrag = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${Vertical_h1n973fw}\`}
    >
      {props.children}
    </div>
  );
};

export default AppRegionDrag;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom BackgroundImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';

const Vertical_h1q68ydz = css({
  backgroundImage: \\"url('https://viewsdx.com/image.jpg')\\",
});
const Horizontal = styled('div')(
  {
    flexDirection: 'row',
    backgroundSize: 'contain',
  },
  ({ props }) => ({
    backgroundImage: \`url(\${props.backgroundImage})\`,
  })
);

const BackgroundImage = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${Vertical_h1q68ydz}\`}
    >
      <Horizontal
        data-test-id={\`BackgroundImage.Horizontal|\`}
        props={props}
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default BackgroundImage;
",
  "fonts": Array [],
  "props": Object {
    "backgroundImage": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom BackgroundImage: react-dom parses react-dom BackgroundImage debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';

const Vertical_h1q68ydz = css({
  backgroundImage: \\"url('https://viewsdx.com/image.jpg')\\",
});
const Horizontal = styled('div')(
  {
    flexDirection: 'row',
    backgroundSize: 'contain',
  },
  ({ props }) => ({
    backgroundImage: \`url(\${props.backgroundImage})\`,
  })
);

const BackgroundImage = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${Vertical_h1q68ydz}\`}
    >
      <Horizontal
        data-test-id={\`BackgroundImage.Horizontal|\`}
        props={props}
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default BackgroundImage;
",
  "fonts": Array [],
  "props": Object {
    "backgroundImage": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom BoxShadow 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';

const Vertical = styled('div')(({ props }) => ({
  boxShadow: \`10px 5px 2px \${props.color}\`,
}));
const Vertical1 = styled('div')(({ props }) => ({
  boxShadow: \`10px 5px 10px \${props.color}\`,
}));
const Vertical_he0xt4e = css({ boxShadow: '0px 8px 15px 0px rgba(0,0,0,0.1)' });

const BoxShadow = props => {
  return (
    <Vertical
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      props={props}
      className=\\"views-block\\"
    >
      <Vertical1
        data-test-id={\`BoxShadow.Vertical:1|\`}
        props={props}
        className=\\"views-block\\"
      >
        <div
          data-test-id={\`BoxShadow.Vertical:2|\`}
          className={\`views-block \${Vertical_he0xt4e}\`}
        />
      </Vertical1>
      {props.children}
    </Vertical>
  );
};

export default BoxShadow;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom BoxShadow: react-dom parses react-dom BoxShadow debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';

const Vertical = styled('div')(({ props }) => ({
  boxShadow: \`10px 5px 2px \${props.color}\`,
}));
const Vertical1 = styled('div')(({ props }) => ({
  boxShadow: \`10px 5px 10px \${props.color}\`,
}));
const Vertical_he0xt4e = css({ boxShadow: '0px 8px 15px 0px rgba(0,0,0,0.1)' });

const BoxShadow = props => {
  return (
    <Vertical
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      props={props}
      className=\\"views-block\\"
    >
      <Vertical1
        data-test-id={\`BoxShadow.Vertical:1|\`}
        props={props}
        className=\\"views-block\\"
      >
        <div
          data-test-id={\`BoxShadow.Vertical:2|\`}
          className={\`views-block \${Vertical_he0xt4e}\`}
        />
      </Vertical1>
      {props.children}
    </Vertical>
  );
};

export default BoxShadow;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ClassName 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h118stgu = css({ backgroundColor: 'blue' });

const ClassName = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block hey \${Vertical_h118stgu}\`}
    >
      {props.children}
    </div>
  );
};

export default ClassName;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ClassName: react-dom parses react-dom ClassName debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h118stgu = css({ backgroundColor: 'blue' });

const ClassName = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block hey \${Vertical_h118stgu}\`}
    >
      {props.children}
    </div>
  );
};

export default ClassName;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Code 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';

const Vertical_h1cyenk5 = css({ backgroundColor: 'red' });
const Text = styled('span')(({ props }) => ({
  color: props.color,
}));

const Code = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      ref={$e => (this.$e = $e)}
      className={\`views-block \${Vertical_h1cyenk5}\`}
    >
      <Text
        data-test-id={\`Code.Text|\`}
        innerRef={props.refText}
        props={props}
        className=\\"views-block\\"
      >
        {props.text}
      </Text>
      {props.children}
    </div>
  );
};

export default Code;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
    "refText": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Code: react-dom parses react-dom Code debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled, { css } from 'react-emotion';

const Vertical_h1cyenk5 = css({ backgroundColor: 'red' });
const Text = styled('span')(({ props }) => ({
  color: props.color,
}));

const Code = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${Vertical_h1cyenk5}\`}
    >
      <Text data-test-id={\`Code.Text|\`} props={props} className=\\"views-block\\">
        {props.text}
      </Text>
      {props.children}
    </div>
  );
};

export default Code;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
    "refText": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom DynamicStylesApplyToBasicBlocksOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Vertical = styled('div')(({ props }) => ({
  height: props.height,
}));

const DynamicStylesApplyToBasicBlocksOnly = props => {
  return (
    <Vertical
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      props={props}
      className=\\"views-block\\"
    >
      <SomeThing
        data-test-id=\\"DynamicStylesApplyToBasicBlocksOnly.OnTop\\"
        height={props.height}
        className=\\"views-block\\"
      />
      {props.children}
    </Vertical>
  );
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom DynamicStylesApplyToBasicBlocksOnly: react-dom parses react-dom DynamicStylesApplyToBasicBlocksOnly debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Vertical = styled('div')(({ props }) => ({
  height: props.height,
}));

const DynamicStylesApplyToBasicBlocksOnly = props => {
  return (
    <Vertical
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      props={props}
      className=\\"views-block\\"
    >
      <SomeThing
        data-test-id=\\"DynamicStylesApplyToBasicBlocksOnly.OnTop\\"
        height={props.height}
        className=\\"views-block\\"
      />
      {props.children}
    </Vertical>
  );
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom EmptyText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const EmptyText = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'EmptyText'}|\`}
      className=\\"views-block\\"
    />
  );
};

export default EmptyText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom EmptyText: react-dom parses react-dom EmptyText debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const EmptyText = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'EmptyText'}|\`}
      className=\\"views-block\\"
    />
  );
};

export default EmptyText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Form 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <form
        data-test-id={\`\${props['data-test-id'] || 'Form'}|\`}
        onSubmit={() => props.onSubmit(state)}
        className=\\"views-block\\"
      >
        <input
          type=\\"text\\"
          onChange={event => this.setState({ name: event.target.value })}
          value={state.name}
          data-test-id={\`Form.Name|\`}
          autoFocus={true}
          className=\\"views-block\\"
        />
        <input
          type=\\"text\\"
          onChange={event => this.setState({ surname: event.target.value })}
          value={state.surname}
          data-test-id={\`Form.Surname|\`}
          className=\\"views-block\\"
        />
        <input
          type=\\"password\\"
          onChange={event => this.setState({ password: event.target.value })}
          value={state.password}
          data-test-id={\`Form.Password|\`}
          className=\\"views-block\\"
        />
        <input
          type=\\"email\\"
          onChange={event => this.setState({ email: event.target.value })}
          value={state.email}
          data-test-id={\`Form.Email|\`}
          defaultValue=\\"morph@viewsdx.com\\"
          className=\\"views-block\\"
        />
        <button
          data-test-id={\`Form.Button|\`}
          onClick={() => props.onSubmit(state)}
          className=\\"views-block\\"
        >
          <span data-test-id={\`Form.Text|\`} className=\\"views-block\\">
            Send!
          </span>
        </button>
        {props.children}
      </form>
    );
  }
}

export default Form;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Form: react-dom parses react-dom Form debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <form
        data-test-id={\`\${props['data-test-id'] || 'Form'}|\`}
        onSubmit={() => props.onSubmit(state)}
        className=\\"views-block\\"
      >
        <input
          type=\\"text\\"
          onChange={event => this.setState({ name: event.target.value })}
          value={state.name}
          tabIndex={-1}
          data-test-id={\`Form.Name|\`}
          className={\`views-block mousetrap\`}
        />
        <input
          type=\\"text\\"
          onChange={event => this.setState({ surname: event.target.value })}
          value={state.surname}
          tabIndex={-1}
          data-test-id={\`Form.Surname|\`}
          className={\`views-block mousetrap\`}
        />
        <input
          type=\\"password\\"
          onChange={event => this.setState({ password: event.target.value })}
          value={state.password}
          tabIndex={-1}
          data-test-id={\`Form.Password|\`}
          className={\`views-block mousetrap\`}
        />
        <input
          type=\\"email\\"
          onChange={event => this.setState({ email: event.target.value })}
          value={state.email}
          tabIndex={-1}
          data-test-id={\`Form.Email|\`}
          defaultValue=\\"morph@viewsdx.com\\"
          className={\`views-block mousetrap\`}
        />
        <button
          data-test-id={\`Form.Button|\`}
          onClick={() => props.onSubmit(state)}
          className=\\"views-block\\"
        >
          <span data-test-id={\`Form.Text|\`} className=\\"views-block\\">
            Send!
          </span>
        </button>
        {props.children}
      </form>
    );
  }
}

export default Form;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom GoTo 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const GoTo = props => {
  return (
    <a
      href=\\"https://viewsdx.com\\"
      rel=\\"noopener noreferrer\\"
      target=\\"_blank\\"
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`GoTo.Text|\`} className=\\"views-block\\">
        Go to ViewsDX website!
      </span>
      {props.children}
    </a>
  );
};

export default GoTo;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom GoTo: react-dom parses react-dom GoTo debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const GoTo = props => {
  return (
    <a
      href=\\"https://viewsdx.com\\"
      rel=\\"noopener noreferrer\\"
      target=\\"_blank\\"
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`GoTo.Text|\`} className=\\"views-block\\">
        Go to ViewsDX website!
      </span>
      {props.children}
    </a>
  );
};

export default GoTo;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Hover 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Button = styled('button')(({ props }) => ({
  backgroundColor: props.backgroundColor,
  '&:hover, &.hover': {
    backgroundColor: props.backgroundColorHover,
  },
}));
const Text = styled('span')(
  {
    color: 'white',
    [\`\${Button}:hover &, \${Button}.hover &\`]: {
      color: 'black',
    },
  },
  ({ props }) => ({
    fontSize: props.fontSize,
    [\`\${Button}:hover &, \${Button}.hover &\`]: {
      fontSize: props.fontSizeHover,
    },
  })
);

const Hover = props => {
  return (
    <Button
      data-test-id={\`\${props['data-test-id'] || 'Button'}|\`}
      onClick={props.onClick}
      props={props}
      className=\\"views-block\\"
    >
      <Text data-test-id={\`Hover.Text|\`} props={props} className=\\"views-block\\">
        Hey!
      </Text>
      {props.children}
    </Button>
  );
};

export default Hover;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColor": "string",
    "backgroundColorHover": "string",
    "fontSize": "number",
    "fontSizeHover": "number",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Hover: react-dom parses react-dom Hover debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Button = styled('button')(({ props }) => ({
  backgroundColor: props.backgroundColor,
  '&:hover, &.hover': {
    backgroundColor: props.backgroundColorHover,
  },
}));
const Text = styled('span')(
  {
    color: 'white',
    [\`\${Button}:hover &, \${Button}.hover &\`]: {
      color: 'black',
    },
  },
  ({ props }) => ({
    fontSize: props.fontSize,
    [\`\${Button}:hover &, \${Button}.hover &\`]: {
      fontSize: props.fontSizeHover,
    },
  })
);

const Hover = props => {
  return (
    <Button
      data-test-id={\`\${props['data-test-id'] || 'Button'}|\`}
      onClick={props.onClick}
      props={props}
      className=\\"views-block\\"
    >
      <Text data-test-id={\`Hover.Text|\`} props={props} className=\\"views-block\\">
        Hey!
      </Text>
      {props.children}
    </Button>
  );
};

export default Hover;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColor": "string",
    "backgroundColorHover": "string",
    "fontSize": "number",
    "fontSizeHover": "number",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom JustText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const JustText = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
      className=\\"views-block\\"
    >
      hey!
    </span>
  );
};

export default JustText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom JustText: react-dom parses react-dom JustText debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const JustText = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
      className=\\"views-block\\"
    >
      hey!
    </span>
  );
};

export default JustText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListOfSomething 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Something from './Something.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ListOfSomething = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'ListOfSomething'}|\`}
      className=\\"views-block\\"
    >
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Something
            {...item}
            key={item.id || index}
            data-test-id=\\"ListOfSomething.Something\\"
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  );
};

export default ListOfSomething;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListOfSomething: react-dom parses react-dom ListOfSomething debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Something from './Something.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ListOfSomething = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'ListOfSomething'}|\`}
      className=\\"views-block\\"
    >
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Something
            {...item}
            key={item.id || index}
            data-test-id=\\"ListOfSomething.Something\\"
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  );
};

export default ListOfSomething;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListWhen 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Card from './Card.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ListWhen = props => {
  return props.showMe ? (
    <div
      data-test-id={\`\${props['data-test-id'] || 'List'}|\`}
      className=\\"views-block\\"
    >
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Card
            {...item}
            key={item.id || index}
            data-test-id=\\"ListWhen.Card\\"
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  ) : null;
};

export default ListWhen;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListWhen: react-dom parses react-dom ListWhen debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Card from './Card.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ListWhen = props => {
  return props.showMe ? (
    <div
      data-test-id={\`\${props['data-test-id'] || 'List'}|\`}
      className=\\"views-block\\"
    >
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Card
            {...item}
            key={item.id || index}
            data-test-id=\\"ListWhen.Card\\"
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  ) : null;
};

export default ListWhen;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import garfieldPng from './garfield.png';
import chopperJpg from './chopper.jpg';

const LocalImage = props => {
  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'LocalImage'}|\${
        props.isCat ? 'isCat' : ''
      }\`}
      src={props.isCat ? garfieldPng : chopperJpg}
      className=\\"views-block\\"
    />
  );
};

export default LocalImage;
",
  "fonts": Array [],
  "props": Object {
    "isCat": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalImage: react-dom parses react-dom LocalImage debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const LocalImage = props => {
  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'LocalImage'}|\${
        props.isCat ? 'isCat' : ''
      }\`}
      src={
        props.isCat
          ? requireImage('./garfield.png')
          : requireImage('./chopper.jpg')
      }
      className=\\"views-block\\"
    />
  );
};

export default LocalImage;
",
  "fonts": Array [],
  "props": Object {
    "isCat": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalImageSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import chopperSvg from './chopper.svg';
import styled from 'react-emotion';

const LocalImageSvg1 = styled('img')({ width: 50 }, ({ props }) => ({
  height: props.height,
}));

const LocalImageSvg = props => {
  return (
    <LocalImageSvg1
      data-test-id={\`\${props['data-test-id'] || 'LocalImageSvg'}|\`}
      src={chopperSvg}
      props={props}
      className=\\"views-block\\"
    />
  );
};

export default LocalImageSvg;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalImageSvg: react-dom parses react-dom LocalImageSvg debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const LocalImageSvg1 = styled('img')({ width: 50 }, ({ props }) => ({
  height: props.height,
}));

const LocalImageSvg = props => {
  return (
    <LocalImageSvg1
      data-test-id={\`\${props['data-test-id'] || 'LocalImageSvg'}|\`}
      src={requireImage('./chopper.svg')}
      props={props}
      className=\\"views-block\\"
    />
  );
};

export default LocalImageSvg;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalOrRemoteImageWhenCode 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const LocalOrRemoteImageWhenCode = props => {
  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'LocalOrRemoteImageWhenCode'}|\`}
      src={props.source}
      className=\\"views-block\\"
    />
  );
};

export default LocalOrRemoteImageWhenCode;
",
  "fonts": Array [],
  "props": Object {
    "source": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalOrRemoteImageWhenCode: react-dom parses react-dom LocalOrRemoteImageWhenCode debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const LocalOrRemoteImageWhenCode = props => {
  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'LocalOrRemoteImageWhenCode'}|\`}
      src={props.source}
      className=\\"views-block\\"
    />
  );
};

export default LocalOrRemoteImageWhenCode;
",
  "fonts": Array [],
  "props": Object {
    "source": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom NameIsType 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const NameIsType = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Texto'}|\`}
      className=\\"views-block\\"
    >
      iam
    </span>
  );
};

export default NameIsType;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom NameIsType: react-dom parses react-dom NameIsType debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const NameIsType = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Texto'}|\`}
      className=\\"views-block\\"
    >
      iam
    </span>
  );
};

export default NameIsType;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom NestedRoutes 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-dom';
import { Route } from 'react-router-dom';
import Topic from './Topic.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const NestedRoutes = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Topics'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`NestedRoutes.Text|\`} className=\\"views-block\\">
        topics
      </span>
      <Link
        to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
        data-test-id={\`NestedRoutes.Link|\`}
        className=\\"views-block\\"
      >
        <span data-test-id={\`NestedRoutes.Text:1|\`} className=\\"views-block\\">
          Rendering with React
        </span>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps => (
          <Topic
            data-test-id=\\"NestedRoutes.Topic\\"
            {...routeProps}
            className=\\"views-block\\"
          />
        )}
      />
      {props.children}
    </div>
  );
};

export default withRouter(NestedRoutes);
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom NestedRoutes: react-dom parses react-dom NestedRoutes debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-dom';
import { Route } from 'react-router-dom';
import Topic from './Topic.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const NestedRoutes = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Topics'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`NestedRoutes.Text|\`} className=\\"views-block\\">
        topics
      </span>
      <Link
        to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
        data-test-id={\`NestedRoutes.Link|\`}
        className=\\"views-block\\"
      >
        <span data-test-id={\`NestedRoutes.Text:1|\`} className=\\"views-block\\">
          Rendering with React
        </span>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps => (
          <Topic
            data-test-id=\\"NestedRoutes.Topic\\"
            {...routeProps}
            className=\\"views-block\\"
          />
        )}
      />
      {props.children}
    </div>
  );
};

export default withRouter(NestedRoutes);
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Print 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Text_h1d06m5g = css({
  '@media print': {
    display: 'none',
  },
});

const Print = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <span
        data-test-id={\`Print.Text|\`}
        className={\`views-block \${Text_h1d06m5g}\`}
      >
        not in print
      </span>
      <span data-test-id={\`Print.Text:1|\`} className=\\"views-block\\">
        hey
      </span>
      {props.children}
    </div>
  );
};

export default Print;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Print: react-dom parses react-dom Print debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Text_h1d06m5g = css({
  '@media print': {
    display: 'none',
  },
});

const Print = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <span
        data-test-id={\`Print.Text|\`}
        className={\`views-block \${Text_h1d06m5g}\`}
      >
        not in print
      </span>
      <span data-test-id={\`Print.Text:1|\`} className=\\"views-block\\">
        hey
      </span>
      {props.children}
    </div>
  );
};

export default Print;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ProxyTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

const ProxyTest = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <div
        data-test-id={\`ProxyTest.Horizontal|\`}
        className={\`views-block \${Horizontal_h1qq1i2q}\`}
      >
        {props.bla && childrenArray[props.childrenProxyMap['Something']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['Something']],
              { onClick: props.onClickRemapped }
            )
          : null}
      </div>
      {props.childrenProxyMap && childrenArray[props.childrenProxyMap['View1']]}
    </div>
  );
};

export default ProxyTest;
",
  "fonts": Array [],
  "props": Object {
    "bla": "string",
    "onClickRemapped": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ProxyTest: react-dom parses react-dom ProxyTest debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

const ProxyTest = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <div
        data-test-id={\`ProxyTest.Horizontal|\`}
        className={\`views-block \${Horizontal_h1qq1i2q}\`}
      >
        {props.bla && childrenArray[props.childrenProxyMap['Something']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['Something']],
              { onClick: props.onClickRemapped }
            )
          : null}
      </div>
      {props.childrenProxyMap && childrenArray[props.childrenProxyMap['View1']]}
    </div>
  );
};

export default ProxyTest;
",
  "fonts": Array [],
  "props": Object {
    "bla": "string",
    "onClickRemapped": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Scope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Text = styled('span')(({ props }) => ({
  color: props.somethingGreen
    ? 'rgb(0,255,0)'
    : props.whatMakesBlue
      ? 'rgb(0,0,255)'
      : !props.whatMakesBlue && props.somethingGreen ? 'rgb(0,0,255)' : 'red',
}));

const Scope = props => {
  return (
    <Text
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\${
        props.somethingGreen
          ? 'somethingGreen'
          : props.whatMakesBlue
            ? 'whatMakesBlue'
            : !props.whatMakesBlue && props.somethingGreen
              ? 'notWhatMakesBlueAndSomethingGreen'
              : ''
      }\`}
      props={props}
      className=\\"views-block\\"
    >
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue
          ? props.blue
          : !props.whatMakesBlue && props.somethingGreen ? props.blue : '1 red'}
    </Text>
  );
};

export default Scope;
",
  "fonts": Array [],
  "props": Object {
    "blue": "string",
    "somethingGreen": "string",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Scope: react-dom parses react-dom Scope debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Text = styled('span')(({ props }) => ({
  color: props.somethingGreen
    ? 'rgb(0,255,0)'
    : props.whatMakesBlue
      ? 'rgb(0,0,255)'
      : !props.whatMakesBlue && props.somethingGreen ? 'rgb(0,0,255)' : 'red',
}));

const Scope = props => {
  return (
    <Text
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\${
        props.somethingGreen
          ? 'somethingGreen'
          : props.whatMakesBlue
            ? 'whatMakesBlue'
            : !props.whatMakesBlue && props.somethingGreen
              ? 'notWhatMakesBlueAndSomethingGreen'
              : ''
      }\`}
      props={props}
      className=\\"views-block\\"
    >
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue
          ? props.blue
          : !props.whatMakesBlue && props.somethingGreen ? props.blue : '1 red'}
    </Text>
  );
};

export default Scope;
",
  "fonts": Array [],
  "props": Object {
    "blue": "string",
    "somethingGreen": "string",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopeOnCustomView 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ScopeOnCustomView = props => {
  return (
    <Button
      data-test-id={props['data-test-id'] || 'Button'}
      label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
      another={props.a ? 1 : 0}
      more={props.a ? props.different : props.more}
      className=\\"views-block\\"
    >
      {props.children}
    </Button>
  );
};

export default ScopeOnCustomView;
",
  "fonts": Array [],
  "props": Object {
    "different": "string",
    "more": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopeOnCustomView: react-dom parses react-dom ScopeOnCustomView debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ScopeOnCustomView = props => {
  return (
    <Button
      data-test-id={props['data-test-id'] || 'Button'}
      label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
      another={props.a ? 1 : 0}
      more={props.a ? props.different : props.more}
      className=\\"views-block\\"
    >
      {props.children}
    </Button>
  );
};

export default ScopeOnCustomView;
",
  "fonts": Array [],
  "props": Object {
    "different": "string",
    "more": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ScopePopup = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Popup'}|\`}
      className=\\"views-block\\"
    >
      <button
        data-test-id={\`ScopePopup.Toggle|\${
          props.somethingGreen
            ? 'somethingGreen'
            : props.whatMakesBlue ? 'whatMakesBlue' : ''
        }\`}
        onClick={
          props.somethingGreen
            ? props.onClickGreen
            : props.whatMakesBlue ? props.onClickBlue : props.toggle
        }
        className=\\"views-block\\"
      >
        <span data-test-id={\`ScopePopup.Text|\`} className=\\"views-block\\">
          toggle popup
        </span>
      </button>
      {props.children}
    </div>
  );
};

export default ScopePopup;
",
  "fonts": Array [],
  "props": Object {
    "onClickBlue": "function",
    "onClickGreen": "function",
    "somethingGreen": "string",
    "toggle": "function",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup: react-dom parses react-dom ScopePopup debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ScopePopup = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Popup'}|\`}
      className=\\"views-block\\"
    >
      <button
        data-test-id={\`ScopePopup.Toggle|\${
          props.somethingGreen
            ? 'somethingGreen'
            : props.whatMakesBlue ? 'whatMakesBlue' : ''
        }\`}
        onClick={
          props.somethingGreen
            ? props.onClickGreen
            : props.whatMakesBlue ? props.onClickBlue : props.toggle
        }
        className=\\"views-block\\"
      >
        <span data-test-id={\`ScopePopup.Text|\`} className=\\"views-block\\">
          toggle popup
        </span>
      </button>
      {props.children}
    </div>
  );
};

export default ScopePopup;
",
  "fonts": Array [],
  "props": Object {
    "onClickBlue": "function",
    "onClickGreen": "function",
    "somethingGreen": "string",
    "toggle": "function",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup2 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Content = styled('div')(({ props }) => ({
  opacity: props.isShown ? 1 : props.isSuperVisible ? 3 : 0,
}));

const ScopePopup2 = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Popup'}|\`}
      className=\\"views-block\\"
    >
      <button
        data-test-id={\`ScopePopup2.Toggle|\`}
        onClick={props.toggle}
        className=\\"views-block\\"
      >
        <span data-test-id={\`ScopePopup2.Text|\`} className=\\"views-block\\">
          toggle popup
        </span>
      </button>
      <Content
        data-test-id={\`ScopePopup2.Content|\${
          props.isShown
            ? 'isShown'
            : props.isSuperVisible ? 'isSuperVisible' : ''
        }\`}
        scale={props.isShown ? 1 : props.isSuperVisible ? 2 : 0}
        props={props}
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default ScopePopup2;
",
  "fonts": Array [],
  "props": Object {
    "isShown": "string",
    "isSuperVisible": "string",
    "toggle": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup2: react-dom parses react-dom ScopePopup2 debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const Content = styled('div')(({ props }) => ({
  opacity: props.isShown ? 1 : props.isSuperVisible ? 3 : 0,
}));

const ScopePopup2 = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Popup'}|\`}
      className=\\"views-block\\"
    >
      <button
        data-test-id={\`ScopePopup2.Toggle|\`}
        onClick={props.toggle}
        className=\\"views-block\\"
      >
        <span data-test-id={\`ScopePopup2.Text|\`} className=\\"views-block\\">
          toggle popup
        </span>
      </button>
      <Content
        data-test-id={\`ScopePopup2.Content|\${
          props.isShown
            ? 'isShown'
            : props.isSuperVisible ? 'isSuperVisible' : ''
        }\`}
        scale={props.isShown ? 1 : props.isSuperVisible ? 2 : 0}
        props={props}
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default ScopePopup2;
",
  "fonts": Array [],
  "props": Object {
    "isShown": "string",
    "isSuperVisible": "string",
    "toggle": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom SomeMissingStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const WindowControl = styled('button')(
  {
    marginRight: 8,
    backgroundColor: '#CBCDCE',
    opacity: 0.7,
    transform: 'scale(1.1)',
    transition: 'all 0.15s ease-out',
    borderRadius: 10,
    width: 10,
    height: 10,
    '&:hover, &.hover': {
      transform: 'scale(1.5)',
    },
  },
  ({ props }) => ({
    '&:hover, &.hover': {
      backgroundColor: props.backgroundColorHover,
    },
  })
);

const SomeMissingStyle = props => {
  return (
    <WindowControl
      data-test-id={\`\${props['data-test-id'] || 'WindowControl'}|\`}
      onClick={props.onClick}
      tabIndex=\\"-1\\"
      props={props}
      className=\\"views-block\\"
    >
      {props.children}
    </WindowControl>
  );
};

export default SomeMissingStyle;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColorHover": "string",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom SomeMissingStyle: react-dom parses react-dom SomeMissingStyle debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const WindowControl = styled('button')(
  {
    marginRight: 8,
    backgroundColor: '#CBCDCE',
    opacity: 0.7,
    transform: 'scale(1.1)',
    transition: 'all 0.15s ease-out',
    borderRadius: 10,
    width: 10,
    height: 10,
    '&:hover, &.hover': {
      transform: 'scale(1.5)',
    },
  },
  ({ props }) => ({
    '&:hover, &.hover': {
      backgroundColor: props.backgroundColorHover,
    },
  })
);

const SomeMissingStyle = props => {
  return (
    <WindowControl
      data-test-id={\`\${props['data-test-id'] || 'WindowControl'}|\`}
      onClick={props.onClick}
      props={props}
      className=\\"views-block\\"
    >
      {props.children}
    </WindowControl>
  );
};

export default SomeMissingStyle;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColorHover": "string",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Teleport 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-dom';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

const Teleport = props => {
  return (
    <Link
      to=\\"..\\"
      data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
      className={\`views-block \${Horizontal_h1qq1i2q}\`}
    >
      <span data-test-id={\`Teleport.Text|\`} className=\\"views-block\\">
        go back
      </span>
      {props.children}
    </Link>
  );
};

export default Teleport;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Teleport: react-dom parses react-dom Teleport debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-dom';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

const Teleport = props => {
  return (
    <Link
      to=\\"..\\"
      data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
      className={\`views-block \${Horizontal_h1qq1i2q}\`}
    >
      <span data-test-id={\`Teleport.Text|\`} className=\\"views-block\\">
        go back
      </span>
      {props.children}
    </Link>
  );
};

export default Teleport;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Test 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const Test = props => {
  return (
    <Custom
      data-test-id={props['data-test-id'] || 'Custom'}
      stuff=\\"eqweqw\\"
      childrenProxyMap={{ Something: 0, Another: 1 }}
      className=\\"views-block\\"
    >
      <span data-test-id={\`Test.Something|\`} className=\\"views-block\\">
        v1vh1t1
      </span>
      <span data-test-id={\`Test.Another|\`} className=\\"views-block\\">
        inside custom
      </span>
      {props.children}
    </Custom>
  );
};

export default Test;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Test: react-dom parses react-dom Test debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const Test = props => {
  return (
    <Custom
      data-test-id={props['data-test-id'] || 'Custom'}
      stuff=\\"eqweqw\\"
      childrenProxyMap={{ Something: 0, Another: 1 }}
      className=\\"views-block\\"
    >
      <span data-test-id={\`Test.Something|\`} className=\\"views-block\\">
        v1vh1t1
      </span>
      <span data-test-id={\`Test.Another|\`} className=\\"views-block\\">
        inside custom
      </span>
      {props.children}
    </Custom>
  );
};

export default Test;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom TestIds 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const TestIds = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`TestIds.Text|\`} className=\\"views-block\\">
        1
      </span>
      <span data-test-id={\`TestIds.Text:1|\`} className=\\"views-block\\">
        2
      </span>
      <External data-test-id=\\"TestIds.External\\" className=\\"views-block\\" />
      <span data-test-id={\`TestIds.Name|\`} className=\\"views-block\\">
        name
      </span>
      {props.children}
    </div>
  );
};

export default TestIds;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom TestIds: react-dom parses react-dom TestIds debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const TestIds = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`TestIds.Text|\`} className=\\"views-block\\">
        1
      </span>
      <span data-test-id={\`TestIds.Text:1|\`} className=\\"views-block\\">
        2
      </span>
      <External data-test-id=\\"TestIds.External\\" className=\\"views-block\\" />
      <span data-test-id={\`TestIds.Name|\`} className=\\"views-block\\">
        name
      </span>
      {props.children}
    </div>
  );
};

export default TestIds;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom TextInterpolation 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const TextInterpolation = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <span
        data-test-id={\`TextInterpolation.Text|\`}
        className=\\"views-block\\"
      >{\`\${props.name} test\`}</span>
      {props.children}
    </div>
  );
};

export default TextInterpolation;
",
  "fonts": Array [],
  "props": Object {
    "name": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom TextInterpolation: react-dom parses react-dom TextInterpolation debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const TextInterpolation = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <span
        data-test-id={\`TextInterpolation.Text|\`}
        className=\\"views-block\\"
      >{\`\${props.name} test\`}</span>
      {props.children}
    </div>
  );
};

export default TextInterpolation;
",
  "fonts": Array [],
  "props": Object {
    "name": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Toggle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const Toggle = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
      className=\\"views-block\\"
    >
      NOPE
    </span>
  );
};

export default Toggle;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Toggle: react-dom parses react-dom Toggle debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const Toggle = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
      className=\\"views-block\\"
    >
      NOPE
    </span>
  );
};

export default Toggle;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureEmail 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Email_h1by7qdg = css({
  border: '1px solid black',
  color: 'red',
  '&:focus, &.focus': {
    color: 'purple',
  },
  '&:placeholder, &.placeholder': {
    color: 'blue',
  },
});

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"email\\"
        onChange={event => this.setState({ email: event.target.value })}
        value={state.email}
        data-test-id={\`\${props['data-test-id'] || 'Email'}|\`}
        autoFocus={true}
        defaultValue=\\"hey this is a default value\\"
        onSubmit={props.onSubmit}
        className={\`views-block \${Email_h1by7qdg}\`}
      />
    );
  }
}

export default UseCaptureEmail;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureEmail: react-dom parses react-dom UseCaptureEmail debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Email_h1by7qdg = css({
  border: '1px solid black',
  color: 'red',
  '&:focus, &.focus': {
    color: 'purple',
  },
  '&:placeholder, &.placeholder': {
    color: 'blue',
  },
});

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"email\\"
        onChange={event => this.setState({ email: event.target.value })}
        value={state.email}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'Email'}|\`}
        defaultValue=\\"hey this is a default value\\"
        onSubmit={props.onSubmit}
        className={\`views-block mousetrap \${Email_h1by7qdg}\`}
      />
    );
  }
}

export default UseCaptureEmail;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureFile 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        onChange={event => this.setState({ file: event.target.value })}
        value={state.file}
        data-test-id={\`\${props['data-test-id'] || 'File'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}

export default UseCaptureFile;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureFile: react-dom parses react-dom UseCaptureFile debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        onChange={event => this.setState({ file: event.target.value })}
        value={state.file}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'File'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureFile;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureNumber 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"number\\"
        onChange={event => this.setState({ number: event.target.value })}
        value={state.number}
        data-test-id={\`\${props['data-test-id'] || 'Number'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}

export default UseCaptureNumber;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureNumber: react-dom parses react-dom UseCaptureNumber debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"number\\"
        onChange={event => this.setState({ number: event.target.value })}
        value={state.number}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'Number'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureNumber;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCapturePhone 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"tel\\"
        onChange={event => this.setState({ phone: event.target.value })}
        value={state.phone}
        data-test-id={\`\${props['data-test-id'] || 'Phone'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}

export default UseCapturePhone;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCapturePhone: react-dom parses react-dom UseCapturePhone debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"tel\\"
        onChange={event => this.setState({ phone: event.target.value })}
        value={state.phone}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'Phone'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCapturePhone;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureSecure 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"password\\"
        onChange={event => this.setState({ secure: event.target.value })}
        value={state.secure}
        data-test-id={\`\${props['data-test-id'] || 'Secure'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}

export default UseCaptureSecure;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureSecure: react-dom parses react-dom UseCaptureSecure debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"password\\"
        onChange={event => this.setState({ secure: event.target.value })}
        value={state.secure}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'Secure'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureSecure;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        onChange={event => this.setState({ text: event.target.value })}
        value={state.text}
        data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}

export default UseCaptureText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureText: react-dom parses react-dom UseCaptureText debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        onChange={event => this.setState({ text: event.target.value })}
        value={state.text}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextArea 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <textarea
        onChange={event =>
          this.setState({ captureTextArea: event.target.value })
        }
        value={state.captureTextArea}
        data-test-id={\`\${props['data-test-id'] || 'CaptureTextArea'}|\`}
        className=\\"views-block\\"
      />
    );
  }
}

export default UseCaptureTextArea;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextArea: react-dom parses react-dom UseCaptureTextArea debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <textarea
        onChange={event =>
          this.setState({ captureTextArea: event.target.value })
        }
        value={state.captureTextArea}
        tabIndex={-1}
        data-test-id={\`\${props['data-test-id'] || 'CaptureTextArea'}|\`}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureTextArea;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextManagedFromOutside 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        data-test-id={\`\${props['data-test-id'] || 'CaptureText'}|\`}
        value={props.external}
        className=\\"views-block\\"
      />
    );
  }
}

export default UseCaptureTextManagedFromOutside;
",
  "fonts": Array [],
  "props": Object {
    "external": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextManagedFromOutside: react-dom parses react-dom UseCaptureTextManagedFromOutside debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        data-test-id={\`\${props['data-test-id'] || 'CaptureText'}|\`}
        value={props.external}
        className={\`views-block mousetrap\`}
      />
    );
  }
}

export default UseCaptureTextManagedFromOutside;
",
  "fonts": Array [],
  "props": Object {
    "external": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseHorizontal 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_hud64j7 = css({
  flexDirection: 'row',
  border: '1px solid red',
});

const UseHorizontal = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
      className={\`views-block \${Horizontal_hud64j7}\`}
    >
      {props.children}
    </div>
  );
};

export default UseHorizontal;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseHorizontal: react-dom parses react-dom UseHorizontal debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_hud64j7 = css({
  flexDirection: 'row',
  border: '1px solid red',
});

const UseHorizontal = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
      className={\`views-block \${Horizontal_hud64j7}\`}
    >
      {props.children}
    </div>
  );
};

export default UseHorizontal;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const UseImage = props => {
  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'Image'}|\${
        props.another ? 'another' : ''
      }\`}
      src={
        props.another
          ? 'https://views.tools/hi.jpg'
          : 'https://views.tools/rocks.jpg'
      }
      className=\\"views-block\\"
    />
  );
};

export default UseImage;
",
  "fonts": Array [],
  "props": Object {
    "another": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseImage: react-dom parses react-dom UseImage debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const UseImage = props => {
  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'Image'}|\${
        props.another ? 'another' : ''
      }\`}
      src={
        props.another
          ? 'https://views.tools/hi.jpg'
          : 'https://views.tools/rocks.jpg'
      }
      className=\\"views-block\\"
    />
  );
};

export default UseImage;
",
  "fonts": Array [],
  "props": Object {
    "another": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseOfProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const App_h1qq1i2q = css({ flexDirection: 'row' });

const UseOfProxy = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className={\`views-block \${App_h1qq1i2q}\`}
    >
      <Button
        data-test-id=\\"UseOfProxy.Button\\"
        color=\\"red\\"
        icon=\\"MyIcon\\"
        text=\\"I'm a button!\\"
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default UseOfProxy;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseOfProxy: react-dom parses react-dom UseOfProxy debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const App_h1qq1i2q = css({ flexDirection: 'row' });

const UseOfProxy = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className={\`views-block \${App_h1qq1i2q}\`}
    >
      <Button
        data-test-id=\\"UseOfProxy.Button\\"
        color=\\"red\\"
        icon=\\"MyIcon\\"
        text=\\"I'm a button!\\"
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default UseOfProxy;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Button_h1qq1i2q = css({ flexDirection: 'row' });

const UseProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Button'}|\`}
      className={\`views-block \${Button_h1qq1i2q}\`}
    >
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'red' }
          )
        : null}
      <span data-test-id={\`UseProxy.Text|\`} className=\\"views-block\\">
        {props.text}
      </span>
    </div>
  );
};

export default UseProxy;
",
  "fonts": Array [],
  "props": Object {
    "icon": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseProxy: react-dom parses react-dom UseProxy debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Button_h1qq1i2q = css({ flexDirection: 'row' });

const UseProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Button'}|\`}
      className={\`views-block \${Button_h1qq1i2q}\`}
    >
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'red' }
          )
        : null}
      <span data-test-id={\`UseProxy.Text|\`} className=\\"views-block\\">
        {props.text}
      </span>
    </div>
  );
};

export default UseProxy;
",
  "fonts": Array [],
  "props": Object {
    "icon": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseRouter 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-dom';
import { BrowserRouter as Router } from 'react-router-dom';
import Topics from './Topics.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

const UseRouter = props => {
  return (
    <Router>
      <div
        data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
        className={\`views-block \${Horizontal_h1qq1i2q}\`}
      >
        <Route
          path=\\"/\\"
          exact
          render={routeProps => (
            <Home
              data-test-id=\\"UseRouter.Home\\"
              height={props.height}
              width={360}
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        <Route
          path=\\"/about\\"
          render={routeProps => (
            <About
              data-test-id=\\"UseRouter.About\\"
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        <Route
          path=\\"/topics\\"
          render={routeProps => (
            <Topics
              data-test-id=\\"UseRouter.Topics\\"
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        {props.children}
      </div>
    </Router>
  );
};

export default UseRouter;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseRouter: react-dom parses react-dom UseRouter debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-dom';
import { BrowserRouter as Router } from 'react-router-dom';
import Topics from './Topics.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css({ flexDirection: 'row' });

const UseRouter = props => {
  return (
    <Router>
      <div
        data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
        className={\`views-block \${Horizontal_h1qq1i2q}\`}
      >
        <Route
          path=\\"/\\"
          exact
          render={routeProps => (
            <Home
              data-test-id=\\"UseRouter.Home\\"
              height={props.height}
              width={360}
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        <Route
          path=\\"/about\\"
          render={routeProps => (
            <About
              data-test-id=\\"UseRouter.About\\"
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        <Route
          path=\\"/topics\\"
          render={routeProps => (
            <Topics
              data-test-id=\\"UseRouter.Topics\\"
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        {props.children}
      </div>
    </Router>
  );
};

export default UseRouter;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Svg_hq411mi = css({
  height: 20,
  width: 20,
});

const UseSvg = props => {
  return (
    <svg
      data-test-id={\`\${props['data-test-id'] || 'Svg'}|\`}
      viewBox=\\"0 0 20 20\\"
      className={\`views-block \${Svg_hq411mi}\`}
    >
      <path
        data-test-id={\`UseSvg.SvgPath|\`}
        d=\\"0 20\\"
        fill=\\"red\\"
        className=\\"views-block\\"
      />
      <circle
        data-test-id={\`UseSvg.SvgCircle|\`}
        cx={10}
        cy={5}
        r={5}
        className=\\"views-block\\"
      />
      <g
        data-test-id={\`UseSvg.SvgGroup|\`}
        transform=\\"translate(6.000000, 5.000000)\\"
        className=\\"views-block\\"
      >
        <path
          data-test-id={\`UseSvg.SvgPath:1|\`}
          d={1}
          className=\\"views-block\\"
        />
        <path
          data-test-id={\`UseSvg.SvgPath:2|\`}
          d={2}
          className=\\"views-block\\"
        />
      </g>
      <text
        data-test-id={\`UseSvg.SvgText|\`}
        text=\\"hey\\"
        className=\\"views-block\\"
      />
      {props.children}
    </svg>
  );
};

export default UseSvg;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseSvg: react-dom parses react-dom UseSvg debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Svg_hq411mi = css({
  height: 20,
  width: 20,
});

const UseSvg = props => {
  return (
    <svg
      data-test-id={\`\${props['data-test-id'] || 'Svg'}|\`}
      viewBox=\\"0 0 20 20\\"
      className={\`views-block \${Svg_hq411mi}\`}
    >
      <path
        data-test-id={\`UseSvg.SvgPath|\`}
        d=\\"0 20\\"
        fill=\\"red\\"
        className=\\"views-block\\"
      />
      <circle
        data-test-id={\`UseSvg.SvgCircle|\`}
        cx={10}
        cy={5}
        r={5}
        className=\\"views-block\\"
      />
      <g
        data-test-id={\`UseSvg.SvgGroup|\`}
        transform=\\"translate(6.000000, 5.000000)\\"
        className=\\"views-block\\"
      >
        <path
          data-test-id={\`UseSvg.SvgPath:1|\`}
          d={1}
          className=\\"views-block\\"
        />
        <path
          data-test-id={\`UseSvg.SvgPath:2|\`}
          d={2}
          className=\\"views-block\\"
        />
      </g>
      <text
        data-test-id={\`UseSvg.SvgText|\`}
        text=\\"hey\\"
        className=\\"views-block\\"
      />
      {props.children}
    </svg>
  );
};

export default UseSvg;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import './Fonts/Montserrat-300';
import { css } from 'react-emotion';

const UseText_hjam8jb = css({
  color: 'blue',
  fontFamily: 'Montserrat, sans-serif',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 300,
});

const UseText = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'UseText'}|\`}
      className={\`views-block \${UseText_hjam8jb}\`}
    >
      Hi, I'm some text
    </span>
  );
};

export default UseText;
",
  "fonts": Array [
    Object {
      "family": "Montserrat",
      "id": "Montserrat-300",
      "style": "normal",
      "weight": "300",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseText: react-dom parses react-dom UseText debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import './Fonts/Montserrat-300';
import { css } from 'react-emotion';

const UseText_hjam8jb = css({
  color: 'blue',
  fontFamily: 'Montserrat, sans-serif',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 300,
});

const UseText = props => {
  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'UseText'}|\`}
      className={\`views-block \${UseText_hjam8jb}\`}
    >
      Hi, I'm some text
    </span>
  );
};

export default UseText;
",
  "fonts": Array [
    Object {
      "family": "Montserrat",
      "id": "Montserrat-300",
      "style": "normal",
      "weight": "300",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseTextCustomFont 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import './Fonts/CustomFontNotOnGoogle-300';
import './Fonts/CustomFontNotOnGoogle-400-italic';
import { css } from 'react-emotion';

const Normal_h4qeg9p = css({
  color: 'blue',
  fontFamily: 'CustomFontNotOnGoogle, sans-serif',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 300,
});
const Italic_hw8flfq = css({
  color: 'blue',
  fontFamily: 'CustomFontNotOnGoogle, sans-serif',
  fontStyle: 'italic',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 400,
});

const UseTextCustomFont = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'UseTextCustomFont'}|\`}
      className=\\"views-block\\"
    >
      <span
        data-test-id={\`UseTextCustomFont.Normal|\`}
        className={\`views-block \${Normal_h4qeg9p}\`}
      >
        Hi, I'm some text
      </span>
      <span
        data-test-id={\`UseTextCustomFont.Italic|\`}
        className={\`views-block \${Italic_hw8flfq}\`}
      >
        Hi, I'm some text
      </span>
      {props.children}
    </div>
  );
};

export default UseTextCustomFont;
",
  "fonts": Array [
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-300",
      "style": "normal",
      "weight": "300",
    },
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-400-italic",
      "style": "italic",
      "weight": "400",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseTextCustomFont: react-dom parses react-dom UseTextCustomFont debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import './Fonts/CustomFontNotOnGoogle-300';
import './Fonts/CustomFontNotOnGoogle-400-italic';
import { css } from 'react-emotion';

const Normal_h4qeg9p = css({
  color: 'blue',
  fontFamily: 'CustomFontNotOnGoogle, sans-serif',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 300,
});
const Italic_hw8flfq = css({
  color: 'blue',
  fontFamily: 'CustomFontNotOnGoogle, sans-serif',
  fontStyle: 'italic',
  fontSize: 16,
  lineHeight: 1.5,
  fontWeight: 400,
});

const UseTextCustomFont = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'UseTextCustomFont'}|\`}
      className=\\"views-block\\"
    >
      <span
        data-test-id={\`UseTextCustomFont.Normal|\`}
        className={\`views-block \${Normal_h4qeg9p}\`}
      >
        Hi, I'm some text
      </span>
      <span
        data-test-id={\`UseTextCustomFont.Italic|\`}
        className={\`views-block \${Italic_hw8flfq}\`}
      >
        Hi, I'm some text
      </span>
      {props.children}
    </div>
  );
};

export default UseTextCustomFont;
",
  "fonts": Array [
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-300",
      "style": "normal",
      "weight": "300",
    },
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-400-italic",
      "style": "italic",
      "weight": "400",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseVertical 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h1cyenk5 = css({ backgroundColor: 'red' });

const UseVertical = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${Vertical_h1cyenk5}\`}
    >
      {props.children}
    </div>
  );
};

export default UseVertical;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseVertical: react-dom parses react-dom UseVertical debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const Vertical_h1cyenk5 = css({ backgroundColor: 'red' });

const UseVertical = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${Vertical_h1cyenk5}\`}
    >
      {props.children}
    </div>
  );
};

export default UseVertical;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ViewNameIsntUsedInStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const ViewNameIsntUsedInStyle1 = styled('div')({ zIndex: 5 }, ({ props }) => ({
  opacity: props.opacity,
}));

const ViewNameIsntUsedInStyle = props => {
  return (
    <ViewNameIsntUsedInStyle1
      data-test-id={\`\${props['data-test-id'] || 'ViewNameIsntUsedInStyle'}|\`}
      props={props}
      className=\\"views-block\\"
    >
      {props.children}
    </ViewNameIsntUsedInStyle1>
  );
};

export default ViewNameIsntUsedInStyle;
",
  "fonts": Array [],
  "props": Object {
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ViewNameIsntUsedInStyle: react-dom parses react-dom ViewNameIsntUsedInStyle debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import styled from 'react-emotion';

const ViewNameIsntUsedInStyle1 = styled('div')({ zIndex: 5 }, ({ props }) => ({
  opacity: props.opacity,
}));

const ViewNameIsntUsedInStyle = props => {
  return (
    <ViewNameIsntUsedInStyle1
      data-test-id={\`\${props['data-test-id'] || 'ViewNameIsntUsedInStyle'}|\`}
      props={props}
      className=\\"views-block\\"
    >
      {props.children}
    </ViewNameIsntUsedInStyle1>
  );
};

export default ViewNameIsntUsedInStyle;
",
  "fonts": Array [],
  "props": Object {
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom When 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const App_h1qq1i2q = css({ flexDirection: 'row' });

const When = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className={\`views-block \${App_h1qq1i2q}\`}
    >
      {props.showMe ? (
        <span data-test-id={\`When.Text|\`} className=\\"views-block\\">
          I may be hidden
        </span>
      ) : null}
      {props.children}
    </div>
  );
};

export default When;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom When: react-dom parses react-dom When debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'react-emotion';

const App_h1qq1i2q = css({ flexDirection: 'row' });

const When = props => {
  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className={\`views-block \${App_h1qq1i2q}\`}
    >
      {props.showMe ? (
        <span data-test-id={\`When.Text|\`} className=\\"views-block\\">
          I may be hidden
        </span>
      ) : null}
      {props.children}
    </div>
  );
};

export default When;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom WhenTopLevel 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const WhenTopLevel = props => {
  return props.showMe ? (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
      className=\\"views-block\\"
    >
      I may be hidden
    </span>
  ) : null;
};

export default WhenTopLevel;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom WhenTopLevel: react-dom parses react-dom WhenTopLevel debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const WhenTopLevel = props => {
  return props.showMe ? (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
      className=\\"views-block\\"
    >
      I may be hidden
    </span>
  ) : null;
};

export default WhenTopLevel;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom WithTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const WithTest = props => {
  return (
    <button
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      onClick={props.change}
      className=\\"views-block\\"
    >
      <span data-test-id={\`WithTest.Text|\`} className=\\"views-block\\">
        {props.text}
      </span>
      {props.children}
    </button>
  );
};

export default WithTest;
",
  "fonts": Array [],
  "props": Object {
    "change": "function",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom WithTest: react-dom parses react-dom WithTest debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const WithTest = props => {
  return (
    <button
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      onClick={props.change}
      className=\\"views-block\\"
    >
      <span data-test-id={\`WithTest.Text|\`} className=\\"views-block\\">
        {props.text}
      </span>
      {props.children}
    </button>
  );
};

export default WithTest;
",
  "fonts": Array [],
  "props": Object {
    "change": "function",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Action 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SubButton from './SubButton.view.js';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h1g2xbng: { color: 'red' } });

const Action = props => {
  return props.check ? (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.clickMe}
      disabled={props.isDisabled}
      underlayColor=\\"transparent\\"
    >
      <View
        testID={\`\${props['testID'] || 'Vertical'}|\`}
        style={styles.h1g2xbng}
      >
        <Text testID={\`Action.Text|\`}>click me</Text>
        <SubButton testID=\\"Action.SubButton\\" isDisabled={true} />
        {props.children}
      </View>
    </TouchableWithoutFeedback>
  ) : null;
};

export default Action;
",
  "fonts": Array [],
  "props": Object {
    "check": "string",
    "clickMe": "function",
    "isDisabled": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native AnimatedButton 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, Text, TouchableWithoutFeedback } from 'react-native';

const AnimatedButton = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <Animated.View
        testID={\`\${props['testID'] || 'Vertical'}|\`}
        style={{ opacity: props.opacity }}
      >
        <Text testID={\`AnimatedButton.Text|\`}>hey</Text>
        {props.children}
      </Animated.View>
    </TouchableWithoutFeedback>
  );
};

export default AnimatedButton;
",
  "fonts": Array [],
  "props": Object {
    "onClick": "function",
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native AppRegionDrag 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  hfuuuuw: { width: '92%', marginTop: 'auto' },
});

const AppRegionDrag = props => {
  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`} style={styles.hfuuuuw}>
      {props.children}
    </View>
  );
};

export default AppRegionDrag;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native BackgroundImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, Image, StyleSheet } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const BackgroundImage = props => {
  return (
    <Image
      resizeMode=\\"cover\\"
      source={{ uri: 'https://viewsdx.com/image.jpg' }}
      testID={\`\${props['testID'] || 'Vertical'}|\`}
    >
      <Animated.Image
        resizeMode={undefined}
        source={{ uri: props.backgroundImage }}
        testID={\`BackgroundImage.Horizontal|\`}
        style={styles.hp2cr4d}
      />
      {props.children}
    </Image>
  );
};

export default BackgroundImage;
",
  "fonts": Array [],
  "props": Object {
    "backgroundImage": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native BoxShadow 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  hvzqnyi: {
    elevation: 1,
    shadowOffset: { width: 0, height: 8 },
    shadowRadius: 15,
    shadowOpacity: 1,
    shadowColor: 'rgba(0, 0, 0, 0.1)',
  },
});

const BoxShadow = props => {
  return (
    <Animated.View
      testID={\`\${props['testID'] || 'Vertical'}|\`}
      style={{
        elevation: 1,
        shadowOffset: { width: 10, height: 5 },
        shadowRadius: 2,
        shadowOpacity: 1,
        shadowColor: props.color,
      }}
    >
      <Animated.View
        testID={\`BoxShadow.Vertical:1|\`}
        style={{
          elevation: 1,
          shadowOffset: { width: 10, height: 5 },
          shadowRadius: 10,
          shadowOpacity: 1,
          shadowColor: props.color,
        }}
      >
        <View testID={\`BoxShadow.Vertical:2|\`} style={styles.hvzqnyi} />
      </Animated.View>
      {props.children}
    </Animated.View>
  );
};

export default BoxShadow;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ClassName 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ hkg1xou: { backgroundColor: 'blue' } });

const ClassName = props => {
  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`} style={styles.hkg1xou}>
      {props.children}
    </View>
  );
};

export default ClassName;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Code 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ h1jcb2fl: { backgroundColor: 'red' } });

const Code = props => {
  return (
    <View
      testID={\`\${props['testID'] || 'Vertical'}|\`}
      ref={$e => (this.$e = $e)}
      style={styles.h1jcb2fl}
    >
      <Animated.Text
        testID={\`Code.Text|\`}
        ref={props.refText}
        style={{ color: props.color }}
      >
        {props.text}
      </Animated.Text>
      {props.children}
    </View>
  );
};

export default Code;
",
  "fonts": Array [],
  "props": Object {
    "color": "string",
    "refText": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native DynamicStylesApplyToBasicBlocksOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import { Animated } from 'react-native';

const DynamicStylesApplyToBasicBlocksOnly = props => {
  return (
    <Animated.View
      testID={\`\${props['testID'] || 'Vertical'}|\`}
      style={{ height: props.height }}
    >
      <SomeThing
        testID=\\"DynamicStylesApplyToBasicBlocksOnly.OnTop\\"
        height={props.height}
      />
      {props.children}
    </Animated.View>
  );
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native EmptyText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const EmptyText = props => {
  return <Text testID={\`\${props['testID'] || 'EmptyText'}|\`} />;
};

export default EmptyText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Form 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TextInput, TouchableWithoutFeedback, View } from 'react-native';

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <View testID={\`\${props['testID'] || 'Form'}|\`}>
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Surname ? () => this.$Surname.focus() : null}
          returnKeyType={this.$Surname ? 'next' : 'go'}
          onChangeText={name => this.setState({ name })}
          ref={$e => (this.$name = $e)}
          value={state.name}
          keyboardType=\\"default\\"
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Name|\`}
          autoFocus={true}
        />
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Password ? () => this.$Password.focus() : null}
          returnKeyType={this.$Password ? 'next' : 'go'}
          onChangeText={surname => this.setState({ surname })}
          ref={$e => (this.$surname = $e)}
          value={state.surname}
          keyboardType=\\"default\\"
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Surname|\`}
        />
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Email ? () => this.$Email.focus() : null}
          returnKeyType={this.$Email ? 'next' : 'go'}
          onChangeText={password => this.setState({ password })}
          ref={$e => (this.$password = $e)}
          value={state.password}
          secureTextEntry
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Password|\`}
        />
        <TextInput
          returnKeyType=\\"done\\"
          onChangeText={email => this.setState({ email })}
          ref={$e => (this.$email = $e)}
          value={state.email}
          keyboardType=\\"email-address\\"
          autoCorrect={false}
          defaultValue={undefined}
          underlineColorAndroid=\\"transparent\\"
          testID={\`Form.Email|\`}
          defaultValue=\\"morph@viewsdx.com\\"
        />
        <TouchableWithoutFeedback
          activeOpacity={0.7}
          onPress={() => props.onSubmit(state)}
          underlayColor=\\"transparent\\"
        >
          <View testID={\`Form.Button|\`}>
            <Text testID={\`Form.Text|\`}>Send!</Text>
          </View>
        </TouchableWithoutFeedback>
        {props.children}
      </View>
    );
  }
}

export default Form;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native GoTo 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, View } from 'react-native';

const GoTo = props => {
  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
      <Text testID={\`GoTo.Text|\`}>Go to ViewsDX website!</Text>
      {props.children}
    </View>
  );
};

export default GoTo;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Hover 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, TouchableWithoutFeedback } from 'react-native';
const styles = StyleSheet.create({ hyfo4ef: { color: 'white' } });

const Hover = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <Animated.View
        testID={\`\${props['testID'] || 'Button'}|\`}
        style={{ backgroundColor: props.backgroundColor }}
      >
        <Animated.Text
          testID={\`Hover.Text|\`}
          style={[styles.hyfo4ef, { fontSize: props.fontSize }]}
        >
          Hey!
        </Animated.Text>
        {props.children}
      </Animated.View>
    </TouchableWithoutFeedback>
  );
};

export default Hover;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColor": "string",
    "backgroundColorHover": "string",
    "fontSize": "number",
    "fontSizeHover": "number",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native JustText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const JustText = props => {
  return <Text testID={\`\${props['testID'] || 'Text'}|\`}>hey!</Text>;
};

export default JustText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ListOfSomething 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Something from './Something.view.js';
import { View } from 'react-native';

const ListOfSomething = props => {
  return (
    <View testID={\`\${props['testID'] || 'ListOfSomething'}|\`}>
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Something
            {...item}
            key={item.id || index}
            testID=\\"ListOfSomething.Something\\"
          />
        ))}
      {props.children}
    </View>
  );
};

export default ListOfSomething;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ListWhen 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Card from './Card.view.js';
import { View } from 'react-native';

const ListWhen = props => {
  return props.showMe ? (
    <View testID={\`\${props['testID'] || 'List'}|\`}>
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Card {...item} key={item.id || index} testID=\\"ListWhen.Card\\" />
        ))}
      {props.children}
    </View>
  ) : null;
};

export default ListWhen;
",
  "fonts": Array [],
  "props": Object {
    "from": "string",
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import garfieldPng from './garfield.png';
import chopperJpg from './chopper.jpg';
import { Image } from 'react-native';

const LocalImage = props => {
  return (
    <Image
      testID={\`\${props['testID'] || 'LocalImage'}|\${
        props.isCat ? 'isCat' : ''
      }\`}
      source={props.isCat ? garfieldPng : chopperJpg}
    />
  );
};

export default LocalImage;
",
  "fonts": Array [],
  "props": Object {
    "isCat": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalImageSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import chopperSvg from './chopper.svg';
import { Image, StyleSheet } from 'react-native';
const styles = StyleSheet.create({ h1fkj9gt: { width: 50 } });

const LocalImageSvg = props => {
  return (
    <Image
      testID={\`\${props['testID'] || 'LocalImageSvg'}|\`}
      source={chopperSvg}
      style={[styles.h1fkj9gt, { height: props.height }]}
    />
  );
};

export default LocalImageSvg;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalOrRemoteImageWhenCode 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Image } from 'react-native';

const LocalOrRemoteImageWhenCode = props => {
  return (
    <Image
      testID={\`\${props['testID'] || 'LocalOrRemoteImageWhenCode'}|\`}
      source={{ uri: props.source }}
    />
  );
};

export default LocalOrRemoteImageWhenCode;
",
  "fonts": Array [],
  "props": Object {
    "source": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native NameIsType 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const NameIsType = props => {
  return <Text testID={\`\${props['testID'] || 'Texto'}|\`}>iam</Text>;
};

export default NameIsType;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native NestedRoutes 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-native';
import { Route } from 'react-router-native';
import Topic from './Topic.view.js';
import { Text, View } from 'react-native';

const NestedRoutes = props => {
  return (
    <View testID={\`\${props['testID'] || 'Topics'}|\`}>
      <Text testID={\`NestedRoutes.Text|\`}>topics</Text>
      <Link
        activeOpacity={0.7}
        to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
        underlayColor=\\"transparent\\"
      >
        <View
          to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
          testID={\`NestedRoutes.Link|\`}
        >
          <Text testID={\`NestedRoutes.Text:1|\`}>Rendering with React</Text>
        </View>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps => (
          <Topic testID=\\"NestedRoutes.Topic\\" {...routeProps} />
        )}
      />
      {props.children}
    </View>
  );
};

export default withRouter(NestedRoutes);
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Print 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, View } from 'react-native';

const Print = props => {
  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
      <Text testID={\`Print.Text|\`}>not in print</Text>
      <Text testID={\`Print.Text:1|\`}>hey</Text>
      {props.children}
    </View>
  );
};

export default Print;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ProxyTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const ProxyTest = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
      <View testID={\`ProxyTest.Horizontal|\`} style={styles.hp2cr4d}>
        {props.bla && childrenArray[props.childrenProxyMap['Something']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['Something']],
              { onClick: props.onClickRemapped }
            )
          : null}
      </View>
      {props.childrenProxyMap && childrenArray[props.childrenProxyMap['View1']]}
    </View>
  );
};

export default ProxyTest;
",
  "fonts": Array [],
  "props": Object {
    "bla": "string",
    "onClickRemapped": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Scope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const Scope = props => {
  return (
    <Text
      testID={\`\${props['testID'] || 'Text'}|\${
        props.somethingGreen
          ? 'somethingGreen'
          : props.whatMakesBlue
            ? 'whatMakesBlue'
            : !props.whatMakesBlue && props.somethingGreen
              ? 'notWhatMakesBlueAndSomethingGreen'
              : ''
      }\`}
      style={{
        color: props.somethingGreen
          ? 'rgb(0,255,0)'
          : props.whatMakesBlue
            ? 'rgb(0,0,255)'
            : !props.whatMakesBlue && props.somethingGreen
              ? 'rgb(0,0,255)'
              : 'red',
      }}
    >
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue
          ? props.blue
          : !props.whatMakesBlue && props.somethingGreen ? props.blue : '1 red'}
    </Text>
  );
};

export default Scope;
",
  "fonts": Array [],
  "props": Object {
    "blue": "string",
    "somethingGreen": "string",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopeOnCustomView 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';

const ScopeOnCustomView = props => {
  return (
    <Button
      testID={props['testID'] || 'Button'}
      label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
      another={props.a ? 1 : 0}
      more={props.a ? props.different : props.more}
    >
      {props.children}
    </Button>
  );
};

export default ScopeOnCustomView;
",
  "fonts": Array [],
  "props": Object {
    "different": "string",
    "more": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopePopup 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TouchableWithoutFeedback, View } from 'react-native';

const ScopePopup = props => {
  return (
    <View testID={\`\${props['testID'] || 'Popup'}|\`}>
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={
          props.somethingGreen
            ? props.onClickGreen
            : props.whatMakesBlue ? props.onClickBlue : props.toggle
        }
        underlayColor=\\"transparent\\"
      >
        <View
          testID={\`ScopePopup.Toggle|\${
            props.somethingGreen
              ? 'somethingGreen'
              : props.whatMakesBlue ? 'whatMakesBlue' : ''
          }\`}
        >
          <Text testID={\`ScopePopup.Text|\`}>toggle popup</Text>
        </View>
      </TouchableWithoutFeedback>
      {props.children}
    </View>
  );
};

export default ScopePopup;
",
  "fonts": Array [],
  "props": Object {
    "onClickBlue": "function",
    "onClickGreen": "function",
    "somethingGreen": "string",
    "toggle": "function",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopePopup2 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TouchableWithoutFeedback, View } from 'react-native';

const ScopePopup2 = props => {
  return (
    <View testID={\`\${props['testID'] || 'Popup'}|\`}>
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={props.toggle}
        underlayColor=\\"transparent\\"
      >
        <View testID={\`ScopePopup2.Toggle|\`}>
          <Text testID={\`ScopePopup2.Text|\`}>toggle popup</Text>
        </View>
      </TouchableWithoutFeedback>
      <View
        testID={\`ScopePopup2.Content|\${
          props.isShown
            ? 'isShown'
            : props.isSuperVisible ? 'isSuperVisible' : ''
        }\`}
        scale={props.isShown ? 1 : props.isSuperVisible ? 2 : 0}
        style={{ opacity: props.isShown ? 1 : props.isSuperVisible ? 3 : 0 }}
      />
      {props.children}
    </View>
  );
};

export default ScopePopup2;
",
  "fonts": Array [],
  "props": Object {
    "isShown": "string",
    "isSuperVisible": "string",
    "toggle": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native SomeMissingStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, TouchableWithoutFeedback } from 'react-native';
const styles = StyleSheet.create({
  h7g4z7s: {
    marginRight: 8,
    backgroundColor: '#CBCDCE',
    opacity: 0.7,
    transform: 'scale(1.1)',
    transition: 'all 0.15s ease-out',
    borderRadius: 10,
    width: 10,
    height: 10,
  },
});

const SomeMissingStyle = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <Animated.View
        testID={\`\${props['testID'] || 'WindowControl'}|\`}
        tabIndex=\\"-1\\"
        style={styles.h7g4z7s}
      >
        {props.children}
      </Animated.View>
    </TouchableWithoutFeedback>
  );
};

export default SomeMissingStyle;
",
  "fonts": Array [],
  "props": Object {
    "backgroundColorHover": "string",
    "onClick": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Teleport 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-native';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const Teleport = props => {
  return (
    <Link activeOpacity={0.7} to=\\"..\\" underlayColor=\\"transparent\\">
      <View
        to=\\"..\\"
        testID={\`\${props['testID'] || 'Horizontal'}|\`}
        style={styles.hp2cr4d}
      >
        <Text testID={\`Teleport.Text|\`}>go back</Text>
        {props.children}
      </View>
    </Link>
  );
};

export default Teleport;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Test 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';
import { Text } from 'react-native';

const Test = props => {
  return (
    <Custom
      testID={props['testID'] || 'Custom'}
      stuff=\\"eqweqw\\"
      childrenProxyMap={{ Something: 0, Another: 1 }}
    >
      <Text testID={\`Test.Something|\`}>v1vh1t1</Text>
      <Text testID={\`Test.Another|\`}>inside custom</Text>
      {props.children}
    </Custom>
  );
};

export default Test;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native TestIds 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import { Text, View } from 'react-native';

const TestIds = props => {
  return (
    <View testID={\`\${props['testID'] || 'App'}|\`}>
      <Text testID={\`TestIds.Text|\`}>1</Text>
      <Text testID={\`TestIds.Text:1|\`}>2</Text>
      <External testID=\\"TestIds.External\\" />
      <Text testID={\`TestIds.Name|\`}>name</Text>
      {props.children}
    </View>
  );
};

export default TestIds;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native TextInterpolation 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, View } from 'react-native';

const TextInterpolation = props => {
  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
      <Text testID={\`TextInterpolation.Text|\`}>{\`\${props.name} test\`}</Text>
      {props.children}
    </View>
  );
};

export default TextInterpolation;
",
  "fonts": Array [],
  "props": Object {
    "name": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Toggle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const Toggle = props => {
  return <Text testID={\`\${props['testID'] || 'Text'}|\`}>NOPE</Text>;
};

export default Toggle;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureEmail 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, TextInput } from 'react-native';
const styles = StyleSheet.create({
  hm4pcs: {
    borderColor: 'black',
    borderStyle: 'solid',
    borderWidth: 1,
    color: 'red',
  },
});

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={email => this.setState({ email })}
        ref={$e => (this.$email = $e)}
        value={state.email}
        keyboardType=\\"email-address\\"
        autoCorrect={false}
        defaultValue={undefined}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Email'}|\`}
        autoFocus={true}
        defaultValue=\\"hey this is a default value\\"
        style={styles.hm4pcs}
      />
    );
  }
}

export default UseCaptureEmail;
",
  "fonts": Array [],
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureFile 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import CaptureFile from './CaptureFile.view.js';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <CaptureFile
        returnKeyType=\\"done\\"
        onChangeText={file => this.setState({ file })}
        ref={$e => (this.$file = $e)}
        value={state.file}
        keyboardType=\\"undefined\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'File'}|\`}
      />
    );
  }
}

export default UseCaptureFile;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureNumber 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={number => this.setState({ number })}
        ref={$e => (this.$number = $e)}
        value={state.number}
        keyboardType=\\"numeric\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Number'}|\`}
      />
    );
  }
}

export default UseCaptureNumber;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCapturePhone 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={phone => this.setState({ phone })}
        ref={$e => (this.$phone = $e)}
        value={state.phone}
        keyboardType=\\"phone-pad\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Phone'}|\`}
      />
    );
  }
}

export default UseCapturePhone;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureSecure 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={secure => this.setState({ secure })}
        ref={$e => (this.$secure = $e)}
        value={state.secure}
        secureTextEntry
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Secure'}|\`}
      />
    );
  }
}

export default UseCaptureSecure;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={text => this.setState({ text })}
        ref={$e => (this.$text = $e)}
        value={state.text}
        keyboardType=\\"default\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'Text'}|\`}
      />
    );
  }
}

export default UseCaptureText;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureTextArea 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={captureTextArea => this.setState({ captureTextArea })}
        ref={$e => (this.$captureTextArea = $e)}
        value={state.captureTextArea}
        keyboardType=\\"default\\"
        multiline={true}
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'CaptureTextArea'}|\`}
      />
    );
  }
}

export default UseCaptureTextArea;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureTextManagedFromOutside 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={captureText => this.setState({ captureText })}
        ref={$e => (this.$captureText = $e)}
        value={state.captureText}
        keyboardType=\\"default\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={\`\${props['testID'] || 'CaptureText'}|\`}
        value={props.external}
      />
    );
  }
}

export default UseCaptureTextManagedFromOutside;
",
  "fonts": Array [],
  "props": Object {
    "external": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseHorizontal 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h13qdyyc: {
    flexDirection: 'row',
    borderColor: 'red',
    borderStyle: 'solid',
    borderWidth: 1,
  },
});

const UseHorizontal = props => {
  return (
    <View
      testID={\`\${props['testID'] || 'Horizontal'}|\`}
      style={styles.h13qdyyc}
    >
      {props.children}
    </View>
  );
};

export default UseHorizontal;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Image } from 'react-native';

const UseImage = props => {
  return (
    <Image
      testID={\`\${props['testID'] || 'Image'}|\${props.another ? 'another' : ''}\`}
      source={{
        uri: props.another
          ? 'https://views.tools/hi.jpg'
          : 'https://views.tools/rocks.jpg',
      }}
    />
  );
};

export default UseImage;
",
  "fonts": Array [],
  "props": Object {
    "another": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseOfProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseOfProxy = props => {
  return (
    <View testID={\`\${props['testID'] || 'App'}|\`} style={styles.hp2cr4d}>
      <Button
        testID=\\"UseOfProxy.Button\\"
        color=\\"red\\"
        icon=\\"MyIcon\\"
        text=\\"I'm a button!\\"
      />
      {props.children}
    </View>
  );
};

export default UseOfProxy;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <View testID={\`\${props['testID'] || 'Button'}|\`} style={styles.hp2cr4d}>
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'red' }
          )
        : null}
      <Text testID={\`UseProxy.Text|\`}>{props.text}</Text>
    </View>
  );
};

export default UseProxy;
",
  "fonts": Array [],
  "props": Object {
    "icon": "string",
    "text": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseRouter 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-native';
import { NativeRouter as Router } from 'react-router-native';
import Topics from './Topics.view.js';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseRouter = props => {
  return (
    <Router>
      <View
        testID={\`\${props['testID'] || 'Horizontal'}|\`}
        style={styles.hp2cr4d}
      >
        <Route
          path=\\"/\\"
          exact
          render={routeProps => (
            <Home
              testID=\\"UseRouter.Home\\"
              height={props.height}
              width={360}
              {...routeProps}
            />
          )}
        />
        <Route
          path=\\"/about\\"
          render={routeProps => (
            <About testID=\\"UseRouter.About\\" {...routeProps} />
          )}
        />
        <Route
          path=\\"/topics\\"
          render={routeProps => (
            <Topics testID=\\"UseRouter.Topics\\" {...routeProps} />
          )}
        />
        {props.children}
      </View>
    </Router>
  );
};

export default UseRouter;
",
  "fonts": Array [],
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Svg, {
  Circle as SvgCircle,
  G as SvgGroup,
  Path as SvgPath,
  Text as SvgText,
} from 'react-native-svg';

const UseSvg = props => {
  return (
    <Svg
      testID={\`\${props['testID'] || 'Svg'}|\`}
      viewBox=\\"0 0 20 20\\"
      height={20}
      width={20}
    >
      <SvgPath testID={\`UseSvg.SvgPath|\`} d=\\"0 20\\" fill=\\"red\\" />
      <SvgCircle testID={\`UseSvg.SvgCircle|\`} cx={10} cy={5} r={5} />
      <SvgGroup
        testID={\`UseSvg.SvgGroup|\`}
        transform=\\"translate(6.000000, 5.000000)\\"
      >
        <SvgPath testID={\`UseSvg.SvgPath:1|\`} d={1} />
        <SvgPath testID={\`UseSvg.SvgPath:2|\`} d={2} />
      </SvgGroup>
      <SvgText testID={\`UseSvg.SvgText|\`} text=\\"hey\\" />
      {props.children}
    </Svg>
  );
};

export default UseSvg;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text } from 'react-native';
const styles = StyleSheet.create({
  h1gml2rz: {
    color: 'blue',
    fontFamily: 'Montserrat-300',
    fontSize: 16,
    lineHeight: 24,
  },
});

const UseText = props => {
  return (
    <Text testID={\`\${props['testID'] || 'UseText'}|\`} style={styles.h1gml2rz}>
      Hi, I'm some text
    </Text>
  );
};

export default UseText;
",
  "fonts": Array [
    Object {
      "family": "Montserrat",
      "id": "Montserrat-300",
      "style": "normal",
      "weight": "300",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseTextCustomFont 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({
  hlldui9: {
    color: 'blue',
    fontFamily: 'CustomFontNotOnGoogle-300',
    fontSize: 16,
    lineHeight: 24,
  },
  h164u665: {
    color: 'blue',
    fontFamily: 'CustomFontNotOnGoogle-400',
    fontStyle: 'italic',
    fontSize: 16,
    lineHeight: 24,
  },
});

const UseTextCustomFont = props => {
  return (
    <View testID={\`\${props['testID'] || 'UseTextCustomFont'}|\`}>
      <Text testID={\`UseTextCustomFont.Normal|\`} style={styles.hlldui9}>
        Hi, I'm some text
      </Text>
      <Text testID={\`UseTextCustomFont.Italic|\`} style={styles.h164u665}>
        Hi, I'm some text
      </Text>
      {props.children}
    </View>
  );
};

export default UseTextCustomFont;
",
  "fonts": Array [
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-300",
      "style": "normal",
      "weight": "300",
    },
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-400-italic",
      "style": "italic",
      "weight": "400",
    },
  ],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseVertical 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ h1jcb2fl: { backgroundColor: 'red' } });

const UseVertical = props => {
  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`} style={styles.h1jcb2fl}>
      {props.children}
    </View>
  );
};

export default UseVertical;
",
  "fonts": Array [],
  "props": Object {},
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ViewNameIsntUsedInStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet } from 'react-native';
const styles = StyleSheet.create({ h15ehzpl: { zIndex: 5 } });

const ViewNameIsntUsedInStyle = props => {
  return (
    <Animated.View
      testID={\`\${props['testID'] || 'ViewNameIsntUsedInStyle'}|\`}
      style={[styles.h15ehzpl, { opacity: props.opacity }]}
    >
      {props.children}
    </Animated.View>
  );
};

export default ViewNameIsntUsedInStyle;
",
  "fonts": Array [],
  "props": Object {
    "opacity": "number",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native When 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const When = props => {
  return (
    <View testID={\`\${props['testID'] || 'App'}|\`} style={styles.hp2cr4d}>
      {props.showMe ? <Text testID={\`When.Text|\`}>I may be hidden</Text> : null}
      {props.children}
    </View>
  );
};

export default When;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native WhenTopLevel 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const WhenTopLevel = props => {
  return props.showMe ? (
    <Text testID={\`\${props['testID'] || 'Text'}|\`}>I may be hidden</Text>
  ) : null;
};

export default WhenTopLevel;
",
  "fonts": Array [],
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
}
`;

exports[`react-native parses react-native WithTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text, TouchableWithoutFeedback, View } from 'react-native';

const WithTest = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.change}
      underlayColor=\\"transparent\\"
    >
      <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
        <Text testID={\`WithTest.Text|\`}>{props.text}</Text>
        {props.children}
      </View>
    </TouchableWithoutFeedback>
  );
};

export default WithTest;
",
  "fonts": Array [],
  "props": Object {
    "change": "function",
    "text": "string",
  },
  "svgs": Array [],
}
`;
